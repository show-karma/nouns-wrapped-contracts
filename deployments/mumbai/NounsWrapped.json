{
  "address": "0x247eE1968AF7375E55FAb1a7E5F597a55850079d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_mintFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccountBalanceOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewOwnerIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoHandoverRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipHandoverCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipHandoverRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "completeOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "props",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "sponsoredProps",
              "type": "uint16"
            },
            {
              "internalType": "uint24",
              "name": "votes",
              "type": "uint24"
            },
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            }
          ],
          "internalType": "struct NounsWrapped.WrappedStats",
          "name": "stats",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "result",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pendingOwner",
          "type": "address"
        }
      ],
      "name": "ownershipHandoverExpiresAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "result",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderer",
      "outputs": [
        {
          "internalType": "contract Renderer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestOwnershipHandover",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "seeds",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "seed",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "statsOf",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "props",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "sponsoredProps",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "votes",
          "type": "uint24"
        },
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1d2cc940d1970603dcc729e372e13889181d9dfdee16b45685f251662195153",
  "receipt": {
    "to": null,
    "from": "0x0cfecb5D359E6C59ABd1d2Aa794F52C15055f451",
    "contractAddress": "0x247eE1968AF7375E55FAb1a7E5F597a55850079d",
    "transactionIndex": 0,
    "gasUsed": "4851740",
    "logsBloom": "0x000000000000000a0100000000000000000000000000000000800000000000040000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800001000000000000000100000000000000000000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000040000000000000200000000000000020000000000000000001000000000000000000000000404000000000000000000001000000000000000000000000000000100000000020400000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x3a4885e51410338fb7eda207e1b2915f732f6397a3d45d508503bfba40f54830",
    "transactionHash": "0xa1d2cc940d1970603dcc729e372e13889181d9dfdee16b45685f251662195153",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 44260640,
        "transactionHash": "0xa1d2cc940d1970603dcc729e372e13889181d9dfdee16b45685f251662195153",
        "address": "0x247eE1968AF7375E55FAb1a7E5F597a55850079d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000cfecb5d359e6c59abd1d2aa794f52c15055f451"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3a4885e51410338fb7eda207e1b2915f732f6397a3d45d508503bfba40f54830"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 44260640,
        "transactionHash": "0xa1d2cc940d1970603dcc729e372e13889181d9dfdee16b45685f251662195153",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000cfecb5d359e6c59abd1d2aa794f52c15055f451",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000089e50df59a465c00000000000000000000000000000000000000000000000007db3a6b7f8fd29800000000000000000000000000000000000000000000231013dce1a9288176e80000000000000000000000000000000000000000000000000751555d89f58c3c0000000000000000000000000000000000000000000023101466c6b71e1bbd44",
        "logIndex": 1,
        "blockHash": "0x3a4885e51410338fb7eda207e1b2915f732f6397a3d45d508503bfba40f54830"
      }
    ],
    "blockNumber": 44260640,
    "cumulativeGasUsed": "4851740",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0cfecb5D359E6C59ABd1d2Aa794F52C15055f451",
    1000000000000000
  ],
  "numDeployments": 5,
  "solcInputHash": "dad0dc32f4b3643a2fb379a5cb3af771",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccountBalanceOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHandoverRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipHandoverRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"completeOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"props\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sponsoredProps\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"votes\",\"type\":\"uint24\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"internalType\":\"struct NounsWrapped.WrappedStats\",\"name\":\"stats\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"result\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"ownershipHandoverExpiresAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderer\",\"outputs\":[{\"internalType\":\"contract Renderer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestOwnershipHandover\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"seeds\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"seed\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"statsOf\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"props\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"sponsoredProps\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"votes\",\"type\":\"uint24\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIdOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccountBalanceOverflow()\":[{\"details\":\"The recipient's balance has overflowed.\"}],\"AlreadyInitialized()\":[{\"details\":\"Cannot double-initialize.\"}],\"BalanceQueryForZeroAddress()\":[{\"details\":\"Cannot query the balance for the zero address.\"}],\"NewOwnerIsZeroAddress()\":[{\"details\":\"The `newOwner` cannot be the zero address.\"}],\"NoHandoverRequest()\":[{\"details\":\"The `pendingOwner` does not have a valid handover request.\"}],\"NotOwnerNorApproved()\":[{\"details\":\"Only the token owner or an approved account can manage the token.\"}],\"TokenAlreadyExists()\":[{\"details\":\"The token already exists.\"}],\"TokenDoesNotExist()\":[{\"details\":\"The token does not exist.\"}],\"TransferFromIncorrectOwner()\":[{\"details\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"details\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"details\":\"Cannot mint or transfer to the zero address.\"}],\"Unauthorized()\":[{\"details\":\"The caller is not authorized to call the function.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `account` to manage the `id` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables `operator` to manage all of their tokens.\"},\"OwnershipHandoverCanceled(address)\":{\"details\":\"The ownership handover to `pendingOwner` has been canceled.\"},\"OwnershipHandoverRequested(address)\":{\"details\":\"An ownership handover to `pendingOwner` has been requested.\"},\"OwnershipTransferred(address,address)\":{\"details\":\"The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when token `id` is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address.\"},\"cancelOwnershipHandover()\":{\"details\":\"Cancels the two-step ownership handover to the caller, if any.\"},\"completeOwnershipHandover(address)\":{\"details\":\"Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`.\"},\"constructor\":{\"params\":{\"_mintFee\":\"Fee in wei per mint\"}},\"contractURI()\":{\"returns\":{\"_0\":\"Base64 encoded metadata data URI\"}},\"eip712Domain()\":{\"details\":\"See: https://eips.ethereum.org/EIPS/eip-5267\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved to manage token `id`. Requirements: - Token `id` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is approved to manage the tokens of `owner`.\"},\"owner()\":{\"details\":\"Returns the owner of the contract.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of token `id`. Requirements: - Token `id` must exist.\"},\"ownershipHandoverExpiresAt(address)\":{\"details\":\"Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\"},\"renounceOwnership()\":{\"details\":\"Allows the owner to renounce their ownership.\"},\"requestOwnershipHandover()\":{\"details\":\"Request a two-step ownership handover to the caller. The request will automatically expire in 48 hours (172800 seconds) by default.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"Token/Nouns ID\"},\"returns\":{\"_0\":\"Base64 encoded metadata data URI\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Allows the owner to transfer the ownership to `newOwner`.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidPayment()\":[{\"notice\":\"Caller provided incorrect payable amount\"}]},\"kind\":\"user\",\"methods\":{\"contractURI()\":{\"notice\":\"Read contract metadata\"},\"mint(address,(uint16,uint16,uint24,string))\":{\"notice\":\"Mint a Nouns Wrapped token.         Caller must send mintFee wei as msg.value.         Caller must provide an EIP-712 `Mint` signature.\"},\"mintFee()\":{\"notice\":\"Fee in wei per mint\"},\"name()\":{\"notice\":\"Read token name\"},\"seeds(uint256)\":{\"notice\":\"Random seed by tokenId\"},\"statsOf(uint256)\":{\"notice\":\"Read stats by tokenId\"},\"symbol()\":{\"notice\":\"Read token symbol\"},\"tokenIdCounter()\":{\"notice\":\"Last minted token ID\"},\"tokenIdOf(address)\":{\"notice\":\"tokenId by owner\"},\"tokenURI(uint256)\":{\"notice\":\"Read token metadata\"},\"withdrawBalance(address)\":{\"notice\":\"Withdraw contract balance. Only callable by owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NounsWrapped.sol\":\"NounsWrapped\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/LibDataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport {Base64} from \\\"solady/src/utils/Base64.sol\\\";\\r\\n\\r\\nlibrary LibDataURI {\\r\\n    function toDataURI(\\r\\n        string memory data,\\r\\n        string memory mimeType\\r\\n    ) internal pure returns (string memory) {\\r\\n        return string.concat(\\r\\n            \\\"data:\\\", mimeType, \\\";base64,\\\", Base64.encode(abi.encodePacked(data))\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd4ce36e8355dbca03e716b41509c6762955d5dc682ca8a4e0ef0fce20b89efb2\",\"license\":\"MIT\"},\"contracts/NounsWrapped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport {EIP712} from \\\"solady/src/utils/EIP712.sol\\\";\\r\\nimport {ERC721} from \\\"solady/src/tokens/ERC721.sol\\\";\\r\\nimport {Ownable} from \\\"solady/src/auth/Ownable.sol\\\";\\r\\nimport {SafeTransferLib} from \\\"solady/src/utils/SafeTransferLib.sol\\\";\\r\\nimport {SignatureCheckerLib} from \\\"solady/src/utils/SignatureCheckerLib.sol\\\";\\r\\n\\r\\nimport {Renderer} from \\\"./Renderer.sol\\\";\\r\\nimport {LibDataURI} from \\\"./LibDataURI.sol\\\";\\r\\n\\r\\ncontract NounsWrapped is Ownable, ERC721, EIP712 {\\r\\n    using LibDataURI for string;\\r\\n\\r\\n    Renderer public renderer = new Renderer();\\r\\n\\r\\n    /// @notice Caller provided incorrect payable amount\\r\\n    error InvalidPayment();\\r\\n\\r\\n    // /// @notice Caller provided invalid `Mint` signature\\r\\n    // error InvalidSignature();\\r\\n\\r\\n    // /// @notice emitted when owner changes the signer address\\r\\n    // event SetSigner(address oldSigner, address newSigner);\\r\\n\\r\\n    // /// @notice EIP-712 typehash for `Mint` message\\r\\n    // bytes32 internal constant MINT_TYPEHASH = keccak256(\\r\\n    //     \\\"Mint(address to,uint256 tokenId,uint24 mins,uint16 streak,string username)\\\"\\r\\n    // );\\r\\n\\r\\n    /// @notice Fee in wei per mint\\r\\n    uint256 public immutable mintFee;\\r\\n\\r\\n    /// @notice Last minted token ID\\r\\n    uint256 public tokenIdCounter;\\r\\n\\r\\n    // /// @notice Address authorized to sign `Mint` messages\\r\\n    // address public signer;\\r\\n\\r\\n    /// @notice Stats for a given tokenId\\r\\n    /// @param props Number of props created\\r\\n    /// @param sponsoredProps Number of props sponsored\\r\\n    /// @param votes Number of votes cast\\r\\n    /// @param username Username of caster\\r\\n    struct WrappedStats {\\r\\n        uint16 props;\\r\\n        uint16 sponsoredProps;\\r\\n        uint24 votes; \\r\\n        string username;\\r\\n    }\\r\\n\\r\\n    /// @notice Read stats by tokenId\\r\\n    mapping(uint256 tokenId => WrappedStats) public statsOf;\\r\\n\\r\\n    /// @notice Random seed by tokenId\\r\\n    mapping(uint256 tokenId => uint32 seed) public seeds;\\r\\n\\r\\n    /// @notice tokenId by owner\\r\\n    mapping(address => uint256) public tokenIdOf;\\r\\n\\r\\n\\r\\n\\r\\n    /// @notice Set owner, signer, and mint fee\\r\\n    /// @param _owner Contract owner address\\r\\n    // /// @param _signer Mint signer address\\r\\n    /// @param _mintFee Fee in wei per mint\\r\\n    constructor(\\r\\n        address _owner, \\r\\n        // address _signer, \\r\\n        uint256 _mintFee\\r\\n    ) {\\r\\n        mintFee = _mintFee;\\r\\n        tokenIdCounter = 0;\\r\\n        _initializeOwner(_owner);\\r\\n        // emit SetSigner(address(0), signer = _signer);\\r\\n    }\\r\\n\\r\\n    /// @notice Read token name\\r\\n    function name() public pure override returns (string memory) {\\r\\n        return \\\"Nouns Wrapped 2023\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Read token symbol\\r\\n    function symbol() public pure override returns (string memory) {\\r\\n        return unicode\\\"NW \\ud83c\\udf812023\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Read contract metadata\\r\\n    /// @return Base64 encoded metadata data URI\\r\\n    function contractURI() public view returns (string memory) {\\r\\n        return renderer.contractJSON().toDataURI(\\\"application/json\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Read token metadata\\r\\n    /// @param tokenId Token/Nouns ID\\r\\n    /// @return Base64 encoded metadata data URI\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        WrappedStats memory stats = statsOf[tokenId];\\r\\n        return renderer.tokenJSON(\\r\\n            seeds[tokenId], tokenId, stats.props, stats.sponsoredProps, stats.votes, stats.username\\r\\n        ).toDataURI(\\\"application/json\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Mint a Nouns Wrapped token.\\r\\n    ///         Caller must send mintFee wei as msg.value.\\r\\n    ///         Caller must provide an EIP-712 `Mint` signature.\\r\\n    function mint(\\r\\n        address to, \\r\\n        // bytes calldata sig\\r\\n        WrappedStats calldata stats\\r\\n    ) external payable {\\r\\n        if (msg.value != mintFee) revert InvalidPayment();\\r\\n        // Revert if user already has a token\\r\\n        require(tokenIdOf[to] == 0, \\\"NounsWrapped: user already has a token\\\");\\r\\n        // if (!_verifySignature(to, uid, stats, sig)) {\\r\\n        //     revert InvalidSignature();\\r\\n        // }\\r\\n        tokenIdCounter++;\\r\\n        uint256 _tokenId = tokenIdCounter;\\r\\n        statsOf[_tokenId] = stats;\\r\\n        seeds[_tokenId] = _seed(_tokenId); \\r\\n        _mint(to, _tokenId); \\r\\n        tokenIdOf[to] = _tokenId;\\r\\n    }\\r\\n\\r\\n    // /// @notice Set signer address. Only callable by owner.\\r\\n    // /// @param _signer New signer address\\r\\n    // function setSigner(address _signer) external onlyOwner {\\r\\n    //     emit SetSigner(signer, signer = _signer);\\r\\n    // }\\r\\n\\r\\n    /// @notice Withdraw contract balance. Only callable by owner.\\r\\n    function withdrawBalance(address to) external onlyOwner {\\r\\n        SafeTransferLib.safeTransferAllETH(to);\\r\\n    }\\r\\n\\r\\n    /// @dev Generate token PRNG seed.\\r\\n    function _seed(uint256 tokenId) internal view returns (uint32) {\\r\\n        return uint32(\\r\\n            uint256(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        block.timestamp, blockhash(block.number - 1), tokenId\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev EIP-712 domain name and contract version.\\r\\n    function _domainNameAndVersion()\\r\\n        internal\\r\\n        pure\\r\\n        override\\r\\n        returns (string memory, string memory)\\r\\n    {\\r\\n        return (\\\"Nouns Wrapped 2023\\\", \\\"1\\\");\\r\\n    }\\r\\n\\r\\n    // Burn\\r\\n    function burn(uint256 tokenId) external {\\r\\n        // Revert if user is not owner of contract or the token\\r\\n        require(msg.sender == owner() || tokenIdOf[msg.sender] == tokenId, \\\"NounsWrapped: user is not owner of contract or the token\\\");\\r\\n        _burn(tokenId);\\r\\n        delete statsOf[tokenId];\\r\\n        delete seeds[tokenId];\\r\\n        delete tokenIdOf[msg.sender];\\r\\n    }\\r\\n\\r\\n    // /// @dev Verify EIP-712 `Mint` signature.\\r\\n    // function _verifySignature(\\r\\n    //     address to,\\r\\n    //     uint256 tokenId,\\r\\n    //     WrappedStats calldata stats,\\r\\n    //     bytes calldata sig\\r\\n    // ) internal view returns (bool) {\\r\\n    //     bytes32 digest = _hashTypedData(\\r\\n    //         keccak256(\\r\\n    //             abi.encode(\\r\\n    //                 MINT_TYPEHASH,\\r\\n    //                 to,\\r\\n    //                 tokenId,\\r\\n    //                 stats.mins,\\r\\n    //                 stats.streak,\\r\\n    //                 keccak256(bytes(stats.username))\\r\\n    //             )\\r\\n    //         )\\r\\n    //     );\\r\\n    //     return\\r\\n    //         SignatureCheckerLib.isValidSignatureNowCalldata(signer, digest, sig);\\r\\n    // }\\r\\n}\\r\\n\",\"keccak256\":\"0xe446610dfa6b58b22a8bb4d397b8e77214085d62c72176ad23ada0dddddeba0b\",\"license\":\"MIT\"},\"contracts/Renderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.21;\\r\\n\\r\\nimport {LibString} from \\\"solady/src/utils/LibString.sol\\\";\\r\\nimport {ScriptyHTML} from \\\"scripty.sol/contracts/scripty/htmlBuilders/ScriptyHTML.sol\\\";\\r\\nimport {\\r\\n    HTMLRequest,\\r\\n    HTMLTagType,\\r\\n    HTMLTag\\r\\n} from \\\"scripty.sol/contracts/scripty/interfaces/IScriptyHTML.sol\\\";\\r\\nimport {DynamicBuffer} from \\\"scripty.sol/contracts/scripty/utils/DynamicBuffer.sol\\\";\\r\\n\\r\\nimport {LibDataURI} from \\\"./LibDataURI.sol\\\";\\r\\n\\r\\ncontract Renderer is ScriptyHTML {\\r\\n    using LibString for uint256;\\r\\n    \\r\\n\\r\\n    function htmlRequest(\\r\\n        uint32 seed,\\r\\n        uint16 props,\\r\\n        uint16 sponsoredProps,\\r\\n        uint24 votes,\\r\\n        string memory username\\r\\n    ) public pure returns (HTMLTag[] memory, HTMLTag[] memory) {\\r\\n        HTMLTag[] memory headTags = new HTMLTag[](5);\\r\\n\\r\\n        headTags[0].tagContent =\\r\\n            \\\"<link href=\\\\\\\"https://fonts.googleapis.com\\\\\\\" rel=\\\\\\\"preconnect\\\\\\\"/><link href=\\\\\\\"https://fonts.gstatic.com\\\\\\\" rel=\\\\\\\"preconnect\\\\\\\" crossorigin=\\\\\\\"true\\\\\\\"/><link href=\\\\\\\"https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700;800;900\\\\\\\" rel=\\\\\\\"stylesheet\\\\\\\"/><link href=\\\\\\\"https://fonts.googleapis.com/css?family=Montserrat:400,800\\\\\\\" rel=\\\\\\\"stylesheet\\\\\\\"/>\\\";\\r\\n\\r\\n        headTags[1].tagContent =\\r\\n            \\\"<style>body{font-family:Poppins,sans-serif;margin:0;padding:0;display:flex;justify-content:center;align-items:center}#c{position:relative}#w{position:absolute;display:flex;flex-direction:column;height:100%;color:#fff;font-weight:400}.t{font-size:min(4vw,4vh)}.l{font-size:min(4vw,4vh)}.s,.u{font-size:min(12vw,12vh);font-weight:800;font-family:Montserrat,sans-serif}.u{font-size:min(8vw,8vh);overflow:hidden;font-family:Montserrat,sans-serif}.g{flex-grow:1}#a{margin-top:1.5rem;margin-left:1.5rem}#z{margin-bottom:1.5rem;margin-left:1.5rem}#m{margin-bottom:calc(1rem - 8px)}.p{width:100vw;height:100vh;background-color:\\\";\\r\\n        headTags[2].tagContent = _color(seed);\\r\\n        headTags[3].tagContent = \\\"}</style>\\\";\\r\\n\\r\\n        headTags[4].tagContent =\\r\\n            \\\"<style scoped=\\\\\\\"true\\\\\\\">@media screen and (min-height:720px){#a{margin-top:2.5rem;margin-left:2.5rem}#z{margin-bottom:2.5rem;margin-left:2.5rem}}@media screen and (max-height:450px){#a{margin-top:1rem;margin-left:1rem}#z{margin-bottom:1rem;margin-left:1rem}}@media screen and (max-height:300px){#a{margin-top:.5rem;margin-left:.5rem}#z{margin-bottom:.5rem;margin-left:.5rem}#m{margin-bottom:0}}</style>\\\";\\r\\n\\r\\n        HTMLTag[] memory bodyTags = new HTMLTag[](14);\\r\\n        bodyTags[0].tagContent = \\\"<main id=\\\\\\\"c\\\\\\\" class=\\\\\\\"p\\\\\\\" data-color=\\\\\\\"\\\";\\r\\n        bodyTags[1].tagContent = _color(seed);\\r\\n        bodyTags[2].tagContent = \\\"\\\\\\\" data-seed=\\\\\\\"\\\";\\r\\n        bodyTags[3].tagContent = bytes(uint256(seed).toString());\\r\\n        bodyTags[4].tagContent =\\r\\n            \\\"\\\\\\\"><div id=\\\\\\\"w\\\\\\\"><div id=\\\\\\\"a\\\\\\\"><div class=\\\\\\\"t\\\\\\\">Nouns Wrapped 2023</div><div class=\\\\\\\"u\\\\\\\">\\\";\\r\\n        bodyTags[5].tagContent = bytes(username);\\r\\n        bodyTags[6].tagContent =\\r\\n            \\\"</div></div><div class=\\\\\\\"g\\\\\\\"></div><div id=\\\\\\\"z\\\\\\\"><div class=\\\\\\\"l\\\\\\\">Votes Cast</div><div class=\\\\\\\"s\\\\\\\" id=\\\\\\\"m\\\\\\\">\\\";\\r\\n        bodyTags[7].tagContent = bytes(uint256(votes).toString());\\r\\n        bodyTags[8].tagContent =\\r\\n            \\\"</div><div class=\\\\\\\"l\\\\\\\">Created</div><div class=\\\\\\\"s\\\\\\\">\\\";\\r\\n        bodyTags[9].tagContent = bytes(uint256(props).toString());\\r\\n        bodyTags[10].tagContent = \\\" props</div><div class=\\\\\\\"l\\\\\\\">Sponsored</div><div class=\\\\\\\"s\\\\\\\">\\\";\\r\\n        bodyTags[11].tagContent = bytes(uint256(sponsoredProps).toString()); \\r\\n        bodyTags[12].tagContent = \\\" props</div></div></div></main>\\\"; \\r\\n\\r\\n        bodyTags[13].tagContent =\\r\\n            \\\"<script>document.addEventListener(\\\\\\\"DOMContentLoaded\\\\\\\",(function(){function e(){return window.innerHeight>=window.innerWidth?window.innerWidth:window.innerHeight}const t=document.querySelector(\\\\\\\"main\\\\\\\"),n=function(e){const t=2147483647;let n=e%t;return()=>(n=16807*n%t,n/t)}(parseInt(t.dataset.seed,10));let o=function(e,t){return Math.floor(t()*e)}(4,n),y=e(),l=e(),x=l/720,r=4==o?20:3==o?40:2==o?60:1==o?80:120,i=[],a=200,s=100;var c=t.dataset.color;const u=document.createElement(\\\\\\\"canvas\\\\\\\"),h=document.getElementById(\\\\\\\"c\\\\\\\");h.classList.remove(\\\\\\\"p\\\\\\\"),h.appendChild(u);const f=u.getContext(\\\\\\\"2d\\\\\\\");function d(e,t,n){return(1-n)*e+n*t}function w(e,t,n,o,y,l,x){return{x:d(d(e,t,x),d(t,n,x),x),y:d(d(o,y,x),d(y,l,x),x)}}function p(e,t,n,o,y){let l=3*(t-e),x=3*(n-t)-l,r=3*(t-e),i=3*(n-t)-r,a=o-e-r-i;return{x:(o-e-l-x)*Math.pow(y,3)+x*Math.pow(y,2)+l*y+e,y:a*Math.pow(y,3)+i*Math.pow(y,2)+r*y+e}}cols=y/(r*x),rows=l/(r*x);var m=n(),v=n(),M=n(),g=n(),E=n(),L=n(),C=n(),S=n(),q=n(),H=n(),I=n(),R=n();let W={x:360*m*x,y:360*v*x},z={x:1e3*M*x,y:1e3*g*x},A={x:500*E*x,y:1e3*L*x+500*x},B={x:1150*C*x-150*x,y:1e3*S*x},D={x:1e3*q*x,y:1e3*H*x},F={x:1150*I*x-150*x,y:1e3*R*x+500*x};for(let e=0;e<=s/3;e++){let t=w(W.x,z.x,A.x,W.y,z.y,A.y,e/(s/3));i.push(t)}for(let e=0;e<=s/3;e++){let t=e/(s/3),n=p(A.x,B.x,D.x,F.x,t),o=p(A.y,B.y,D.y,F.y,t);i.push({x:n,y:o})}for(let e=0;e<=s/3;e++){let t=e/(s/3),n=d(F.x,W.x,t),o=d(F.y,W.y,t);i.push({x:n,y:o})}for(let e=0;e<=s/2;e++){let t=e/(s/2),n=p(A.x,B.x,D.x,F.x,t),o=p(A.y,B.y,D.y,F.y,t);i.push({x:n,y:o})}let O=0;window.addEventListener(\\\\\\\"resize\\\\\\\",(function(){y=e(),l=e(),x=l/720,r=o==4*x?20*x:3==o?40*x:2==o?60*x:1==o?80*x:120*x,f.canvas.width=y,f.canvas.height=l;let t={x:360*m*x,y:360*v*x},n={x:1e3*M*x,y:1e3*g*x},a={x:500*E*x,y:1e3*L*x+500*x},c={x:1150*C*x-150*x,y:1e3*S*x},u={x:1e3*q*x,y:1e3*H*x},h={x:1150*I*x-150*x,y:1e3*R*x+500*x};i=[];for(let e=0;e<=s/3;e++){let o=w(t.x,n.x,a.x,t.y,n.y,a.y,e/(s/3));i.push(o)}for(let e=0;e<=s/3;e++){let t=e/(s/3),n=p(a.x,c.x,u.x,h.x,t),o=p(a.y,c.y,u.y,h.y,t);i.push({x:n,y:o})}for(let e=0;e<=s/3;e++){let n=e/(s/3),o=d(h.x,t.x,n),y=d(h.y,t.y,n);i.push({x:o,y:y})}for(let e=0;e<=s/2;e++){let t=e/(s/2),n=p(a.x,c.x,u.x,h.x,t),o=p(a.y,c.y,u.y,h.y,t);i.push({x:n,y:o})}})),function t(){O++,function(){f.canvas.width=e(),f.canvas.height=e(),f.fillStyle=c,f.fillRect(0,0,y,l);for(let e=0;e<a;e++){let t=(O-1+e*s/a+i.length)%i.length,n=i[Math.floor(t)],o=Math.floor(n.x/r)*r,y=Math.floor(n.y/r)*r,l=2*e%360;f.fillStyle=`hsl(${l}, 100%, 50%)`,f.fillRect(o,y-10,r,r)}}(),setTimeout((()=>requestAnimationFrame(t)),25)}()}));</script>\\\";\\r\\n\\r\\n        return (headTags, bodyTags);\\r\\n    }\\r\\n\\r\\n    /// @notice Read encoded token HTML\\r\\n    function htmlURI(\\r\\n        uint32 seed,\\r\\n       uint16 props,\\r\\n        uint16 sponsoredProps,\\r\\n        uint24 votes,\\r\\n        string memory username\\r\\n    ) public view returns (bytes memory) {\\r\\n        (HTMLTag[] memory headTags, HTMLTag[] memory bodyTags) =\\r\\n            htmlRequest(seed, props, sponsoredProps, votes, username);\\r\\n        return getEncodedHTML(\\r\\n            HTMLRequest({headTags: headTags, bodyTags: bodyTags})\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function svgURI(\\r\\n        uint32 seed,\\r\\n        uint16 props,\\r\\n        uint16 sponsoredProps,\\r\\n        uint24 votes,\\r\\n        string memory username\\r\\n    ) public view returns (bytes memory) {\\r\\n        (HTMLTag[] memory headTags, HTMLTag[] memory bodyTags) =\\r\\n            htmlRequest(seed, props, sponsoredProps, votes, username);\\r\\n        headTags[1].tagContent =\\r\\n            \\\"<style>body{font-family:Poppins,sans-serif;margin:0;padding:0;display:flex;justify-content:center;align-items:center}#c{position:relative}#w{position:absolute;display:flex;flex-direction:column;height:100%;color:#fff;font-weight:400}.t{font-size:28px}.l{font-size:24px;margin-top:10px}.s,.u{font-size:80px;font-weight:800;font-family:Montserrat,sans-serif}.u{font-size:56px;overflow:hidden;font-family:Montserrat,sans-serif}.g{flex-grow:1}#a{margin-top:1.5rem;margin-left:1.5rem}#z{margin-bottom:1.5rem;margin-left:1.5rem}#m{margin-bottom:calc(1rem - 8px)}.p{width: 700px; height: 700px; background-color:\\\";\\r\\n        headTags[2].tagContent = _color(seed);\\r\\n        headTags[3].tagContent = \\\"}</style>\\\";\\r\\n        headTags[4].tagContent = \\\"<style></style>\\\";\\r\\n        assembly {\\r\\n            mstore(bodyTags, 13)\\r\\n        }\\r\\n        HTMLRequest memory html =\\r\\n            HTMLRequest({headTags: headTags, bodyTags: bodyTags});\\r\\n        bytes memory htmlFile = getHTML(html);\\r\\n        bytes memory open =\\r\\n            \\\"<svg xmlns=\\\\\\\"http://www.w3.org/2000/svg\\\\\\\" viewBox=\\\\\\\"0 0 700 700\\\\\\\"><foreignObject width=\\\\\\\"100%\\\\\\\" height=\\\\\\\"100%\\\\\\\"><body xmlns=\\\\\\\"http://www.w3.org/1999/xhtml\\\\\\\">\\\";\\r\\n        bytes memory close = \\\"</body></foreignObject></svg>\\\";\\r\\n\\r\\n        bytes memory svg =\\r\\n            DynamicBuffer.allocate(open.length + htmlFile.length + close.length);\\r\\n        DynamicBuffer.appendSafe(svg, open);\\r\\n        DynamicBuffer.appendSafe(svg, htmlFile);\\r\\n        DynamicBuffer.appendSafe(svg, close);\\r\\n\\r\\n        bytes memory base64URIprefix = \\\"data:image/svg+xml;base64,\\\";\\r\\n\\r\\n        uint256 sizeForEncoding = sizeForBase64Encoding(svg.length);\\r\\n        sizeForEncoding += base64URIprefix.length;\\r\\n\\r\\n        bytes memory encoded = DynamicBuffer.allocate(sizeForEncoding);\\r\\n        DynamicBuffer.appendSafe(encoded, base64URIprefix);\\r\\n        DynamicBuffer.appendSafeBase64(encoded, svg, false, false);\\r\\n\\r\\n        return encoded;\\r\\n    }\\r\\n\\r\\n    /// @notice Read token metadata JSON\\r\\n    function tokenJSON(\\r\\n        uint32 seed,\\r\\n        uint256 uid,\\r\\n        uint16 props,\\r\\n        uint16 sponsoredProps,\\r\\n        uint24 votes,\\r\\n        string memory username\\r\\n    ) public view returns (string memory) {\\r\\n        return string(\\r\\n            abi.encodePacked(\\r\\n                \\\"{\\\\\\\"animation_url\\\\\\\":\\\\\\\"\\\",\\r\\n                htmlURI(seed, props, sponsoredProps, votes, username),\\r\\n                \\\"\\\\\\\",\\\\\\\"image\\\\\\\":\\\\\\\"\\\",\\r\\n                svgURI(seed,props, sponsoredProps, votes, username),\\r\\n                \\\"\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"ID #\\\",\\r\\n                uid.toString(),\\r\\n                \\\"\\\\\\\",\\\\\\\"attributes\\\\\\\":[{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Props Created\\\\\\\",\\\\\\\"value\\\\\\\":\\\",\\r\\n                uint256(props).toString(),\\r\\n                \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Props Sponsored\\\\\\\",\\\\\\\"value\\\\\\\":\\\",\\r\\n                uint256(sponsoredProps).toString(),\\r\\n                \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Username\\\\\\\",\\\\\\\"value\\\\\\\":\\\",\\r\\n                username,\\r\\n                \\\"},{\\\\\\\"trait_type\\\\\\\":\\\\\\\"Votes Cast\\\\\\\",\\\\\\\"value\\\\\\\":\\\\\\\"\\\",\\r\\n                uint256(votes).toString(),\\r\\n                \\\"\\\\\\\"}]}\\\"\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Read contract metadata JSON\\r\\n    function contractJSON() public pure returns (string memory) {\\r\\n        return\\r\\n        \\\"{\\\\\\\"name\\\\\\\":\\\\\\\"Nouns Wrapped 2023\\\\\\\",\\\\\\\"image\\\\\\\":\\\\\\\"ipfs://bafybeifd3tynb3ue4wtfwiq76vuxt3u5x2mzrytsco5iyzcvfx54cl4kwa\\\\\\\",\\\\\\\"description\\\\\\\":\\\\\\\"A commemorative NFT for all the people involved in proliferating the Nouns DAO in 2023\\\\\\\"}\\\";\\r\\n    }\\r\\n\\r\\n    function _color(uint32 seed) internal pure returns (bytes memory) {\\r\\n        string[] memory colors = new string[](6);\\r\\n        colors[0] = \\\"#D53C5E\\\";\\r\\n        colors[1] = \\\"#5987FF\\\";\\r\\n        colors[2] = \\\"#DC5E7A\\\";\\r\\n        colors[3] = \\\"#1426E1\\\";\\r\\n        colors[4] = \\\"#1B38F5\\\";\\r\\n        colors[5] = \\\"#E37F95\\\";\\r\\n        return bytes(colors[seed % 6]);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x830eba18b84369dc907c29615d225dda0aff400b5160782a1004ad0419fc8de7\",\"license\":\"MIT\"},\"scripty.sol/contracts/scripty/core/ScriptyCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///////////////////////////////////////////////////////////\\n// \\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557 //\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u255a\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2554\\u255d //\\n// \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u255a\\u2550\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591 //\\n// \\u2591\\u255a\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591 //\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591 //\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591 //\\n///////////////////////////////////////////////////////////\\n//\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    CORE    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591//\\n///////////////////////////////////////////////////////////\\n\\nimport {HTMLRequest, HTMLTagType, HTMLTag} from \\\"./ScriptyStructs.sol\\\";\\nimport {DynamicBuffer} from \\\"./../utils/DynamicBuffer.sol\\\";\\nimport {IScriptyStorage} from \\\"./../interfaces/IScriptyStorage.sol\\\";\\nimport {IContractScript} from \\\"./../interfaces/IContractScript.sol\\\";\\n\\ncontract ScriptyCore {\\n    using DynamicBuffer for bytes;\\n\\n    // =============================================================\\n    //                        TAG CONSTANTS\\n    // =============================================================\\n\\n    // data:text/html;base64,\\n    // raw\\n    // 22 bytes\\n    bytes public constant DATA_HTML_BASE64_URI_RAW = \\\"data:text/html;base64,\\\";\\n    // url encoded\\n    // 21 bytes\\n    bytes public constant DATA_HTML_URL_SAFE = \\\"data%3Atext%2Fhtml%2C\\\";\\n\\n    // <html>,\\n    // raw\\n    // 6 bytes\\n    bytes public constant HTML_OPEN_RAW = \\\"<html>\\\";\\n    // url encoded\\n    // 10 bytes\\n    bytes public constant HTML_OPEN_URL_SAFE = \\\"%3Chtml%3E\\\";\\n\\n    // <head>,\\n    // raw\\n    // 6 bytes\\n    bytes public constant HEAD_OPEN_RAW = \\\"<head>\\\";\\n    // url encoded\\n    // 10 bytes\\n    bytes public constant HEAD_OPEN_URL_SAFE = \\\"%3Chead%3E\\\";\\n\\n    // </head>,\\n    // raw\\n    // 7 bytes\\n    bytes public constant HEAD_CLOSE_RAW = \\\"</head>\\\";\\n    // url encoded\\n    // 13 bytes\\n    bytes public constant HEAD_CLOSE_URL_SAFE = \\\"%3C%2Fhead%3E\\\";\\n\\n    // <body>\\n    // 6 bytes\\n    bytes public constant BODY_OPEN_RAW = \\\"<body>\\\";\\n    // url encoded\\n    // 10 bytes\\n    bytes public constant BODY_OPEN_URL_SAFE = \\\"%3Cbody%3E\\\";\\n\\n    // </body></html>\\n    // 14 bytes\\n    bytes public constant HTML_BODY_CLOSED_RAW = \\\"</body></html>\\\";\\n    // 26 bytes\\n    bytes public constant HTML_BODY_CLOSED_URL_SAFE =\\n        \\\"%3C%2Fbody%3E%3C%2Fhtml%3E\\\";\\n\\n    // [RAW]\\n    // HTML_OPEN + HEAD_OPEN + HEAD_CLOSE + BODY_OPEN + HTML_BODY_CLOSED\\n    uint256 public constant URLS_RAW_BYTES = 39;\\n\\n    // [URL_SAFE]\\n    // DATA_HTML_URL_SAFE + HTML_OPEN + HEAD_OPEN + HEAD_CLOSE + BODY_OPEN + HTML_BODY_CLOSED\\n    uint256 public constant URLS_SAFE_BYTES = 90;\\n\\n    // [RAW]\\n    // HTML_OPEN + HTML_CLOSE\\n    uint256 public constant HTML_RAW_BYTES = 13;\\n\\n    // [RAW]\\n    // HEAD_OPEN + HEAD_CLOSE\\n    uint256 public constant HEAD_RAW_BYTES = 13;\\n\\n    // [RAW]\\n    // BODY_OPEN + BODY_CLOSE\\n    uint256 public constant BODY_RAW_BYTES = 13;\\n\\n    // All raw\\n    // HTML_RAW_BYTES + HEAD_RAW_BYTES + BODY_RAW_BYTES\\n    uint256 public constant RAW_BYTES = 39;\\n\\n    // [URL_SAFE]\\n    // HTML_OPEN + HTML_CLOSE\\n    uint256 public constant HTML_URL_SAFE_BYTES = 23;\\n\\n    // [URL_SAFE]\\n    // HEAD_OPEN + HEAD_CLOSE\\n    uint256 public constant HEAD_URL_SAFE_BYTES = 23;\\n\\n    // [URL_SAFE]\\n    // BODY_OPEN + BODY_CLOSE\\n    uint256 public constant BODY_SAFE_BYTES = 23;\\n\\n    // All url safe\\n    // HTML_URL_SAFE_BYTES + HEAD_URL_SAFE_BYTES + BODY_URL_SAFE_BYTES\\n    // %3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\\n    uint256 public constant URL_SAFE_BYTES = 69;\\n\\n    // data:text/html;base64,\\n    uint256 public constant HTML_BASE64_DATA_URI_BYTES = 22;\\n\\n    // =============================================================\\n    //                    TAG OPEN CLOSE TEMPLATES\\n    // =============================================================\\n\\n    /**\\n     * @notice Grab tag open and close depending on tag type\\n     * @dev\\n     *      tagType: 0/HTMLTagType.useTagOpenAndClose or any other:\\n     *          [tagOpen][CONTENT][tagClose]\\n     *\\n     *      tagType: 1/HTMLTagType.script:\\n     *          <script>[SCRIPT]</script>\\n     *\\n     *      tagType: 2/HTMLTagType.scriptBase64DataURI:\\n     *          <script src=\\\"data:text/javascript;base64,[SCRIPT]\\\"></script>\\n     *\\n     *      tagType: 3/HTMLTagType.scriptGZIPBase64DataURI:\\n     *          <script type=\\\"text/javascript+gzip\\\" src=\\\"data:text/javascript;base64,[SCRIPT]\\\"></script>\\n     *\\n     *      tagType: 4/HTMLTagType.scriptPNGBase64DataURI\\n     *          <script type=\\\"text/javascript+png\\\" name=\\\"[NAME]\\\" src=\\\"data:text/javascript;base64,[SCRIPT]\\\"></script>\\n     *\\n     *      [IMPORTANT NOTE]: The tags `text/javascript+gzip` and `text/javascript+png` are used to identify scripts\\n     *      during decompression\\n     *\\n     * @param htmlTag - HTMLTag data for code\\n     * @return (tagOpen, tagClose) - Tag open and close as a tuple\\n     */\\n    function tagOpenCloseForHTMLTag(\\n        HTMLTag memory htmlTag\\n    ) public pure returns (bytes memory, bytes memory) {\\n        if (htmlTag.tagType == HTMLTagType.script) {\\n            return (\\\"<script>\\\", \\\"</script>\\\");\\n        } else if (htmlTag.tagType == HTMLTagType.scriptBase64DataURI) {\\n            return ('<script src=\\\"data:text/javascript;base64,', '\\\"></script>');\\n        } else if (htmlTag.tagType == HTMLTagType.scriptGZIPBase64DataURI) {\\n            return (\\n                '<script type=\\\"text/javascript+gzip\\\" src=\\\"data:text/javascript;base64,',\\n                '\\\"></script>'\\n            );\\n        } else if (htmlTag.tagType == HTMLTagType.scriptPNGBase64DataURI) {\\n            return (\\n                '<script type=\\\"text/javascript+png\\\" src=\\\"data:text/javascript;base64,',\\n                '\\\"></script>'\\n            );\\n        }\\n        return (htmlTag.tagOpen, htmlTag.tagClose);\\n    }\\n\\n    /**\\n     * @notice Grab URL safe tag open and close depending on tag type\\n     * @dev\\n     *      tagType: 0/HTMLTagType.useTagOpenAndClose or any other:\\n     *          [tagOpen][scriptContent or scriptFromContract][tagClose]\\n     *\\n     *      tagType: 1/HTMLTagType.script:\\n     *      tagType: 2/HTMLTagType.scriptBase64DataURI:\\n     *          <script src=\\\"data:text/javascript;base64,[SCRIPT]\\\"></script>\\n     *\\n     *      tagType: 3/HTMLTagType.scriptGZIPBase64DataURI:\\n     *          <script type=\\\"text/javascript+gzip\\\" src=\\\"data:text/javascript;base64,[SCRIPT]\\\"></script>\\n     *\\n     *      tagType: 4/HTMLTagType.scriptPNGBase64DataURI\\n     *          <script type=\\\"text/javascript+png\\\" name=\\\"[NAME]\\\" src=\\\"data:text/javascript;base64,[SCRIPT]\\\"></script>\\n     *\\n     *      [IMPORTANT NOTE]: The tags `text/javascript+gzip` and `text/javascript+png` are used to identify scripts\\n     *      during decompression\\n     *\\n     * @param htmlTag - HTMLTag data for code\\n     * @return (tagOpen, tagClose) - Tag open and close as a tuple\\n     */\\n    function tagOpenCloseForHTMLTagURLSafe(\\n        HTMLTag memory htmlTag\\n    ) public pure returns (bytes memory, bytes memory) {\\n        if (\\n            htmlTag.tagType == HTMLTagType.script ||\\n            htmlTag.tagType == HTMLTagType.scriptBase64DataURI\\n        ) {\\n            // <script src=\\\"data:text/javascript;base64,\\n            // \\\"></script>\\n            return (\\n                \\\"%253Cscript%2520src%253D%2522data%253Atext%252Fjavascript%253Bbase64%252C\\\",\\n                \\\"%2522%253E%253C%252Fscript%253E\\\"\\n            );\\n        } else if (htmlTag.tagType == HTMLTagType.scriptGZIPBase64DataURI) {\\n            // <script type=\\\"text/javascript+gzip\\\" src=\\\"data:text/javascript;base64,\\n            // \\\"></script>\\n            return (\\n                \\\"%253Cscript%2520type%253D%2522text%252Fjavascript%252Bgzip%2522%2520src%253D%2522data%253Atext%252Fjavascript%253Bbase64%252C\\\",\\n                \\\"%2522%253E%253C%252Fscript%253E\\\"\\n            );\\n        } else if (htmlTag.tagType == HTMLTagType.scriptPNGBase64DataURI) {\\n            // <script type=\\\"text/javascript+png\\\" src=\\\"data:text/javascript;base64,\\n            // \\\"></script>\\n            return (\\n                \\\"%253Cscript%2520type%253D%2522text%252Fjavascript%252Bpng%2522%2520src%253D%2522data%253Atext%252Fjavascript%253Bbase64%252C\\\",\\n                \\\"%2522%253E%253C%252Fscript%253E\\\"\\n            );\\n        }\\n        return (htmlTag.tagOpen, htmlTag.tagClose);\\n    }\\n\\n    // =============================================================\\n    //                      TAG CONTENT FETCHER\\n    // =============================================================\\n\\n    /**\\n     * @notice Grabs requested tag content from storage\\n     * @dev\\n     *      If given HTMLTag contains non empty tagContent\\n     *      this method will return tagContent. Otherwise, \\n     *      method will fetch it from the given storage \\n     *      contract\\n     *\\n     * @param htmlTag - HTMLTag\\n     */\\n    function fetchTagContent(\\n        HTMLTag memory htmlTag\\n    ) public view returns (bytes memory) {\\n        if (htmlTag.tagContent.length > 0) {\\n            return htmlTag.tagContent;\\n        }\\n        return\\n            IContractScript(htmlTag.contractAddress).getScript(\\n                htmlTag.name,\\n                htmlTag.contractData\\n            );\\n    }\\n\\n    // =============================================================\\n    //                        SIZE OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @notice Calculate the buffer size post base64 encoding\\n     * @param value - Starting buffer size\\n     * @return Final buffer size as uint256\\n     */\\n    function sizeForBase64Encoding(\\n        uint256 value\\n    ) public pure returns (uint256) {\\n        unchecked {\\n            return 4 * ((value + 2) / 3);\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds the required tag open/close and calculates buffer size of tags\\n     * @dev Effectively multiple functions bundled into one as this saves gas\\n     * @param htmlTags - Array of HTMLTag\\n     * @param isURLSafe - Bool to handle tag content/open/close encoding\\n     * @return Total buffersize of updated HTMLTags\\n     */\\n    function _enrichHTMLTags(\\n        HTMLTag[] memory htmlTags,\\n        bool isURLSafe\\n    ) internal view returns (uint256) {\\n        if (htmlTags.length == 0) {\\n            return 0;\\n        }\\n\\n        bytes memory tagOpen;\\n        bytes memory tagClose;\\n        bytes memory tagContent;\\n\\n        uint256 totalSize;\\n        uint256 length = htmlTags.length;\\n        uint256 i;\\n\\n        unchecked {\\n            do {\\n                tagContent = fetchTagContent(htmlTags[i]);\\n                htmlTags[i].tagContent = tagContent;\\n\\n                if (isURLSafe && htmlTags[i].tagType == HTMLTagType.script) {\\n                    totalSize += sizeForBase64Encoding(tagContent.length);\\n                } else {\\n                    totalSize += tagContent.length;\\n                }\\n\\n                if (isURLSafe) {\\n                    (tagOpen, tagClose) = tagOpenCloseForHTMLTagURLSafe(\\n                        htmlTags[i]\\n                    );\\n                } else {\\n                    (tagOpen, tagClose) = tagOpenCloseForHTMLTag(htmlTags[i]);\\n                }\\n\\n                htmlTags[i].tagOpen = tagOpen;\\n                htmlTags[i].tagClose = tagClose;\\n\\n                totalSize += tagOpen.length;\\n                totalSize += tagClose.length;\\n            } while (++i < length);\\n        }\\n        return totalSize;\\n    }\\n\\n    // =============================================================\\n    //                     HTML CONCATENATION\\n    // =============================================================\\n\\n    /**\\n     * @notice Append tags to the html buffer for tags\\n     * @param htmlFile - bytes buffer\\n     * @param htmlTags - Tags being added to buffer\\n     * @param encodeTagContent - Bool to handle tag content encoding\\n     */\\n    function _appendHTMLTags(\\n        bytes memory htmlFile,\\n        HTMLTag[] memory htmlTags,\\n        bool encodeTagContent\\n    ) internal pure {\\n        uint256 i;\\n        unchecked {\\n            do {\\n                _appendHTMLTag(\\n                    htmlFile,\\n                    htmlTags[i],\\n                    encodeTagContent\\n                );\\n            } while (++i < htmlTags.length);\\n        }\\n    }\\n\\n    /**\\n     * @notice Append tag to the html buffer\\n     * @param htmlFile - bytes buffer\\n     * @param htmlTag - Request being added to buffer\\n     * @param encodeTagContent - Bool to handle tag content encoding\\n     */\\n    function _appendHTMLTag(\\n        bytes memory htmlFile,\\n        HTMLTag memory htmlTag,\\n        bool encodeTagContent\\n    ) internal pure {\\n        htmlFile.appendSafe(htmlTag.tagOpen);\\n        if (encodeTagContent) {\\n            htmlFile.appendSafeBase64(htmlTag.tagContent, false, false);\\n        } else {\\n            htmlFile.appendSafe(htmlTag.tagContent);\\n        }\\n        htmlFile.appendSafe(htmlTag.tagClose);\\n    }\\n}\\n\",\"keccak256\":\"0xecd301fc756876714a7d389d40b31dfbb634b9e07576378db78c81c203b09b59\",\"license\":\"MIT\"},\"scripty.sol/contracts/scripty/core/ScriptyStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///////////////////////////////////////////////////////////\\n// \\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557 //\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u255a\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2554\\u255d //\\n// \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u255a\\u2550\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591 //\\n// \\u2591\\u255a\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591 //\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591 //\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591 //\\n///////////////////////////////////////////////////////////\\n//\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    REQUESTS    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591//\\n///////////////////////////////////////////////////////////\\n\\nstruct HTMLRequest {\\n    HTMLTag[] headTags;\\n    HTMLTag[] bodyTags;\\n}\\n\\nenum HTMLTagType {\\n    useTagOpenAndClose,\\n    script,\\n    scriptBase64DataURI,\\n    scriptGZIPBase64DataURI,\\n    scriptPNGBase64DataURI\\n}\\n\\nstruct HTMLTag {\\n    string name;\\n    address contractAddress;\\n    bytes contractData;\\n    HTMLTagType tagType;\\n    bytes tagOpen;\\n    bytes tagClose;\\n    bytes tagContent;\\n}\",\"keccak256\":\"0x9b8d49328c8b0c4fee1a4b8e1fd21d60d21a380524a9a6f80bbefc83551d5eb5\",\"license\":\"MIT\"},\"scripty.sol/contracts/scripty/htmlBuilders/ScriptyHTML.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///////////////////////////////////////////////////////////\\n// \\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557 //\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u255a\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2554\\u255d //\\n// \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u255a\\u2550\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591 //\\n// \\u2591\\u255a\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591 //\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591 //\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591 //\\n///////////////////////////////////////////////////////////\\n//\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591    GENERIC HTML    \\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591//\\n///////////////////////////////////////////////////////////\\n//\\n// This module is designed to generate HTML with head and body tags. \\n//\\n// eg;\\n//     <html>\\n//        <head>\\n//             <title>Hi</title>\\n//             <style>[css code]</style>\\n//         </head>\\n//         <body>\\n//             <canvas id=\\\"canvas\\\"></canvas>\\n//             <script>[SCRIPT]</script>\\n//             <script type=\\\"text/javascript+gzip\\\" src=\\\"data:text/javascript;base64,[SCRIPT]\\\"></script>\\n//         </body>\\n//     </html>\\n//\\n// [NOTE]\\n// If this is your first time using Scripty and you have a\\n// fairly standard JS structure, this is probably the module\\n// you will be using.\\n//\\n///////////////////////////////////////////////////////////\\n\\n/**\\n  @title Generates HTML after fetching and assembling given head and body tags.\\n  @author @0xthedude\\n  @author @xtremetom\\n\\n  Special thanks to @cxkoda, @frolic and @dhof\\n*/\\n\\nimport \\\"./../core/ScriptyCore.sol\\\";\\nimport \\\"./../interfaces/IScriptyHTML.sol\\\";\\n\\ncontract ScriptyHTML is ScriptyCore, IScriptyHTML {\\n    using DynamicBuffer for bytes;\\n\\n    // =============================================================\\n    //                      RAW HTML GETTERS\\n    // =============================================================\\n\\n    /**\\n     * @notice  Get HTML with requested head tags and body tags\\n     * @dev Your HTML is returned in the following format:\\n     *      <html>\\n     *          <head>\\n     *              [tagOpen[0]][contractRequest[0] | tagContent[0]][tagClose[0]]\\n     *              [tagOpen[1]][contractRequest[0] | tagContent[1]][tagClose[1]]\\n     *              ...\\n     *              [tagOpen[n]][contractRequest[0] | tagContent[n]][tagClose[n]]\\n     *          </head>\\n     *          <body>\\n     *              [tagOpen[0]][contractRequest[0] | tagContent[0]][tagClose[0]]\\n     *              [tagOpen[1]][contractRequest[0] | tagContent[1]][tagClose[1]]\\n     *              ...\\n     *              [tagOpen[n]][contractRequest[0] | tagContent[n]][tagClose[n]]\\n     *          </body>\\n     *      </html>\\n     * @param htmlRequest - HTMLRequest\\n     * @return Full HTML with head and body tags\\n     */\\n    function getHTML(\\n        HTMLRequest memory htmlRequest\\n    ) public view returns (bytes memory) {\\n\\n        // calculate buffer size for requests\\n        uint256 requestBufferSize;\\n        unchecked {\\n            if (htmlRequest.headTags.length > 0) {\\n                requestBufferSize = _enrichHTMLTags(\\n                    htmlRequest.headTags,\\n                    false\\n                );\\n            }\\n\\n            if (htmlRequest.bodyTags.length > 0) {\\n                requestBufferSize += _enrichHTMLTags(\\n                    htmlRequest.bodyTags,\\n                    false\\n                );\\n            }\\n        }\\n\\n        bytes memory htmlFile = DynamicBuffer.allocate(\\n            _getHTMLBufferSize(requestBufferSize)\\n        );\\n\\n        // <html>\\n        htmlFile.appendSafe(HTML_OPEN_RAW);\\n\\n        // <head>\\n        htmlFile.appendSafe(HEAD_OPEN_RAW);\\n        if (htmlRequest.headTags.length > 0) {\\n            _appendHTMLTags(htmlFile, htmlRequest.headTags, false);\\n        }\\n        htmlFile.appendSafe(HEAD_CLOSE_RAW);\\n        // </head>\\n\\n        // <body>\\n        htmlFile.appendSafe(BODY_OPEN_RAW);\\n        if (htmlRequest.bodyTags.length > 0) {\\n            _appendHTMLTags(htmlFile, htmlRequest.bodyTags, false);\\n        }\\n        htmlFile.appendSafe(HTML_BODY_CLOSED_RAW);\\n        // </body>\\n        // </html>\\n\\n        return htmlFile;\\n    }\\n\\n    /**\\n     * @notice Calculates the total buffersize for all elements\\n     * @param requestBufferSize - Buffersize of request data\\n     * @return size - Total buffersize of all elements\\n     */\\n    function _getHTMLBufferSize(\\n        uint256 requestBufferSize\\n    ) private pure returns (uint256 size) {\\n        unchecked {\\n            // <html><head></head><body></body></html>\\n            size = URLS_RAW_BYTES;\\n            size += requestBufferSize;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      ENCODED HTML GETTERS\\n    // =============================================================\\n\\n    /**\\n     * @notice Get {getHTML} and base64 encode it\\n     * @param htmlRequest - HTMLRequest\\n     * @return Full HTML with head and body tags, base64 encoded\\n     */\\n    function getEncodedHTML(\\n        HTMLRequest memory htmlRequest\\n    ) public view returns (bytes memory) {\\n        unchecked {\\n            bytes memory rawHTML = getHTML(htmlRequest);\\n\\n            uint256 sizeForEncoding = sizeForBase64Encoding(rawHTML.length);\\n            sizeForEncoding += HTML_BASE64_DATA_URI_BYTES;\\n\\n            bytes memory htmlFile = DynamicBuffer.allocate(sizeForEncoding);\\n            htmlFile.appendSafe(DATA_HTML_BASE64_URI_RAW);\\n            htmlFile.appendSafeBase64(rawHTML, false, false);\\n            return htmlFile;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      STRING UTILITIES\\n    // =============================================================\\n\\n    /**\\n     * @notice Convert {getHTML} output to a string\\n     * @param htmlRequest - HTMLRequest\\n     * @return {getHTMLWrapped} as a string\\n     */\\n    function getHTMLString(\\n        HTMLRequest memory htmlRequest\\n    ) public view returns (string memory) {\\n        return string(getHTML(htmlRequest));\\n    }\\n\\n    /**\\n     * @notice Convert {getEncodedHTML} output to a string\\n     * @param htmlRequest - HTMLRequest\\n     * @return {getEncodedHTML} as a string\\n     */\\n    function getEncodedHTMLString(\\n        HTMLRequest memory htmlRequest\\n    ) public view returns (string memory) {\\n        return string(getEncodedHTML(htmlRequest));\\n    }\\n}\\n\",\"keccak256\":\"0x036640a585bc4df83c1121d54532a7fa356e94bb549f915add3f7cca8ef75f2e\",\"license\":\"MIT\"},\"scripty.sol/contracts/scripty/interfaces/IContractScript.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///////////////////////////////////////////////////////////\\n// \\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557 //\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u255a\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2554\\u255d //\\n// \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u255a\\u2550\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591 //\\n// \\u2591\\u255a\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591 //\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591 //\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591 //\\n///////////////////////////////////////////////////////////\\n\\ninterface IContractScript {\\n    // =============================================================\\n    //                            GETTERS\\n    // =============================================================\\n\\n    /**\\n     * @notice Get the full script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param data - Arbitrary data to be passed to storage\\n     * @return script - Full script from merged chunks\\n     */\\n    function getScript(string calldata name, bytes memory data)\\n        external\\n        view\\n        returns (bytes memory script);\\n}\\n\",\"keccak256\":\"0x434775e385d70a035152e6eb297b6879d9ef3ad892907f06e56e4360b9ff9317\",\"license\":\"MIT\"},\"scripty.sol/contracts/scripty/interfaces/IScriptyHTML.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///////////////////////////////////////////////////////////\\n// \\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557 //\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u255a\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2554\\u255d //\\n// \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u255a\\u2550\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591 //\\n// \\u2591\\u255a\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591 //\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591 //\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591 //\\n///////////////////////////////////////////////////////////\\n\\nimport {HTMLRequest, HTMLTagType, HTMLTag} from \\\"./../core/ScriptyCore.sol\\\";\\n\\ninterface IScriptyHTML {\\n    // =============================================================\\n    //                      RAW HTML GETTERS\\n    // =============================================================\\n\\n    /**\\n     * @notice  Get HTML with requested head tags and body tags\\n     * @dev Your HTML is returned in the following format:\\n     *      <html>\\n     *          <head>\\n     *              [tagOpen[0]][contractRequest[0] | tagContent[0]][tagClose[0]]\\n     *              [tagOpen[1]][contractRequest[0] | tagContent[1]][tagClose[1]]\\n     *              ...\\n     *              [tagOpen[n]][contractRequest[0] | tagContent[n]][tagClose[n]]\\n     *          </head>\\n     *          <body>\\n     *              [tagOpen[0]][contractRequest[0] | tagContent[0]][tagClose[0]]\\n     *              [tagOpen[1]][contractRequest[0] | tagContent[1]][tagClose[1]]\\n     *              ...\\n     *              [tagOpen[n]][contractRequest[0] | tagContent[n]][tagClose[n]]\\n     *          </body>\\n     *      </html>\\n     * @param htmlRequest - HTMLRequest\\n     * @return Full HTML with head and body tags\\n     */\\n    function getHTML(\\n        HTMLRequest memory htmlRequest\\n    ) external view returns (bytes memory);\\n\\n    // =============================================================\\n    //                      ENCODED HTML GETTERS\\n    // =============================================================\\n\\n    /**\\n     * @notice Get {getHTML} and base64 encode it\\n     * @param htmlRequest - HTMLRequest\\n     * @return Full HTML with head and script tags, base64 encoded\\n     */\\n    function getEncodedHTML(\\n        HTMLRequest memory htmlRequest\\n    ) external view returns (bytes memory);\\n\\n    // =============================================================\\n    //                      STRING UTILITIES\\n    // =============================================================\\n\\n    /**\\n     * @notice Convert {getHTML} output to a string\\n     * @param htmlRequest - HTMLRequest\\n     * @return {getHTMLWrapped} as a string\\n     */\\n    function getHTMLString(\\n        HTMLRequest memory htmlRequest\\n    ) external view returns (string memory);\\n\\n    /**\\n     * @notice Convert {getEncodedHTML} output to a string\\n     * @param htmlRequest - HTMLRequest\\n     * @return {getEncodedHTML} as a string\\n     */\\n    function getEncodedHTMLString(\\n        HTMLRequest memory htmlRequest\\n    ) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x850899e6606fbb6bdbe9b85362e9cbbb97b27329dc121fffbda8f081f630fbf5\",\"license\":\"MIT\"},\"scripty.sol/contracts/scripty/interfaces/IScriptyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n///////////////////////////////////////////////////////////\\n// \\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557\\u2591\\u2591\\u2591\\u2588\\u2588\\u2557 //\\n// \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u255a\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2554\\u255d //\\n// \\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u255a\\u2550\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2591 //\\n// \\u2591\\u255a\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2588\\u2588\\u2554\\u255d\\u2591\\u2591 //\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2591\\u2591\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2588\\u2588\\u2551\\u2591\\u2591\\u2591 //\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591\\u2591\\u2591\\u2591\\u255a\\u2550\\u255d\\u2591\\u2591\\u2591 //\\n///////////////////////////////////////////////////////////\\n\\ninterface IScriptyStorage {\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct Script {\\n        bool isVerified;\\n        bool isFrozen;\\n        address owner;\\n        uint256 size;\\n        bytes details;\\n        address[] chunks;\\n    }\\n\\n    // =============================================================\\n    //                            ERRORS\\n    // =============================================================\\n\\n    /**\\n     * @notice Error for, The Script you are trying to create already exists\\n     */\\n    error ScriptExists();\\n\\n    /**\\n     * @notice Error for, You dont have permissions to perform this action\\n     */\\n    error NotScriptOwner();\\n\\n    /**\\n     * @notice Error for, The Script you are trying to edit is frozen\\n     */\\n    error ScriptIsFrozen(string name);\\n\\n    // =============================================================\\n    //                            EVENTS\\n    // =============================================================\\n\\n    /**\\n     * @notice Event for, Successful freezing of a script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     */\\n    event ScriptFrozen(string indexed name);\\n\\n    /**\\n     * @notice Event for, Successful update of script verification status\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param isVerified - Verification status of the script\\n     */\\n    event ScriptVerificationUpdated(string indexed name, bool isVerified);\\n\\n    /**\\n     * @notice Event for, Successful creation of a script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param details - Custom details of the script\\n     */\\n    event ScriptCreated(string indexed name, bytes details);\\n\\n    /**\\n     * @notice Event for, Successful addition of script chunk\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param size - Bytes size of the chunk\\n     */\\n    event ChunkStored(string indexed name, uint256 size);\\n\\n    /**\\n     * @notice Event for, Successful update of custom details\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param details - Custom details of the script\\n     */\\n    event ScriptDetailsUpdated(string indexed name, bytes details);\\n\\n    // =============================================================\\n    //                      MANAGEMENT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @notice Create a new script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param details - Any details the owner wishes to store about the script\\n     *\\n     * Emits an {ScriptCreated} event.\\n     */\\n    function createScript(string calldata name, bytes calldata details)\\n        external;\\n\\n    /**\\n     * @notice Add a code chunk to the script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param chunk - Next sequential code chunk\\n     *\\n     * Emits an {ChunkStored} event.\\n     */\\n    function addChunkToScript(string calldata name, bytes calldata chunk)\\n        external;\\n\\n    /**\\n     * @notice Edit the script details\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param details - Any details the owner wishes to store about the script\\n     *\\n     * Emits an {ScriptDetailsUpdated} event.\\n     */\\n    function updateDetails(string calldata name, bytes calldata details)\\n        external;\\n\\n    /**\\n     * @notice Update the verification status of the script\\n     * @param name - Name given to the script. Eg: threejs.min.js_r148\\n     * @param isVerified - The verification status\\n     *\\n     * Emits an {ScriptVerificationUpdated} event.\\n     */\\n    function updateScriptVerification(string calldata name, bool isVerified)\\n        external;\\n}\\n\",\"keccak256\":\"0x5c43832e2c04c250664df7231c0c90d3b0f74e906bc7d26323222290e7d53a2f\",\"license\":\"MIT\"},\"scripty.sol/contracts/scripty/utils/DynamicBuffer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\n\\npragma solidity >=0.8.0;\\n\\n/// @title DynamicBuffer\\n/// @author David Huber (@cxkoda) and Simon Fremaux (@dievardump). See also\\n///         https://raw.githubusercontent.com/dievardump/solidity-dynamic-buffer\\n/// @notice This library is used to allocate a big amount of container memory\\n//          which will be subsequently filled without needing to reallocate\\n///         memory.\\n/// @dev First, allocate memory.\\n///      Then use `buffer.appendUnchecked(theBytes)` or `appendSafe()` if\\n///      bounds checking is required.\\nlibrary DynamicBuffer {\\n    /// @notice Allocates container space for the DynamicBuffer\\n    /// @param capacity_ The intended max amount of bytes in the buffer\\n    /// @return buffer The memory location of the buffer\\n    /// @dev Allocates `capacity_ + 0x60` bytes of space\\n    ///      The buffer array starts at the first container data position,\\n    ///      (i.e. `buffer = container + 0x20`)\\n    function allocate(uint256 capacity_)\\n        internal\\n        pure\\n        returns (bytes memory buffer)\\n    {\\n        assembly {\\n            // Get next-free memory address\\n            let container := mload(0x40)\\n\\n            // Allocate memory by setting a new next-free address\\n            {\\n                // Add 2 x 32 bytes in size for the two length fields\\n                // Add 32 bytes safety space for 32B chunked copy\\n                let size := add(capacity_, 0x60)\\n                let newNextFree := add(container, size)\\n                mstore(0x40, newNextFree)\\n            }\\n\\n            // Set the correct container length\\n            {\\n                let length := add(capacity_, 0x40)\\n                mstore(container, length)\\n            }\\n\\n            // The buffer starts at idx 1 in the container (0 is length)\\n            buffer := add(container, 0x20)\\n\\n            // Init content with length 0\\n            mstore(buffer, 0)\\n        }\\n\\n        return buffer;\\n    }\\n\\n    /// @notice Appends data to buffer, and update buffer length\\n    /// @param buffer the buffer to append the data to\\n    /// @param data the data to append\\n    /// @dev Does not perform out-of-bound checks (container capacity)\\n    ///      for efficiency.\\n    function appendUnchecked(bytes memory buffer, bytes memory data)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            let length := mload(data)\\n            for {\\n                data := add(data, 0x20)\\n                let dataEnd := add(data, length)\\n                let copyTo := add(buffer, add(mload(buffer), 0x20))\\n            } lt(data, dataEnd) {\\n                data := add(data, 0x20)\\n                copyTo := add(copyTo, 0x20)\\n            } {\\n                // Copy 32B chunks from data to buffer.\\n                // This may read over data array boundaries and copy invalid\\n                // bytes, which doesn't matter in the end since we will\\n                // later set the correct buffer length, and have allocated an\\n                // additional word to avoid buffer overflow.\\n                mstore(copyTo, mload(data))\\n            }\\n\\n            // Update buffer length\\n            mstore(buffer, add(mload(buffer), length))\\n        }\\n    }\\n\\n    /// @notice Appends data to buffer, and update buffer length\\n    /// @param buffer the buffer to append the data to\\n    /// @param data the data to append\\n    /// @dev Performs out-of-bound checks and calls `appendUnchecked`.\\n    function appendSafe(bytes memory buffer, bytes memory data) internal pure {\\n        checkOverflow(buffer, data.length);\\n        appendUnchecked(buffer, data);\\n    }\\n\\n    /// @notice Appends data encoded as Base64 to buffer.\\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n    /// @param noPadding Whether to strip away the padding.\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n    /// Author: Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\\n    /// Author: Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Base64.sol)\\n    /// Author: Modified from (https://github.com/Brechtpd/base64/blob/main/base64.sol) by Brecht Devos.\\n    function appendSafeBase64(\\n        bytes memory buffer,\\n        bytes memory data,\\n        bool fileSafe,\\n        bool noPadding\\n    ) internal pure {\\n        uint256 dataLength = data.length;\\n\\n        if (data.length == 0) {\\n            return;\\n        }\\n\\n        uint256 encodedLength;\\n        uint256 r;\\n        assembly {\\n            // For each 3 bytes block, we will have 4 bytes in the base64\\n            // encoding: `encodedLength = 4 * divCeil(dataLength, 3)`.\\n            // The `shl(2, ...)` is equivalent to multiplying by 4.\\n            encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n            r := mod(dataLength, 3)\\n            if noPadding {\\n                // if r == 0 => no modification\\n                // if r == 1 => encodedLength -= 2\\n                // if r == 2 => encodedLength -= 1\\n                encodedLength := sub(\\n                    encodedLength,\\n                    add(iszero(iszero(r)), eq(r, 1))\\n                )\\n            }\\n        }\\n\\n        checkOverflow(buffer, encodedLength);\\n\\n        assembly {\\n            let nextFree := mload(0x40)\\n\\n            // Store the table into the scratch space.\\n            // Offsetted by -1 byte so that the `mload` will load the character.\\n            // We will rewrite the free memory pointer at `0x40` later with\\n            // the allocated size.\\n            mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n            mstore(\\n                0x3f,\\n                sub(\\n                    \\\"ghijklmnopqrstuvwxyz0123456789-_\\\",\\n                    // The magic constant 0x0230 will translate \\\"-_\\\" + \\\"+/\\\".\\n                    mul(iszero(fileSafe), 0x0230)\\n                )\\n            )\\n\\n            // Skip the first slot, which stores the length.\\n            let ptr := add(add(buffer, 0x20), mload(buffer))\\n            let end := add(data, dataLength)\\n\\n            // Run over the input, 3 bytes at a time.\\n            // prettier-ignore\\n            // solhint-disable-next-line no-empty-blocks\\n            for {} 1 {} {\\n                    data := add(data, 3) // Advance 3 bytes.\\n                    let input := mload(data)\\n\\n                    // Write 4 bytes. Optimized for fewer stack operations.\\n                    mstore8(    ptr    , mload(and(shr(18, input), 0x3F)))\\n                    mstore8(add(ptr, 1), mload(and(shr(12, input), 0x3F)))\\n                    mstore8(add(ptr, 2), mload(and(shr( 6, input), 0x3F)))\\n                    mstore8(add(ptr, 3), mload(and(        input , 0x3F)))\\n                    \\n                    ptr := add(ptr, 4) // Advance 4 bytes.\\n                    // prettier-ignore\\n                    if iszero(lt(data, end)) { break }\\n                }\\n\\n            if iszero(noPadding) {\\n                // Offset `ptr` and pad with '='. We can simply write over the end.\\n                mstore8(sub(ptr, iszero(iszero(r))), 0x3d) // Pad at `ptr - 1` if `r > 0`.\\n                mstore8(sub(ptr, shl(1, eq(r, 1))), 0x3d) // Pad at `ptr - 2` if `r == 1`.\\n            }\\n\\n            mstore(buffer, add(mload(buffer), encodedLength))\\n            mstore(0x40, nextFree)\\n        }\\n    }\\n\\n    /// @notice Appends data encoded as Base64 to buffer.\\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n    /// @param noPadding Whether to strip away the padding.\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n    /// Author: Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\\n    /// Author: Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Base64.sol)\\n    /// Author: Modified from (https://github.com/Brechtpd/base64/blob/main/base64.sol) by Brecht Devos.\\n    function appendUncheckedBase64(\\n        bytes memory buffer,\\n        bytes memory data,\\n        bool fileSafe,\\n        bool noPadding\\n    ) internal pure {\\n        uint256 dataLength = data.length;\\n\\n        if (data.length == 0) {\\n            return;\\n        }\\n\\n        uint256 encodedLength;\\n        uint256 r;\\n        assembly {\\n            // For each 3 bytes block, we will have 4 bytes in the base64\\n            // encoding: `encodedLength = 4 * divCeil(dataLength, 3)`.\\n            // The `shl(2, ...)` is equivalent to multiplying by 4.\\n            encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n            r := mod(dataLength, 3)\\n            if noPadding {\\n                // if r == 0 => no modification\\n                // if r == 1 => encodedLength -= 2\\n                // if r == 2 => encodedLength -= 1\\n                encodedLength := sub(\\n                    encodedLength,\\n                    add(iszero(iszero(r)), eq(r, 1))\\n                )\\n            }\\n        }\\n\\n        assembly {\\n            let nextFree := mload(0x40)\\n\\n            // Store the table into the scratch space.\\n            // Offsetted by -1 byte so that the `mload` will load the character.\\n            // We will rewrite the free memory pointer at `0x40` later with\\n            // the allocated size.\\n            mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n            mstore(\\n                0x3f,\\n                sub(\\n                    \\\"ghijklmnopqrstuvwxyz0123456789-_\\\",\\n                    // The magic constant 0x0230 will translate \\\"-_\\\" + \\\"+/\\\".\\n                    mul(iszero(fileSafe), 0x0230)\\n                )\\n            )\\n\\n            // Skip the first slot, which stores the length.\\n            let ptr := add(add(buffer, 0x20), mload(buffer))\\n            let end := add(data, dataLength)\\n\\n            // Run over the input, 3 bytes at a time.\\n            // prettier-ignore\\n            // solhint-disable-next-line no-empty-blocks\\n            for {} 1 {} {\\n                    data := add(data, 3) // Advance 3 bytes.\\n                    let input := mload(data)\\n\\n                    // Write 4 bytes. Optimized for fewer stack operations.\\n                    mstore8(    ptr    , mload(and(shr(18, input), 0x3F)))\\n                    mstore8(add(ptr, 1), mload(and(shr(12, input), 0x3F)))\\n                    mstore8(add(ptr, 2), mload(and(shr( 6, input), 0x3F)))\\n                    mstore8(add(ptr, 3), mload(and(        input , 0x3F)))\\n                    \\n                    ptr := add(ptr, 4) // Advance 4 bytes.\\n                    // prettier-ignore\\n                    if iszero(lt(data, end)) { break }\\n                }\\n\\n            if iszero(noPadding) {\\n                // Offset `ptr` and pad with '='. We can simply write over the end.\\n                mstore8(sub(ptr, iszero(iszero(r))), 0x3d) // Pad at `ptr - 1` if `r > 0`.\\n                mstore8(sub(ptr, shl(1, eq(r, 1))), 0x3d) // Pad at `ptr - 2` if `r == 1`.\\n            }\\n\\n            mstore(buffer, add(mload(buffer), encodedLength))\\n            mstore(0x40, nextFree)\\n        }\\n    }\\n\\n    /// @notice Returns the capacity of a given buffer.\\n    function capacity(bytes memory buffer) internal pure returns (uint256) {\\n        uint256 cap;\\n        assembly {\\n            cap := sub(mload(sub(buffer, 0x20)), 0x40)\\n        }\\n        return cap;\\n    }\\n\\n    /// @notice Reverts if the buffer will overflow after appending a given\\n    /// number of bytes.\\n    function checkOverflow(bytes memory buffer, uint256 addedLength)\\n        internal\\n        pure\\n    {\\n        uint256 cap = capacity(buffer);\\n        uint256 newLength = buffer.length + addedLength;\\n        if (cap < newLength) {\\n            revert(\\\"DynamicBuffer: Appending out of bounds.\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbe4f1ebd86c807f73ee48a5856e54d2e270a7bbcfb16fbc8f6400e0f626e96fb\",\"license\":\"MIT\"},\"solady/src/auth/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/auth/Ownable.sol)\\n///\\n/// @dev Note:\\n/// This implementation does NOT auto-initialize the owner to `msg.sender`.\\n/// You MUST call the `_initializeOwner` in the constructor / initializer.\\n///\\n/// While the ownable portion follows\\n/// [EIP-173](https://eips.ethereum.org/EIPS/eip-173) for compatibility,\\n/// the nomenclature for the 2-step ownership handover may be unique to this codebase.\\nabstract contract Ownable {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The caller is not authorized to call the function.\\n    error Unauthorized();\\n\\n    /// @dev The `newOwner` cannot be the zero address.\\n    error NewOwnerIsZeroAddress();\\n\\n    /// @dev The `pendingOwner` does not have a valid handover request.\\n    error NoHandoverRequest();\\n\\n    /// @dev Cannot double-initialize.\\n    error AlreadyInitialized();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership is transferred from `oldOwner` to `newOwner`.\\n    /// This event is intentionally kept the same as OpenZeppelin's Ownable to be\\n    /// compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173),\\n    /// despite it not being as lightweight as a single argument event.\\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @dev An ownership handover to `pendingOwner` has been requested.\\n    event OwnershipHandoverRequested(address indexed pendingOwner);\\n\\n    /// @dev The ownership handover to `pendingOwner` has been canceled.\\n    event OwnershipHandoverCanceled(address indexed pendingOwner);\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipTransferred(address,address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE =\\n        0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverRequested(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE =\\n        0xdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d;\\n\\n    /// @dev `keccak256(bytes(\\\"OwnershipHandoverCanceled(address)\\\"))`.\\n    uint256 private constant _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE =\\n        0xfa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c92;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The owner slot is given by:\\n    /// `bytes32(~uint256(uint32(bytes4(keccak256(\\\"_OWNER_SLOT_NOT\\\")))))`.\\n    /// It is intentionally chosen to be a high value\\n    /// to avoid collision with lower slots.\\n    /// The choice of manual storage layout is to enable compatibility\\n    /// with both regular and upgradeable contracts.\\n    bytes32 internal constant _OWNER_SLOT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927;\\n\\n    /// The ownership handover slot of `newOwner` is given by:\\n    /// ```\\n    ///     mstore(0x00, or(shl(96, user), _HANDOVER_SLOT_SEED))\\n    ///     let handoverSlot := keccak256(0x00, 0x20)\\n    /// ```\\n    /// It stores the expiry timestamp of the two-step ownership handover.\\n    uint256 private constant _HANDOVER_SLOT_SEED = 0x389a75e1;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     INTERNAL FUNCTIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Override to return true to make `_initializeOwner` prevent double-initialization.\\n    function _guardInitializeOwner() internal pure virtual returns (bool guard) {}\\n\\n    /// @dev Initializes the owner directly without authorization guard.\\n    /// This function must be called upon initialization,\\n    /// regardless of whether the contract is upgradeable or not.\\n    /// This is to enable generalization to both regular and upgradeable contracts,\\n    /// and to save gas in case the initial owner is not the caller.\\n    /// For performance reasons, this function will not check if there\\n    /// is an existing owner.\\n    function _initializeOwner(address newOwner) internal virtual {\\n        if (_guardInitializeOwner()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                if sload(ownerSlot) {\\n                    mstore(0x00, 0x0dc149f0) // `AlreadyInitialized()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Store the new value.\\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n            }\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Store the new value.\\n                sstore(_OWNER_SLOT, newOwner)\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, 0, newOwner)\\n            }\\n        }\\n    }\\n\\n    /// @dev Sets the owner directly without authorization guard.\\n    function _setOwner(address newOwner) internal virtual {\\n        if (_guardInitializeOwner()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n                // Store the new value.\\n                sstore(ownerSlot, or(newOwner, shl(255, iszero(newOwner))))\\n            }\\n        } else {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let ownerSlot := _OWNER_SLOT\\n                // Clean the upper 96 bits.\\n                newOwner := shr(96, shl(96, newOwner))\\n                // Emit the {OwnershipTransferred} event.\\n                log3(0, 0, _OWNERSHIP_TRANSFERRED_EVENT_SIGNATURE, sload(ownerSlot), newOwner)\\n                // Store the new value.\\n                sstore(ownerSlot, newOwner)\\n            }\\n        }\\n    }\\n\\n    /// @dev Throws if the sender is not the owner.\\n    function _checkOwner() internal view virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the caller is not the stored owner, revert.\\n            if iszero(eq(caller(), sload(_OWNER_SLOT))) {\\n                mstore(0x00, 0x82b42900) // `Unauthorized()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns how long a two-step ownership handover is valid for in seconds.\\n    /// Override to return a different value if needed.\\n    /// Made internal to conserve bytecode. Wrap it in a public function if needed.\\n    function _ownershipHandoverValidFor() internal view virtual returns (uint64) {\\n        return 48 * 3600;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  PUBLIC UPDATE FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Allows the owner to transfer the ownership to `newOwner`.\\n    function transferOwnership(address newOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(shl(96, newOwner)) {\\n                mstore(0x00, 0x7448fbae) // `NewOwnerIsZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        _setOwner(newOwner);\\n    }\\n\\n    /// @dev Allows the owner to renounce their ownership.\\n    function renounceOwnership() public payable virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /// @dev Request a two-step ownership handover to the caller.\\n    /// The request will automatically expire in 48 hours (172800 seconds) by default.\\n    function requestOwnershipHandover() public payable virtual {\\n        unchecked {\\n            uint256 expires = block.timestamp + _ownershipHandoverValidFor();\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Compute and set the handover slot to `expires`.\\n                mstore(0x0c, _HANDOVER_SLOT_SEED)\\n                mstore(0x00, caller())\\n                sstore(keccak256(0x0c, 0x20), expires)\\n                // Emit the {OwnershipHandoverRequested} event.\\n                log2(0, 0, _OWNERSHIP_HANDOVER_REQUESTED_EVENT_SIGNATURE, caller())\\n            }\\n        }\\n    }\\n\\n    /// @dev Cancels the two-step ownership handover to the caller, if any.\\n    function cancelOwnershipHandover() public payable virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x20), 0)\\n            // Emit the {OwnershipHandoverCanceled} event.\\n            log2(0, 0, _OWNERSHIP_HANDOVER_CANCELED_EVENT_SIGNATURE, caller())\\n        }\\n    }\\n\\n    /// @dev Allows the owner to complete the two-step ownership handover to `pendingOwner`.\\n    /// Reverts if there is no existing ownership handover requested by `pendingOwner`.\\n    function completeOwnershipHandover(address pendingOwner) public payable virtual onlyOwner {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute and set the handover slot to 0.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            let handoverSlot := keccak256(0x0c, 0x20)\\n            // If the handover does not exist, or has expired.\\n            if gt(timestamp(), sload(handoverSlot)) {\\n                mstore(0x00, 0x6f5e8818) // `NoHandoverRequest()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Set the handover slot to 0.\\n            sstore(handoverSlot, 0)\\n        }\\n        _setOwner(pendingOwner);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   PUBLIC READ FUNCTIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of the contract.\\n    function owner() public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := sload(_OWNER_SLOT)\\n        }\\n    }\\n\\n    /// @dev Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`.\\n    function ownershipHandoverExpiresAt(address pendingOwner)\\n        public\\n        view\\n        virtual\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the handover slot.\\n            mstore(0x0c, _HANDOVER_SLOT_SEED)\\n            mstore(0x00, pendingOwner)\\n            // Load the handover slot.\\n            result := sload(keccak256(0x0c, 0x20))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         MODIFIERS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Marks a function as only callable by the owner.\\n    modifier onlyOwner() virtual {\\n        _checkOwner();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc208cdd9de02bbf4b5edad18b88e23a2be7ff56d2287d5649329dc7cda64b9a3\",\"license\":\"MIT\"},\"solady/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Simple ERC721 implementation with storage hitchhiking.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/token/ERC721/ERC721.sol)\\n///\\n/// @dev Note:\\n/// - The ERC721 standard allows for self-approvals.\\n///   For performance, this implementation WILL NOT revert for such actions.\\n///   Please add any checks with overrides if desired.\\n/// - For performance, methods are made payable where permitted by the ERC721 standard.\\n/// - The `safeTransfer` functions use the identity precompile (0x4)\\n///   to copy memory internally.\\n///\\n/// If you are overriding:\\n/// - NEVER violate the ERC721 invariant:\\n///   the balance of an owner MUST always be equal to their number of ownership slots.\\n///   The transfer functions do not have an underflow guard for user token balances.\\n/// - Make sure all variables written to storage are properly cleaned\\n//    (e.g. the bool value for `isApprovedForAll` MUST be either 1 or 0 under the hood).\\n/// - Check that the overridden function is actually used in the function you want to\\n///   change the behavior of. Much of the code has been manually inlined for performance.\\nabstract contract ERC721 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev An account can hold up to 4294967295 tokens.\\n    uint256 internal constant _MAX_ACCOUNT_BALANCE = 0xffffffff;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Only the token owner or an approved account can manage the token.\\n    error NotOwnerNorApproved();\\n\\n    /// @dev The token does not exist.\\n    error TokenDoesNotExist();\\n\\n    /// @dev The token already exists.\\n    error TokenAlreadyExists();\\n\\n    /// @dev Cannot query the balance for the zero address.\\n    error BalanceQueryForZeroAddress();\\n\\n    /// @dev Cannot mint or transfer to the zero address.\\n    error TransferToZeroAddress();\\n\\n    /// @dev The token must be owned by `from`.\\n    error TransferFromIncorrectOwner();\\n\\n    /// @dev The recipient's balance has overflowed.\\n    error AccountBalanceOverflow();\\n\\n    /// @dev Cannot safely transfer to a contract that does not implement\\n    /// the ERC721Receiver interface.\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           EVENTS                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Emitted when token `id` is transferred from `from` to `to`.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables `account` to manage the `id` token.\\n    event Approval(address indexed owner, address indexed account, uint256 indexed id);\\n\\n    /// @dev Emitted when `owner` enables or disables `operator` to manage all of their tokens.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool isApproved);\\n\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\n\\n    /// @dev `keccak256(bytes(\\\"ApprovalForAll(address,address,bool)\\\"))`.\\n    uint256 private constant _APPROVAL_FOR_ALL_EVENT_SIGNATURE =\\n        0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                          STORAGE                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ownership data slot of `id` is given by:\\n    /// ```\\n    ///     mstore(0x00, id)\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..159]   `addr`\\n    /// - [160..255] `extraData`\\n    ///\\n    /// The approved address slot is given by: `add(1, ownershipSlot)`.\\n    ///\\n    /// See: https://notes.ethereum.org/%40vbuterin/verkle_tree_eip\\n    ///\\n    /// The balance slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n    ///     mstore(0x00, owner)\\n    ///     let balanceSlot := keccak256(0x0c, 0x1c)\\n    /// ```\\n    /// Bits Layout:\\n    /// - [0..31]   `balance`\\n    /// - [32..255] `aux`\\n    ///\\n    /// The `operator` approval slot of `owner` is given by:\\n    /// ```\\n    ///     mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n    ///     mstore(0x00, owner)\\n    ///     let operatorApprovalSlot := keccak256(0x0c, 0x30)\\n    /// ```\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED = 0x7d8825530a5a2e7a << 192;\\n\\n    /// @dev Pre-shifted and pre-masked constant.\\n    uint256 private constant _ERC721_MASTER_SLOT_SEED_MASKED = 0x0a5a2e7a00000000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC721 METADATA                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the token collection name.\\n    function name() public view virtual returns (string memory);\\n\\n    /// @dev Returns the token collection symbol.\\n    function symbol() public view virtual returns (string memory);\\n\\n    /// @dev Returns the Uniform Resource Identifier (URI) for token `id`.\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                           ERC721                           */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the owner of token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function ownerOf(uint256 id) public view virtual returns (address result) {\\n        result = _ownerOf(id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(result) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the number of tokens owned by `owner`.\\n    ///\\n    /// Requirements:\\n    /// - `owner` must not be the zero address.\\n    function balanceOf(address owner) public view virtual returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Revert if the `owner` is the zero address.\\n            if iszero(owner) {\\n                mstore(0x00, 0x8f4eb604) // `BalanceQueryForZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := and(sload(keccak256(0x0c, 0x1c)), _MAX_ACCOUNT_BALANCE)\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function getApproved(uint256 id) public view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            if iszero(shl(96, sload(ownershipSlot))) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := sload(add(1, ownershipSlot))\\n        }\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - The caller must be the owner of the token,\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits an {Approval} event.\\n    function approve(address account, uint256 id) public payable virtual {\\n        _approve(msg.sender, account, id);\\n    }\\n\\n    /// @dev Returns whether `operator` is approved to manage the tokens of `owner`.\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, owner)\\n            result := sload(keccak256(0x0c, 0x30))\\n        }\\n    }\\n\\n    /// @dev Sets whether `operator` is approved to manage the tokens of the caller.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function setApprovalForAll(address operator, bool isApproved) public virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`msg.sender`, `operator`).\\n            mstore(0x1c, operator)\\n            mstore(0x08, _ERC721_MASTER_SLOT_SEED_MASKED)\\n            mstore(0x00, caller())\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            // forgefmt: disable-next-item\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, caller(), shr(96, shl(96, operator)))\\n        }\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function transferFrom(address from, address to, uint256 id) public payable virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, caller()))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if `from` is not the owner, or does not exist.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                if iszero(owner) {\\n                    mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                mstore(0x00, 0xa1148100) // `TransferFromIncorrectOwner()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // Revert if the caller is not the owner, nor approved.\\n                if iszero(or(eq(caller(), from), eq(caller(), approvedAddress))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                if iszero(and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `safeTransferFrom(from, to, id, \\\"\\\")`.\\n    function safeTransferFrom(address from, address to, uint256 id) public payable virtual {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function safeTransferFrom(address from, address to, uint256 id, bytes calldata data)\\n        public\\n        payable\\n        virtual\\n    {\\n        transferFrom(from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Returns true if this contract implements the interface defined by `interfaceId`.\\n    /// See: https://eips.ethereum.org/EIPS/eip-165\\n    /// This function call must use less than 30000 gas.\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let s := shr(224, interfaceId)\\n            // ERC165: 0x01ffc9a7, ERC721: 0x80ac58cd, ERC721Metadata: 0x5b5e139f.\\n            result := or(or(eq(s, 0x01ffc9a7), eq(s, 0x80ac58cd)), eq(s, 0x5b5e139f))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL QUERY FUNCTIONS                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if token `id` exists.\\n    function _exists(uint256 id) internal view virtual returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := iszero(iszero(shl(96, sload(add(id, add(id, keccak256(0x00, 0x20)))))))\\n        }\\n    }\\n\\n    /// @dev Returns the owner of token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _ownerOf(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(96, shl(96, sload(add(id, add(id, keccak256(0x00, 0x20))))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*            INTERNAL DATA HITCHHIKING FUNCTIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance, no events are emitted for the hitchhiking setters.\\n    // Please emit your own events if required.\\n\\n    /// @dev Returns the auxiliary data for `owner`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _getAux(address owner) internal view virtual returns (uint224 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            result := shr(32, sload(keccak256(0x0c, 0x1c)))\\n        }\\n    }\\n\\n    /// @dev Set the auxiliary data for `owner` to `value`.\\n    /// Minting, transferring, burning the tokens of `owner` will not change the auxiliary data.\\n    /// Auxiliary data can be set for any address, even if it does not have any tokens.\\n    function _setAux(address owner, uint224 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            mstore(0x00, owner)\\n            let balanceSlot := keccak256(0x0c, 0x1c)\\n            let packed := sload(balanceSlot)\\n            sstore(balanceSlot, xor(packed, shl(32, xor(value, shr(32, packed)))))\\n        }\\n    }\\n\\n    /// @dev Returns the extra data for token `id`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _getExtraData(uint256 id) internal view virtual returns (uint96 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := shr(160, sload(add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Sets the extra data for token `id` to `value`.\\n    /// Minting, transferring, burning a token will not change the extra data.\\n    /// The extra data can be set on a non-existent token.\\n    function _setExtraData(uint256 id, uint96 value) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let packed := sload(ownershipSlot)\\n            sstore(ownershipSlot, xor(packed, shl(160, xor(value, shr(160, packed)))))\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _mint(address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(address(0), to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            to := shr(96, shl(96, to))\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Revert if the token already exists.\\n            if shl(96, ownershipPacked) {\\n                mstore(0x00, 0xc991cbb1) // `TokenAlreadyExists()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Update with the owner.\\n            sstore(ownershipSlot, or(ownershipPacked, to))\\n            // Increment the balance of the owner.\\n            {\\n                mstore(0x00, to)\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                let balanceSlotPacked := add(sload(balanceSlot), 1)\\n                if iszero(and(balanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(balanceSlot, balanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, 0, to, id)\\n        }\\n        _afterTokenTransfer(address(0), to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeMint(to, id, \\\"\\\")`.\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _safeMint(to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Mints token `id` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must not exist.\\n    /// - `to` cannot be the zero address.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeMint(address to, uint256 id, bytes memory data) internal virtual {\\n        _mint(to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(address(0), to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_burn(address(0), id)`.\\n    function _burn(uint256 id) internal virtual {\\n        _burn(address(0), id);\\n    }\\n\\n    /// @dev Destroys token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _burn(address by, uint256 id) internal virtual {\\n        address owner = ownerOf(id);\\n        _beforeTokenTransfer(owner, address(0), id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            // Reload the owner in case it is changed in `_beforeTokenTransfer`.\\n            owner := shr(96, shl(96, ownershipPacked))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load and check the token approval.\\n            {\\n                mstore(0x00, owner)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, owner), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Clear the owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, owner))\\n            // Decrement the balance of `owner`.\\n            {\\n                let balanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(balanceSlot, sub(sload(balanceSlot), 1))\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, owner, 0, id)\\n        }\\n        _afterTokenTransfer(owner, address(0), id);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL APPROVAL FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns whether `account` is the owner of token `id`, or is approved to manage it.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    function _isApprovedOrOwner(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := 1\\n            // Clear the upper 96 bits.\\n            account := shr(96, shl(96, account))\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, account))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := shr(96, shl(96, sload(ownershipSlot)))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Check if `account` is the `owner`.\\n            if iszero(eq(account, owner)) {\\n                mstore(0x00, owner)\\n                // Check if `account` is approved to manage the token.\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    result := eq(account, sload(add(1, ownershipSlot)))\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the account approved to manage token `id`.\\n    /// Returns the zero address instead of reverting if the token does not exist.\\n    function _getApproved(uint256 id) internal view virtual returns (address result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, id)\\n            mstore(0x1c, _ERC721_MASTER_SLOT_SEED)\\n            result := sload(add(1, add(id, add(id, keccak256(0x00, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `_approve(address(0), account, id)`.\\n    function _approve(address account, uint256 id) internal virtual {\\n        _approve(address(0), account, id);\\n    }\\n\\n    /// @dev Sets `account` as the approved account to manage token `id`, using `by`.\\n    ///\\n    /// Requirements:\\n    /// - Token `id` must exist.\\n    /// - If `by` is not the zero address, `by` must be the owner\\n    ///   or an approved operator for the token owner.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _approve(address by, address account, uint256 id) internal virtual {\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            account := and(bitmaskAddress, account)\\n            by := and(bitmaskAddress, by)\\n            // Load the owner of the token.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let owner := and(bitmaskAddress, sload(ownershipSlot))\\n            // Revert if the token does not exist.\\n            if iszero(owner) {\\n                mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // If `by` is not the zero address, do the authorization check.\\n            // Revert if `by` is not the owner, nor approved.\\n            if iszero(or(iszero(by), eq(by, owner))) {\\n                mstore(0x00, owner)\\n                if iszero(sload(keccak256(0x0c, 0x30))) {\\n                    mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            // Sets `account` as the approved account to manage `id`.\\n            sstore(add(1, ownershipSlot), account)\\n            // Emit the {Approval} event.\\n            log4(codesize(), 0x00, _APPROVAL_EVENT_SIGNATURE, owner, account, id)\\n        }\\n    }\\n\\n    /// @dev Approve or remove the `operator` as an operator for `by`,\\n    /// without authorization checks.\\n    ///\\n    /// Emits an {ApprovalForAll} event.\\n    function _setApprovalForAll(address by, address operator, bool isApproved) internal virtual {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            by := shr(96, shl(96, by))\\n            operator := shr(96, shl(96, operator))\\n            // Convert to 0 or 1.\\n            isApproved := iszero(iszero(isApproved))\\n            // Update the `isApproved` for (`by`, `operator`).\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, operator))\\n            mstore(0x00, by)\\n            sstore(keccak256(0x0c, 0x30), isApproved)\\n            // Emit the {ApprovalForAll} event.\\n            mstore(0x00, isApproved)\\n            log3(0x00, 0x20, _APPROVAL_FOR_ALL_EVENT_SIGNATURE, by, operator)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `_transfer(address(0), from, to, id)`.\\n    function _transfer(address from, address to, uint256 id) internal virtual {\\n        _transfer(address(0), from, to, id);\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _transfer(address by, address from, address to, uint256 id) internal virtual {\\n        _beforeTokenTransfer(from, to, id);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clear the upper 96 bits.\\n            let bitmaskAddress := shr(96, not(0))\\n            from := and(bitmaskAddress, from)\\n            to := and(bitmaskAddress, to)\\n            by := and(bitmaskAddress, by)\\n            // Load the ownership data.\\n            mstore(0x00, id)\\n            mstore(0x1c, or(_ERC721_MASTER_SLOT_SEED, by))\\n            let ownershipSlot := add(id, add(id, keccak256(0x00, 0x20)))\\n            let ownershipPacked := sload(ownershipSlot)\\n            let owner := and(bitmaskAddress, ownershipPacked)\\n            // Revert if `from` is not the owner, or does not exist.\\n            if iszero(mul(owner, eq(owner, from))) {\\n                if iszero(owner) {\\n                    mstore(0x00, 0xceea21b6) // `TokenDoesNotExist()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                mstore(0x00, 0xa1148100) // `TransferFromIncorrectOwner()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Revert if `to` is the zero address.\\n            if iszero(to) {\\n                mstore(0x00, 0xea553b34) // `TransferToZeroAddress()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // Load, check, and update the token approval.\\n            {\\n                mstore(0x00, from)\\n                let approvedAddress := sload(add(1, ownershipSlot))\\n                // If `by` is not the zero address, do the authorization check.\\n                // Revert if the `by` is not the owner, nor approved.\\n                if iszero(or(iszero(by), or(eq(by, from), eq(by, approvedAddress)))) {\\n                    if iszero(sload(keccak256(0x0c, 0x30))) {\\n                        mstore(0x00, 0x4b6e7f18) // `NotOwnerNorApproved()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                }\\n                // Delete the approved address if any.\\n                if approvedAddress { sstore(add(1, ownershipSlot), 0) }\\n            }\\n            // Update with the new owner.\\n            sstore(ownershipSlot, xor(ownershipPacked, xor(from, to)))\\n            // Decrement the balance of `from`.\\n            {\\n                let fromBalanceSlot := keccak256(0x0c, 0x1c)\\n                sstore(fromBalanceSlot, sub(sload(fromBalanceSlot), 1))\\n            }\\n            // Increment the balance of `to`.\\n            {\\n                mstore(0x00, to)\\n                let toBalanceSlot := keccak256(0x0c, 0x1c)\\n                let toBalanceSlotPacked := add(sload(toBalanceSlot), 1)\\n                if iszero(and(toBalanceSlotPacked, _MAX_ACCOUNT_BALANCE)) {\\n                    mstore(0x00, 0x01336cea) // `AccountBalanceOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n                sstore(toBalanceSlot, toBalanceSlotPacked)\\n            }\\n            // Emit the {Transfer} event.\\n            log4(codesize(), 0x00, _TRANSFER_EVENT_SIGNATURE, from, to, id)\\n        }\\n        _afterTokenTransfer(from, to, id);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - The caller must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(address(0), from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /// @dev Equivalent to `_safeTransfer(by, from, to, id, \\\"\\\")`.\\n    function _safeTransfer(address by, address from, address to, uint256 id) internal virtual {\\n        _safeTransfer(by, from, to, id, \\\"\\\");\\n    }\\n\\n    /// @dev Transfers token `id` from `from` to `to`.\\n    ///\\n    /// Requirements:\\n    ///\\n    /// - Token `id` must exist.\\n    /// - `from` must be the owner of the token.\\n    /// - `to` cannot be the zero address.\\n    /// - If `by` is not the zero address,\\n    ///   it must be the owner of the token, or be approved to manage the token.\\n    /// - If `to` refers to a smart contract, it must implement\\n    ///   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n    ///\\n    /// Emits a {Transfer} event.\\n    function _safeTransfer(address by, address from, address to, uint256 id, bytes memory data)\\n        internal\\n        virtual\\n    {\\n        _transfer(by, from, to, id);\\n        if (_hasCode(to)) _checkOnERC721Received(from, to, id, data);\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    HOOKS FOR OVERRIDING                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Hook that is called before any token transfers, including minting and burning.\\n    function _beforeTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /// @dev Hook that is called after any token transfers, including minting and burning.\\n    function _afterTokenTransfer(address from, address to, uint256 id) internal virtual {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns if `a` has bytecode of non-zero length.\\n    function _hasCode(address a) private view returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := extcodesize(a) // Can handle dirty upper bits.\\n        }\\n    }\\n\\n    /// @dev Perform a call to invoke {IERC721Receiver-onERC721Received} on `to`.\\n    /// Reverts if the target does not support the function correctly.\\n    function _checkOnERC721Received(address from, address to, uint256 id, bytes memory data)\\n        private\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the calldata.\\n            let m := mload(0x40)\\n            let onERC721ReceivedSelector := 0x150b7a02\\n            mstore(m, onERC721ReceivedSelector)\\n            mstore(add(m, 0x20), caller()) // The `operator`, which is always `msg.sender`.\\n            mstore(add(m, 0x40), shr(96, shl(96, from)))\\n            mstore(add(m, 0x60), id)\\n            mstore(add(m, 0x80), 0x80)\\n            let n := mload(data)\\n            mstore(add(m, 0xa0), n)\\n            if n { pop(staticcall(gas(), 4, add(data, 0x20), n, add(m, 0xc0), n)) }\\n            // Revert if the call reverts.\\n            if iszero(call(gas(), to, 0, add(m, 0x1c), add(n, 0xa4), m, 0x20)) {\\n                if returndatasize() {\\n                    // Bubble up the revert if the call reverts.\\n                    returndatacopy(m, 0x00, returndatasize())\\n                    revert(m, returndatasize())\\n                }\\n            }\\n            // Load the returndata and compare it.\\n            if iszero(eq(mload(m), shl(224, onERC721ReceivedSelector))) {\\n                mstore(0x00, 0xd1a57ed6) // `TransferToNonERC721ReceiverImplementer()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99ae3a9add4b6f6ee48d3e993cc4955be419c63d37f567a66e447c9c3239c192\",\"license\":\"MIT\"},\"solady/src/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library to encode strings in Base64.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Base64.sol)\\n/// @author Modified from (https://github.com/Brechtpd/base64/blob/main/base64.sol) by Brecht Devos - <brecht@loopring.org>.\\nlibrary Base64 {\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n    /// @param noPadding Whether to strip away the padding.\\n    function encode(bytes memory data, bool fileSafe, bool noPadding)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let dataLength := mload(data)\\n\\n            if dataLength {\\n                // Multiply by 4/3 rounded up.\\n                // The `shl(2, ...)` is equivalent to multiplying by 4.\\n                let encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n                // Set `result` to point to the start of the free memory.\\n                result := mload(0x40)\\n\\n                // Store the table into the scratch space.\\n                // Offsetted by -1 byte so that the `mload` will load the character.\\n                // We will rewrite the free memory pointer at `0x40` later with\\n                // the allocated size.\\n                // The magic constant 0x0670 will turn \\\"-_\\\" into \\\"+/\\\".\\n                mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n                mstore(0x3f, xor(\\\"ghijklmnopqrstuvwxyz0123456789-_\\\", mul(iszero(fileSafe), 0x0670)))\\n\\n                // Skip the first slot, which stores the length.\\n                let ptr := add(result, 0x20)\\n                let end := add(ptr, encodedLength)\\n\\n                // Run over the input, 3 bytes at a time.\\n                for {} 1 {} {\\n                    data := add(data, 3) // Advance 3 bytes.\\n                    let input := mload(data)\\n\\n                    // Write 4 bytes. Optimized for fewer stack operations.\\n                    mstore8(0, mload(and(shr(18, input), 0x3F)))\\n                    mstore8(1, mload(and(shr(12, input), 0x3F)))\\n                    mstore8(2, mload(and(shr(6, input), 0x3F)))\\n                    mstore8(3, mload(and(input, 0x3F)))\\n                    mstore(ptr, mload(0x00))\\n\\n                    ptr := add(ptr, 4) // Advance 4 bytes.\\n                    if iszero(lt(ptr, end)) { break }\\n                }\\n                mstore(0x40, add(end, 0x20)) // Allocate the memory.\\n                // Equivalent to `o = [0, 2, 1][dataLength % 3]`.\\n                let o := div(2, mod(dataLength, 3))\\n                // Offset `ptr` and pad with '='. We can simply write over the end.\\n                mstore(sub(ptr, o), shl(240, 0x3d3d))\\n                // Set `o` to zero if there is padding.\\n                o := mul(iszero(iszero(noPadding)), o)\\n                mstore(sub(ptr, o), 0) // Zeroize the slot after the string.\\n                mstore(result, sub(encodedLength, o)) // Store the length.\\n            }\\n        }\\n    }\\n\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// Equivalent to `encode(data, false, false)`.\\n    function encode(bytes memory data) internal pure returns (string memory result) {\\n        result = encode(data, false, false);\\n    }\\n\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// Equivalent to `encode(data, fileSafe, false)`.\\n    function encode(bytes memory data, bool fileSafe)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = encode(data, fileSafe, false);\\n    }\\n\\n    /// @dev Decodes base64 encoded `data`.\\n    ///\\n    /// Supports:\\n    /// - RFC 4648 (both standard and file-safe mode).\\n    /// - RFC 3501 (63: ',').\\n    ///\\n    /// Does not support:\\n    /// - Line breaks.\\n    ///\\n    /// Note: For performance reasons,\\n    /// this function will NOT revert on invalid `data` inputs.\\n    /// Outputs for invalid inputs will simply be undefined behaviour.\\n    /// It is the user's responsibility to ensure that the `data`\\n    /// is a valid base64 encoded string.\\n    function decode(string memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let dataLength := mload(data)\\n\\n            if dataLength {\\n                let decodedLength := mul(shr(2, dataLength), 3)\\n\\n                for {} 1 {} {\\n                    // If padded.\\n                    if iszero(and(dataLength, 3)) {\\n                        let t := xor(mload(add(data, dataLength)), 0x3d3d)\\n                        // forgefmt: disable-next-item\\n                        decodedLength := sub(\\n                            decodedLength,\\n                            add(iszero(byte(30, t)), iszero(byte(31, t)))\\n                        )\\n                        break\\n                    }\\n                    // If non-padded.\\n                    decodedLength := add(decodedLength, sub(and(dataLength, 3), 1))\\n                    break\\n                }\\n                result := mload(0x40)\\n\\n                // Write the length of the bytes.\\n                mstore(result, decodedLength)\\n\\n                // Skip the first slot, which stores the length.\\n                let ptr := add(result, 0x20)\\n                let end := add(ptr, decodedLength)\\n\\n                // Load the table into the scratch space.\\n                // Constants are optimized for smaller bytecode with zero gas overhead.\\n                // `m` also doubles as the mask of the upper 6 bits.\\n                let m := 0xfc000000fc00686c7074787c8084888c9094989ca0a4a8acb0b4b8bcc0c4c8cc\\n                mstore(0x5b, m)\\n                mstore(0x3b, 0x04080c1014181c2024282c3034383c4044484c5054585c6064)\\n                mstore(0x1a, 0xf8fcf800fcd0d4d8dce0e4e8ecf0f4)\\n\\n                for {} 1 {} {\\n                    // Read 4 bytes.\\n                    data := add(data, 4)\\n                    let input := mload(data)\\n\\n                    // Write 3 bytes.\\n                    // forgefmt: disable-next-item\\n                    mstore(ptr, or(\\n                        and(m, mload(byte(28, input))),\\n                        shr(6, or(\\n                            and(m, mload(byte(29, input))),\\n                            shr(6, or(\\n                                and(m, mload(byte(30, input))),\\n                                shr(6, mload(byte(31, input)))\\n                            ))\\n                        ))\\n                    ))\\n                    ptr := add(ptr, 3)\\n                    if iszero(lt(ptr, end)) { break }\\n                }\\n                mstore(0x40, add(end, 0x20)) // Allocate the memory.\\n                mstore(end, 0) // Zeroize the slot after the bytes.\\n                mstore(0x60, 0) // Restore the zero slot.\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb277952f747b4d4b096b94d5ff9aa540a87af1cac16088dd0440b42612a189bb\",\"license\":\"MIT\"},\"solady/src/utils/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Contract for EIP-712 typed structured data hashing and signing.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/EIP712.sol)\\n/// @author Modified from Solbase (https://github.com/Sol-DAO/solbase/blob/main/src/utils/EIP712.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/EIP712.sol)\\n///\\n/// @dev Note, this implementation:\\n/// - Uses `address(this)` for the `verifyingContract` field.\\n/// - Does NOT use the optional EIP-712 salt.\\n/// - Does NOT use any EIP-712 extensions.\\n/// This is for simplicity and to save gas.\\n/// If you need to customize, please fork / modify accordingly.\\nabstract contract EIP712 {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  CONSTANTS AND IMMUTABLES                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev `keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")`.\\n    bytes32 internal constant _DOMAIN_TYPEHASH =\\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    uint256 private immutable _cachedThis;\\n    uint256 private immutable _cachedChainId;\\n    bytes32 private immutable _cachedNameHash;\\n    bytes32 private immutable _cachedVersionHash;\\n    bytes32 private immutable _cachedDomainSeparator;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CONSTRUCTOR                         */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Cache the hashes for cheaper runtime gas costs.\\n    /// In the case of upgradeable contracts (i.e. proxies),\\n    /// or if the chain id changes due to a hard fork,\\n    /// the domain separator will be seamlessly calculated on-the-fly.\\n    constructor() {\\n        _cachedThis = uint256(uint160(address(this)));\\n        _cachedChainId = block.chainid;\\n\\n        string memory name;\\n        string memory version;\\n        if (!_domainNameAndVersionMayChange()) (name, version) = _domainNameAndVersion();\\n        bytes32 nameHash = _domainNameAndVersionMayChange() ? bytes32(0) : keccak256(bytes(name));\\n        bytes32 versionHash =\\n            _domainNameAndVersionMayChange() ? bytes32(0) : keccak256(bytes(version));\\n        _cachedNameHash = nameHash;\\n        _cachedVersionHash = versionHash;\\n\\n        bytes32 separator;\\n        if (!_domainNameAndVersionMayChange()) {\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let m := mload(0x40) // Load the free memory pointer.\\n                mstore(m, _DOMAIN_TYPEHASH)\\n                mstore(add(m, 0x20), nameHash)\\n                mstore(add(m, 0x40), versionHash)\\n                mstore(add(m, 0x60), chainid())\\n                mstore(add(m, 0x80), address())\\n                separator := keccak256(m, 0xa0)\\n            }\\n        }\\n        _cachedDomainSeparator = separator;\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   FUNCTIONS TO OVERRIDE                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Please override this function to return the domain name and version.\\n    /// ```\\n    ///     function _domainNameAndVersion()\\n    ///         internal\\n    ///         pure\\n    ///         virtual\\n    ///         returns (string memory name, string memory version)\\n    ///     {\\n    ///         name = \\\"Solady\\\";\\n    ///         version = \\\"1\\\";\\n    ///     }\\n    /// ```\\n    ///\\n    /// Note: If the returned result may change after the contract has been deployed,\\n    /// you must override `_domainNameAndVersionMayChange()` to return true.\\n    function _domainNameAndVersion()\\n        internal\\n        view\\n        virtual\\n        returns (string memory name, string memory version);\\n\\n    /// @dev Returns if `_domainNameAndVersion()` may change\\n    /// after the contract has been deployed (i.e. after the constructor).\\n    /// Default: false.\\n    function _domainNameAndVersionMayChange() internal pure virtual returns (bool result) {}\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     HASHING OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the EIP-712 domain separator.\\n    function _domainSeparator() internal view virtual returns (bytes32 separator) {\\n        if (_domainNameAndVersionMayChange()) {\\n            separator = _buildDomainSeparator();\\n        } else {\\n            separator = _cachedDomainSeparator;\\n            if (_cachedDomainSeparatorInvalidated()) separator = _buildDomainSeparator();\\n        }\\n    }\\n\\n    /// @dev Returns the hash of the fully encoded EIP-712 message for this domain,\\n    /// given `structHash`, as defined in\\n    /// https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct.\\n    ///\\n    /// The hash can be used together with {ECDSA-recover} to obtain the signer of a message:\\n    /// ```\\n    ///     bytes32 digest = _hashTypedData(keccak256(abi.encode(\\n    ///         keccak256(\\\"Mail(address to,string contents)\\\"),\\n    ///         mailTo,\\n    ///         keccak256(bytes(mailContents))\\n    ///     )));\\n    ///     address signer = ECDSA.recover(digest, signature);\\n    /// ```\\n    function _hashTypedData(bytes32 structHash) internal view virtual returns (bytes32 digest) {\\n        // We will use `digest` to store the domain separator to save a bit of gas.\\n        if (_domainNameAndVersionMayChange()) {\\n            digest = _buildDomainSeparator();\\n        } else {\\n            digest = _cachedDomainSeparator;\\n            if (_cachedDomainSeparatorInvalidated()) digest = _buildDomainSeparator();\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Compute the digest.\\n            mstore(0x00, 0x1901000000000000) // Store \\\"\\\\x19\\\\x01\\\".\\n            mstore(0x1a, digest) // Store the domain separator.\\n            mstore(0x3a, structHash) // Store the struct hash.\\n            digest := keccak256(0x18, 0x42)\\n            // Restore the part of the free memory slot that was overwritten.\\n            mstore(0x3a, 0)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                    EIP-5267 OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev See: https://eips.ethereum.org/EIPS/eip-5267\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        fields = hex\\\"0f\\\"; // `0b01111`.\\n        (name, version) = _domainNameAndVersion();\\n        chainId = block.chainid;\\n        verifyingContract = address(this);\\n        salt = salt; // `bytes32(0)`.\\n        extensions = extensions; // `new uint256[](0)`.\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      PRIVATE HELPERS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the EIP-712 domain separator.\\n    function _buildDomainSeparator() private view returns (bytes32 separator) {\\n        // We will use `separator` to store the name hash to save a bit of gas.\\n        bytes32 versionHash;\\n        if (_domainNameAndVersionMayChange()) {\\n            (string memory name, string memory version) = _domainNameAndVersion();\\n            separator = keccak256(bytes(name));\\n            versionHash = keccak256(bytes(version));\\n        } else {\\n            separator = _cachedNameHash;\\n            versionHash = _cachedVersionHash;\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Load the free memory pointer.\\n            mstore(m, _DOMAIN_TYPEHASH)\\n            mstore(add(m, 0x20), separator) // Name hash.\\n            mstore(add(m, 0x40), versionHash)\\n            mstore(add(m, 0x60), chainid())\\n            mstore(add(m, 0x80), address())\\n            separator := keccak256(m, 0xa0)\\n        }\\n    }\\n\\n    /// @dev Returns if the cached domain separator has been invalidated.\\n    function _cachedDomainSeparatorInvalidated() private view returns (bool result) {\\n        uint256 cachedChainId = _cachedChainId;\\n        uint256 cachedThis = _cachedThis;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := iszero(and(eq(chainid(), cachedChainId), eq(address(), cachedThis)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb5c4c8ac5368c9785b4e30314f4ad6f3ae13bdc21679007735681d13da797bec\",\"license\":\"MIT\"},\"solady/src/utils/LibString.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for converting numbers into strings and other string operations.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibString.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/LibString.sol)\\n///\\n/// Note:\\n/// For performance and bytecode compactness, most of the string operations are restricted to\\n/// byte strings (7-bit ASCII), except where otherwise specified.\\n/// Usage of byte string operations on charsets with runes spanning two or more bytes\\n/// can lead to undefined behavior.\\nlibrary LibString {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                        CUSTOM ERRORS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The length of the output is too small to contain all the hex digits.\\n    error HexLengthInsufficient();\\n\\n    /// @dev The length of the string is more than 32 bytes.\\n    error TooBigForSmallString();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The constant returned when the `search` is not found in the string.\\n    uint256 internal constant NOT_FOUND = type(uint256).max;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     DECIMAL OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(uint256 value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits.\\n            str := add(mload(0x40), 0x80)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, add(str, 0x20))\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            let w := not(0) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                str := add(str, w) // `sub(str, 1)`.\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n\\n    /// @dev Returns the base 10 decimal representation of `value`.\\n    function toString(int256 value) internal pure returns (string memory str) {\\n        if (value >= 0) {\\n            return toString(uint256(value));\\n        }\\n        unchecked {\\n            str = toString(uint256(-value));\\n        }\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We still have some spare memory space on the left,\\n            // as we have allocated 3 words (96 bytes) for up to 78 digits.\\n            let length := mload(str) // Load the string length.\\n            mstore(str, 0x2d) // Store the '-' character.\\n            str := sub(str, 1) // Move back the string pointer by a byte.\\n            mstore(str, add(length, 1)) // Update the string length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   HEXADECIMAL OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `length` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `length * 2 + 2` bytes.\\n    /// Reverts if `length` is too small for the output to contain all the digits.\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value, length);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`,\\n    /// left-padded to an input length of `length` bytes.\\n    /// The output is prefixed with \\\"0x\\\" encoded using 2 hexadecimal digits per byte,\\n    /// giving a total length of `length * 2` bytes.\\n    /// Reverts if `length` is too small for the output to contain all the digits.\\n    function toHexStringNoPrefix(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory str)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, `length * 2` bytes\\n            // for the digits, 0x02 bytes for the prefix, and 0x20 bytes for the length.\\n            // We add 0x20 to the total and round down to a multiple of 0x20.\\n            // (0x20 + 0x20 + 0x02 + 0x20) = 0x62.\\n            str := add(mload(0x40), and(add(shl(1, length), 0x42), not(0x1f)))\\n            // Allocate the memory.\\n            mstore(0x40, add(str, 0x20))\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end to calculate the length later.\\n            let end := str\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let start := sub(str, add(length, length))\\n            let w := not(1) // Tsk.\\n            let temp := value\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for {} 1 {} {\\n                str := add(str, w) // `sub(str, 2)`.\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(xor(str, start)) { break }\\n            }\\n\\n            if temp {\\n                mstore(0x00, 0x2194895a) // `HexLengthInsufficient()`.\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Compute the string's length.\\n            let strLength := sub(end, str)\\n            // Move the pointer and write the length.\\n            str := sub(str, 0x20)\\n            mstore(str, strLength)\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2 + 2` bytes.\\n    function toHexString(uint256 value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\".\\n    /// The output excludes leading \\\"0\\\" from the `toHexString` output.\\n    /// `0x00: \\\"0x0\\\", 0x01: \\\"0x1\\\", 0x12: \\\"0x12\\\", 0x123: \\\"0x123\\\"`.\\n    function toMinimalHexString(uint256 value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(add(str, o), 0x3078) // Write the \\\"0x\\\" prefix, accounting for leading zero.\\n            str := sub(add(str, o), 2) // Move the pointer, accounting for leading zero.\\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output excludes leading \\\"0\\\" from the `toHexStringNoPrefix` output.\\n    /// `0x00: \\\"0\\\", 0x01: \\\"1\\\", 0x12: \\\"12\\\", 0x123: \\\"123\\\"`.\\n    function toMinimalHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let o := eq(byte(0, mload(add(str, 0x20))), 0x30) // Whether leading zero is present.\\n            let strLength := mload(str) // Get the length.\\n            str := add(str, o) // Move the pointer, accounting for leading zero.\\n            mstore(str, sub(strLength, o)) // Write the length, accounting for leading zero.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    /// As address are 20 bytes long, the output will left-padded to have\\n    /// a length of `20 * 2` bytes.\\n    function toHexStringNoPrefix(uint256 value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x40 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x40) is 0xa0.\\n            str := add(mload(0x40), 0x80)\\n            // Allocate the memory.\\n            mstore(0x40, add(str, 0x20))\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end to calculate the length later.\\n            let end := str\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let w := not(1) // Tsk.\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let temp := value } 1 {} {\\n                str := add(str, w) // `sub(str, 2)`.\\n                mstore8(add(str, 1), mload(and(temp, 15)))\\n                mstore8(str, mload(and(shr(4, temp), 15)))\\n                temp := shr(8, temp)\\n                if iszero(temp) { break }\\n            }\\n\\n            // Compute the string's length.\\n            let strLength := sub(end, str)\\n            // Move the pointer and write the length.\\n            str := sub(str, 0x20)\\n            mstore(str, strLength)\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\", encoded using 2 hexadecimal digits per byte,\\n    /// and the alphabets are capitalized conditionally according to\\n    /// https://eips.ethereum.org/EIPS/eip-55\\n    function toHexStringChecksummed(address value) internal pure returns (string memory str) {\\n        str = toHexString(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(6, div(not(0), 255)) // `0b010000000100000000 ...`\\n            let o := add(str, 0x22)\\n            let hashed := and(keccak256(o, 40), mul(34, mask)) // `0b10001000 ... `\\n            let t := shl(240, 136) // `0b10001000 << 240`\\n            for { let i := 0 } 1 {} {\\n                mstore(add(i, i), mul(t, byte(i, hashed)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x00), and(mload(o), mask)))))\\n            o := add(o, 0x20)\\n            mstore(o, xor(mload(o), shr(1, and(mload(0x20), and(mload(o), mask)))))\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is prefixed with \\\"0x\\\" and encoded using 2 hexadecimal digits per byte.\\n    function toHexString(address value) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(value);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hexadecimal representation of `value`.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(address value) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            str := mload(0x40)\\n\\n            // Allocate the memory.\\n            // We need 0x20 bytes for the trailing zeros padding, 0x20 bytes for the length,\\n            // 0x02 bytes for the prefix, and 0x28 bytes for the digits.\\n            // The next multiple of 0x20 above (0x20 + 0x20 + 0x02 + 0x28) is 0x80.\\n            mstore(0x40, add(str, 0x80))\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            str := add(str, 2)\\n            mstore(str, 40)\\n\\n            let o := add(str, 0x20)\\n            mstore(add(o, 40), 0)\\n\\n            value := shl(96, value)\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            for { let i := 0 } 1 {} {\\n                let p := add(o, add(i, i))\\n                let temp := byte(i, value)\\n                mstore8(add(p, 1), mload(and(temp, 15)))\\n                mstore8(p, mload(shr(4, temp)))\\n                i := add(i, 1)\\n                if eq(i, 20) { break }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexString(bytes memory raw) internal pure returns (string memory str) {\\n        str = toHexStringNoPrefix(raw);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let strLength := add(mload(str), 2) // Compute the length.\\n            mstore(str, 0x3078) // Write the \\\"0x\\\" prefix.\\n            str := sub(str, 2) // Move the pointer.\\n            mstore(str, strLength) // Write the length.\\n        }\\n    }\\n\\n    /// @dev Returns the hex encoded string from the raw bytes.\\n    /// The output is encoded using 2 hexadecimal digits per byte.\\n    function toHexStringNoPrefix(bytes memory raw) internal pure returns (string memory str) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let length := mload(raw)\\n            str := add(mload(0x40), 2) // Skip 2 bytes for the optional prefix.\\n            mstore(str, add(length, length)) // Store the length of the output.\\n\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            mstore(0x0f, 0x30313233343536373839616263646566)\\n\\n            let o := add(str, 0x20)\\n            let end := add(raw, length)\\n\\n            for {} iszero(eq(raw, end)) {} {\\n                raw := add(raw, 1)\\n                mstore8(add(o, 1), mload(and(mload(raw), 15)))\\n                mstore8(o, mload(and(shr(4, mload(raw)), 15)))\\n                o := add(o, 2)\\n            }\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RUNE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns the number of UTF characters in the string.\\n    function runeCount(string memory s) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(s) {\\n                mstore(0x00, div(not(0), 255))\\n                mstore(0x20, 0x0202020202020202020202020202020202020202020202020303030304040506)\\n                let o := add(s, 0x20)\\n                let end := add(o, mload(s))\\n                for { result := 1 } 1 { result := add(result, 1) } {\\n                    o := add(o, byte(0, mload(shr(250, mload(o)))))\\n                    if iszero(lt(o, end)) { break }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns if this string is a 7-bit ASCII string.\\n    /// (i.e. all characters codes are in [0..127])\\n    function is7BitASCII(string memory s) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let mask := shl(7, div(not(0), 255))\\n            result := 1\\n            let n := mload(s)\\n            if n {\\n                let o := add(s, 0x20)\\n                let end := add(o, n)\\n                let last := mload(end)\\n                mstore(end, 0)\\n                for {} 1 {} {\\n                    if and(mask, mload(o)) {\\n                        result := 0\\n                        break\\n                    }\\n                    o := add(o, 0x20)\\n                    if iszero(lt(o, end)) { break }\\n                }\\n                mstore(end, last)\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   BYTE STRING OPERATIONS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // For performance and bytecode compactness, byte string operations are restricted\\n    // to 7-bit ASCII strings. All offsets are byte offsets, not UTF character offsets.\\n    // Usage of byte string operations on charsets with runes spanning two or more bytes\\n    // can lead to undefined behavior.\\n\\n    /// @dev Returns `subject` all occurrences of `search` replaced with `replacement`.\\n    function replace(string memory subject, string memory search, string memory replacement)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            let searchLength := mload(search)\\n            let replacementLength := mload(replacement)\\n\\n            subject := add(subject, 0x20)\\n            search := add(search, 0x20)\\n            replacement := add(replacement, 0x20)\\n            result := add(mload(0x40), 0x20)\\n\\n            let subjectEnd := add(subject, subjectLength)\\n            if iszero(gt(searchLength, subjectLength)) {\\n                let subjectSearchEnd := add(sub(subjectEnd, searchLength), 1)\\n                let h := 0\\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\n                let s := mload(search)\\n                for {} 1 {} {\\n                    let t := mload(subject)\\n                    // Whether the first `searchLength % 32` bytes of\\n                    // `subject` and `search` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\n                                mstore(result, t)\\n                                result := add(result, 1)\\n                                subject := add(subject, 1)\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Copy the `replacement` one word at a time.\\n                        for { let o := 0 } 1 {} {\\n                            mstore(add(result, o), mload(add(replacement, o)))\\n                            o := add(o, 0x20)\\n                            if iszero(lt(o, replacementLength)) { break }\\n                        }\\n                        result := add(result, replacementLength)\\n                        subject := add(subject, searchLength)\\n                        if searchLength {\\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    mstore(result, t)\\n                    result := add(result, 1)\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\n                }\\n            }\\n\\n            let resultRemainder := result\\n            result := add(mload(0x40), 0x20)\\n            let k := add(sub(resultRemainder, result), sub(subjectEnd, subject))\\n            // Copy the rest of the string one word at a time.\\n            for {} lt(subject, subjectEnd) {} {\\n                mstore(resultRemainder, mload(subject))\\n                resultRemainder := add(resultRemainder, 0x20)\\n                subject := add(subject, 0x20)\\n            }\\n            result := sub(result, 0x20)\\n            let last := add(add(result, 0x20), k) // Zeroize the slot after the string.\\n            mstore(last, 0)\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\n            mstore(result, k) // Store the length.\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from left to right, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function indexOf(string memory subject, string memory search, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { let subjectLength := mload(subject) } 1 {} {\\n                if iszero(mload(search)) {\\n                    if iszero(gt(from, subjectLength)) {\\n                        result := from\\n                        break\\n                    }\\n                    result := subjectLength\\n                    break\\n                }\\n                let searchLength := mload(search)\\n                let subjectStart := add(subject, 0x20)\\n\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n\\n                subject := add(subjectStart, from)\\n                let end := add(sub(add(subjectStart, subjectLength), searchLength), 1)\\n\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\n                let s := mload(add(search, 0x20))\\n\\n                if iszero(and(lt(subject, end), lt(from, subjectLength))) { break }\\n\\n                if iszero(lt(searchLength, 0x20)) {\\n                    for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\\n                        if iszero(shr(m, xor(mload(subject), s))) {\\n                            if eq(keccak256(subject, searchLength), h) {\\n                                result := sub(subject, subjectStart)\\n                                break\\n                            }\\n                        }\\n                        subject := add(subject, 1)\\n                        if iszero(lt(subject, end)) { break }\\n                    }\\n                    break\\n                }\\n                for {} 1 {} {\\n                    if iszero(shr(m, xor(mload(subject), s))) {\\n                        result := sub(subject, subjectStart)\\n                        break\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from left to right.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function indexOf(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = indexOf(subject, search, 0);\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from right to left, starting from `from`.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function lastIndexOf(string memory subject, string memory search, uint256 from)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                result := not(0) // Initialize to `NOT_FOUND`.\\n                let searchLength := mload(search)\\n                if gt(searchLength, mload(subject)) { break }\\n                let w := result\\n\\n                let fromMax := sub(mload(subject), searchLength)\\n                if iszero(gt(fromMax, from)) { from := fromMax }\\n\\n                let end := add(add(subject, 0x20), w)\\n                subject := add(add(subject, 0x20), from)\\n                if iszero(gt(subject, end)) { break }\\n                // As this function is not too often used,\\n                // we shall simply use keccak256 for smaller bytecode size.\\n                for { let h := keccak256(add(search, 0x20), searchLength) } 1 {} {\\n                    if eq(keccak256(subject, searchLength), h) {\\n                        result := sub(subject, add(end, 1))\\n                        break\\n                    }\\n                    subject := add(subject, w) // `sub(subject, 1)`.\\n                    if iszero(gt(subject, end)) { break }\\n                }\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the byte index of the first location of `search` in `subject`,\\n    /// searching from right to left.\\n    /// Returns `NOT_FOUND` (i.e. `type(uint256).max`) if the `search` is not found.\\n    function lastIndexOf(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = lastIndexOf(subject, search, uint256(int256(-1)));\\n    }\\n\\n    /// @dev Returns true if `search` is found in `subject`, false otherwise.\\n    function contains(string memory subject, string memory search) internal pure returns (bool) {\\n        return indexOf(subject, search) != NOT_FOUND;\\n    }\\n\\n    /// @dev Returns whether `subject` starts with `search`.\\n    function startsWith(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLength := mload(search)\\n            // Just using keccak256 directly is actually cheaper.\\n            // forgefmt: disable-next-item\\n            result := and(\\n                iszero(gt(searchLength, mload(subject))),\\n                eq(\\n                    keccak256(add(subject, 0x20), searchLength),\\n                    keccak256(add(search, 0x20), searchLength)\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns whether `subject` ends with `search`.\\n    function endsWith(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (bool result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let searchLength := mload(search)\\n            let subjectLength := mload(subject)\\n            // Whether `search` is not longer than `subject`.\\n            let withinRange := iszero(gt(searchLength, subjectLength))\\n            // Just using keccak256 directly is actually cheaper.\\n            // forgefmt: disable-next-item\\n            result := and(\\n                withinRange,\\n                eq(\\n                    keccak256(\\n                        // `subject + 0x20 + max(subjectLength - searchLength, 0)`.\\n                        add(add(subject, 0x20), mul(withinRange, sub(subjectLength, searchLength))),\\n                        searchLength\\n                    ),\\n                    keccak256(add(search, 0x20), searchLength)\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns `subject` repeated `times`.\\n    function repeat(string memory subject, uint256 times)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            if iszero(or(iszero(times), iszero(subjectLength))) {\\n                subject := add(subject, 0x20)\\n                result := mload(0x40)\\n                let output := add(result, 0x20)\\n                for {} 1 {} {\\n                    // Copy the `subject` one word at a time.\\n                    for { let o := 0 } 1 {} {\\n                        mstore(add(output, o), mload(add(subject, o)))\\n                        o := add(o, 0x20)\\n                        if iszero(lt(o, subjectLength)) { break }\\n                    }\\n                    output := add(output, subjectLength)\\n                    times := sub(times, 1)\\n                    if iszero(times) { break }\\n                }\\n                mstore(output, 0) // Zeroize the slot after the string.\\n                let resultLength := sub(output, add(result, 0x20))\\n                mstore(result, resultLength) // Store the length.\\n                // Allocate the memory.\\n                mstore(0x40, add(result, add(resultLength, 0x20)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to `end` (exclusive).\\n    /// `start` and `end` are byte offsets.\\n    function slice(string memory subject, uint256 start, uint256 end)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            if iszero(gt(subjectLength, end)) { end := subjectLength }\\n            if iszero(gt(subjectLength, start)) { start := subjectLength }\\n            if lt(start, end) {\\n                result := mload(0x40)\\n                let resultLength := sub(end, start)\\n                mstore(result, resultLength)\\n                subject := add(subject, start)\\n                let w := not(0x1f)\\n                // Copy the `subject` one word at a time, backwards.\\n                for { let o := and(add(resultLength, 0x1f), w) } 1 {} {\\n                    mstore(add(result, o), mload(add(subject, o)))\\n                    o := add(o, w) // `sub(o, 0x20)`.\\n                    if iszero(o) { break }\\n                }\\n                // Zeroize the slot after the string.\\n                mstore(add(add(result, 0x20), resultLength), 0)\\n                // Allocate memory for the length and the bytes,\\n                // rounded up to a multiple of 32.\\n                mstore(0x40, add(result, and(add(resultLength, 0x3f), w)))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a copy of `subject` sliced from `start` to the end of the string.\\n    /// `start` is a byte offset.\\n    function slice(string memory subject, uint256 start)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        result = slice(subject, start, uint256(int256(-1)));\\n    }\\n\\n    /// @dev Returns all the indices of `search` in `subject`.\\n    /// The indices are byte offsets.\\n    function indicesOf(string memory subject, string memory search)\\n        internal\\n        pure\\n        returns (uint256[] memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let subjectLength := mload(subject)\\n            let searchLength := mload(search)\\n\\n            if iszero(gt(searchLength, subjectLength)) {\\n                subject := add(subject, 0x20)\\n                search := add(search, 0x20)\\n                result := add(mload(0x40), 0x20)\\n\\n                let subjectStart := subject\\n                let subjectSearchEnd := add(sub(add(subject, subjectLength), searchLength), 1)\\n                let h := 0\\n                if iszero(lt(searchLength, 0x20)) { h := keccak256(search, searchLength) }\\n                let m := shl(3, sub(0x20, and(searchLength, 0x1f)))\\n                let s := mload(search)\\n                for {} 1 {} {\\n                    let t := mload(subject)\\n                    // Whether the first `searchLength % 32` bytes of\\n                    // `subject` and `search` matches.\\n                    if iszero(shr(m, xor(t, s))) {\\n                        if h {\\n                            if iszero(eq(keccak256(subject, searchLength), h)) {\\n                                subject := add(subject, 1)\\n                                if iszero(lt(subject, subjectSearchEnd)) { break }\\n                                continue\\n                            }\\n                        }\\n                        // Append to `result`.\\n                        mstore(result, sub(subject, subjectStart))\\n                        result := add(result, 0x20)\\n                        // Advance `subject` by `searchLength`.\\n                        subject := add(subject, searchLength)\\n                        if searchLength {\\n                            if iszero(lt(subject, subjectSearchEnd)) { break }\\n                            continue\\n                        }\\n                    }\\n                    subject := add(subject, 1)\\n                    if iszero(lt(subject, subjectSearchEnd)) { break }\\n                }\\n                let resultEnd := result\\n                // Assign `result` to the free memory pointer.\\n                result := mload(0x40)\\n                // Store the length of `result`.\\n                mstore(result, shr(5, sub(resultEnd, add(result, 0x20))))\\n                // Allocate memory for result.\\n                // We allocate one more word, so this array can be recycled for {split}.\\n                mstore(0x40, add(resultEnd, 0x20))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a arrays of strings based on the `delimiter` inside of the `subject` string.\\n    function split(string memory subject, string memory delimiter)\\n        internal\\n        pure\\n        returns (string[] memory result)\\n    {\\n        uint256[] memory indices = indicesOf(subject, delimiter);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            let indexPtr := add(indices, 0x20)\\n            let indicesEnd := add(indexPtr, shl(5, add(mload(indices), 1)))\\n            mstore(add(indicesEnd, w), mload(subject))\\n            mstore(indices, add(mload(indices), 1))\\n            let prevIndex := 0\\n            for {} 1 {} {\\n                let index := mload(indexPtr)\\n                mstore(indexPtr, 0x60)\\n                if iszero(eq(index, prevIndex)) {\\n                    let element := mload(0x40)\\n                    let elementLength := sub(index, prevIndex)\\n                    mstore(element, elementLength)\\n                    // Copy the `subject` one word at a time, backwards.\\n                    for { let o := and(add(elementLength, 0x1f), w) } 1 {} {\\n                        mstore(add(element, o), mload(add(add(subject, prevIndex), o)))\\n                        o := add(o, w) // `sub(o, 0x20)`.\\n                        if iszero(o) { break }\\n                    }\\n                    // Zeroize the slot after the string.\\n                    mstore(add(add(element, 0x20), elementLength), 0)\\n                    // Allocate memory for the length and the bytes,\\n                    // rounded up to a multiple of 32.\\n                    mstore(0x40, add(element, and(add(elementLength, 0x3f), w)))\\n                    // Store the `element` into the array.\\n                    mstore(indexPtr, element)\\n                }\\n                prevIndex := add(index, mload(delimiter))\\n                indexPtr := add(indexPtr, 0x20)\\n                if iszero(lt(indexPtr, indicesEnd)) { break }\\n            }\\n            result := indices\\n            if iszero(mload(delimiter)) {\\n                result := add(indices, 0x20)\\n                mstore(result, sub(mload(indices), 2))\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a concatenated string of `a` and `b`.\\n    /// Cheaper than `string.concat()` and does not de-align the free memory pointer.\\n    function concat(string memory a, string memory b)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let w := not(0x1f)\\n            result := mload(0x40)\\n            let aLength := mload(a)\\n            // Copy `a` one word at a time, backwards.\\n            for { let o := and(add(aLength, 0x20), w) } 1 {} {\\n                mstore(add(result, o), mload(add(a, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let bLength := mload(b)\\n            let output := add(result, aLength)\\n            // Copy `b` one word at a time, backwards.\\n            for { let o := and(add(bLength, 0x20), w) } 1 {} {\\n                mstore(add(output, o), mload(add(b, o)))\\n                o := add(o, w) // `sub(o, 0x20)`.\\n                if iszero(o) { break }\\n            }\\n            let totalLength := add(aLength, bLength)\\n            let last := add(add(result, 0x20), totalLength)\\n            // Zeroize the slot after the string.\\n            mstore(last, 0)\\n            // Stores the length.\\n            mstore(result, totalLength)\\n            // Allocate memory for the length and the bytes,\\n            // rounded up to a multiple of 32.\\n            mstore(0x40, and(add(last, 0x1f), w))\\n        }\\n    }\\n\\n    /// @dev Returns a copy of the string in either lowercase or UPPERCASE.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function toCase(string memory subject, bool toUpper)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let length := mload(subject)\\n            if length {\\n                result := add(mload(0x40), 0x20)\\n                subject := add(subject, 1)\\n                let flags := shl(add(70, shl(5, toUpper)), 0x3ffffff)\\n                let w := not(0)\\n                for { let o := length } 1 {} {\\n                    o := add(o, w)\\n                    let b := and(0xff, mload(add(subject, o)))\\n                    mstore8(add(result, o), xor(b, and(shr(b, flags), 0x20)))\\n                    if iszero(o) { break }\\n                }\\n                result := mload(0x40)\\n                mstore(result, length) // Store the length.\\n                let last := add(add(result, 0x20), length)\\n                mstore(last, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(last, 0x20)) // Allocate the memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a string from a small bytes32 string.\\n    /// `s` must be null-terminated, or behavior will be undefined.\\n    function fromSmallString(bytes32 s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let n := 0\\n            for {} byte(n, s) { n := add(n, 1) } {} // Scan for '\\\\0'.\\n            mstore(result, n)\\n            let o := add(result, 0x20)\\n            mstore(o, s)\\n            mstore(add(o, n), 0)\\n            mstore(0x40, add(result, 0x40))\\n        }\\n    }\\n\\n    /// @dev Returns the small string, with all bytes after the first null byte zeroized.\\n    function normalizeSmallString(bytes32 s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} byte(result, s) { result := add(result, 1) } {} // Scan for '\\\\0'.\\n            mstore(0x00, s)\\n            mstore(result, 0x00)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /// @dev Returns the string as a normalized null-terminated small string.\\n    function toSmallString(string memory s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(s)\\n            if iszero(lt(result, 33)) {\\n                mstore(0x00, 0xec92f9a3) // `TooBigForSmallString()`.\\n                revert(0x1c, 0x04)\\n            }\\n            result := shl(shl(3, sub(32, result)), mload(add(s, result)))\\n        }\\n    }\\n\\n    /// @dev Returns a lowercased copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function lower(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, false);\\n    }\\n\\n    /// @dev Returns an UPPERCASED copy of the string.\\n    /// WARNING! This function is only compatible with 7-bit ASCII strings.\\n    function upper(string memory subject) internal pure returns (string memory result) {\\n        result = toCase(subject, true);\\n    }\\n\\n    /// @dev Escapes the string to be used within HTML tags.\\n    function escapeHTML(string memory s) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let end := add(s, mload(s))\\n            result := add(mload(0x40), 0x20)\\n            // Store the bytes of the packed offsets and strides into the scratch space.\\n            // `packed = (stride << 5) | offset`. Max offset is 20. Max stride is 6.\\n            mstore(0x1f, 0x900094)\\n            mstore(0x08, 0xc0000000a6ab)\\n            // Store \\\"&quot;&amp;&#39;&lt;&gt;\\\" into the scratch space.\\n            mstore(0x00, shl(64, 0x2671756f743b26616d703b262333393b266c743b2667743b))\\n            for {} iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                // Not in `[\\\"\\\\\\\"\\\",\\\"'\\\",\\\"&\\\",\\\"<\\\",\\\">\\\"]`.\\n                if iszero(and(shl(c, 1), 0x500000c400000000)) {\\n                    mstore8(result, c)\\n                    result := add(result, 1)\\n                    continue\\n                }\\n                let t := shr(248, mload(c))\\n                mstore(result, mload(and(t, 0x1f)))\\n                result := add(result, shr(5, t))\\n            }\\n            let last := result\\n            mstore(last, 0) // Zeroize the slot after the string.\\n            result := mload(0x40)\\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    /// If `addDoubleQuotes` is true, the result will be enclosed in double-quotes.\\n    function escapeJSON(string memory s, bool addDoubleQuotes)\\n        internal\\n        pure\\n        returns (string memory result)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let end := add(s, mload(s))\\n            result := add(mload(0x40), 0x20)\\n            if addDoubleQuotes {\\n                mstore8(result, 34)\\n                result := add(1, result)\\n            }\\n            // Store \\\"\\\\\\\\u0000\\\" in scratch space.\\n            // Store \\\"0123456789abcdef\\\" in scratch space.\\n            // Also, store `{0x08:\\\"b\\\", 0x09:\\\"t\\\", 0x0a:\\\"n\\\", 0x0c:\\\"f\\\", 0x0d:\\\"r\\\"}`.\\n            // into the scratch space.\\n            mstore(0x15, 0x5c75303030303031323334353637383961626364656662746e006672)\\n            // Bitmask for detecting `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n            let e := or(shl(0x22, 1), shl(0x5c, 1))\\n            for {} iszero(eq(s, end)) {} {\\n                s := add(s, 1)\\n                let c := and(mload(s), 0xff)\\n                if iszero(lt(c, 0x20)) {\\n                    if iszero(and(shl(c, 1), e)) {\\n                        // Not in `[\\\"\\\\\\\"\\\",\\\"\\\\\\\\\\\"]`.\\n                        mstore8(result, c)\\n                        result := add(result, 1)\\n                        continue\\n                    }\\n                    mstore8(result, 0x5c) // \\\"\\\\\\\\\\\".\\n                    mstore8(add(result, 1), c)\\n                    result := add(result, 2)\\n                    continue\\n                }\\n                if iszero(and(shl(c, 1), 0x3700)) {\\n                    // Not in `[\\\"\\\\b\\\",\\\"\\\\t\\\",\\\"\\\\n\\\",\\\"\\\\f\\\",\\\"\\\\d\\\"]`.\\n                    mstore8(0x1d, mload(shr(4, c))) // Hex value.\\n                    mstore8(0x1e, mload(and(c, 15))) // Hex value.\\n                    mstore(result, mload(0x19)) // \\\"\\\\\\\\u00XX\\\".\\n                    result := add(result, 6)\\n                    continue\\n                }\\n                mstore8(result, 0x5c) // \\\"\\\\\\\\\\\".\\n                mstore8(add(result, 1), mload(add(c, 8)))\\n                result := add(result, 2)\\n            }\\n            if addDoubleQuotes {\\n                mstore8(result, 34)\\n                result := add(1, result)\\n            }\\n            let last := result\\n            mstore(last, 0) // Zeroize the slot after the string.\\n            result := mload(0x40)\\n            mstore(result, sub(last, add(result, 0x20))) // Store the length.\\n            mstore(0x40, add(last, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /// @dev Escapes the string to be used within double-quotes in a JSON.\\n    function escapeJSON(string memory s) internal pure returns (string memory result) {\\n        result = escapeJSON(s, false);\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`.\\n    function eq(string memory a, string memory b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := eq(keccak256(add(a, 0x20), mload(a)), keccak256(add(b, 0x20), mload(b)))\\n        }\\n    }\\n\\n    /// @dev Returns whether `a` equals `b`, where `b` is a null-terminated small string.\\n    function eqs(string memory a, bytes32 b) internal pure returns (bool result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // These should be evaluated on compile time, as far as possible.\\n            let m := not(shl(7, div(not(iszero(b)), 255))) // `0x7f7f ...`.\\n            let x := not(or(m, or(b, add(m, and(b, m)))))\\n            let r := shl(7, iszero(iszero(shr(128, x))))\\n            r := or(r, shl(6, iszero(iszero(shr(64, shr(r, x))))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            result := gt(eq(mload(a), add(iszero(x), xor(31, shr(3, r)))),\\n                xor(shr(add(8, r), b), shr(add(8, r), mload(add(a, 0x20)))))\\n        }\\n    }\\n\\n    /// @dev Packs a single string with its length into a single word.\\n    /// Returns `bytes32(0)` if the length is zero or greater than 31.\\n    function packOne(string memory a) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We don't need to zero right pad the string,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes.\\n                    mload(add(a, 0x1f)),\\n                    // `length != 0 && length < 32`. Abuses underflow.\\n                    // Assumes that the length is valid and within the block gas limit.\\n                    lt(sub(mload(a), 1), 0x1f)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks a string packed using {packOne}.\\n    /// Returns the empty string if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packOne}, the output behavior is undefined.\\n    function unpackOne(bytes32 packed) internal pure returns (string memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Grab the free memory pointer.\\n            result := mload(0x40)\\n            // Allocate 2 words (1 for the length, 1 for the bytes).\\n            mstore(0x40, add(result, 0x40))\\n            // Zeroize the length slot.\\n            mstore(result, 0)\\n            // Store the length and bytes.\\n            mstore(add(result, 0x1f), packed)\\n            // Right pad with zeroes.\\n            mstore(add(add(result, 0x20), mload(result)), 0)\\n        }\\n    }\\n\\n    /// @dev Packs two strings with their lengths into a single word.\\n    /// Returns `bytes32(0)` if combined length is zero or greater than 30.\\n    function packTwo(string memory a, string memory b) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let aLength := mload(a)\\n            // We don't need to zero right pad the strings,\\n            // since this is our own custom non-standard packing scheme.\\n            result :=\\n                mul(\\n                    // Load the length and the bytes of `a` and `b`.\\n                    or(\\n                        shl(shl(3, sub(0x1f, aLength)), mload(add(a, aLength))),\\n                        mload(sub(add(b, 0x1e), aLength))\\n                    ),\\n                    // `totalLength != 0 && totalLength < 31`. Abuses underflow.\\n                    // Assumes that the lengths are valid and within the block gas limit.\\n                    lt(sub(add(aLength, mload(b)), 1), 0x1e)\\n                )\\n        }\\n    }\\n\\n    /// @dev Unpacks strings packed using {packTwo}.\\n    /// Returns the empty strings if `packed` is `bytes32(0)`.\\n    /// If `packed` is not an output of {packTwo}, the output behavior is undefined.\\n    function unpackTwo(bytes32 packed)\\n        internal\\n        pure\\n        returns (string memory resultA, string memory resultB)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Grab the free memory pointer.\\n            resultA := mload(0x40)\\n            resultB := add(resultA, 0x40)\\n            // Allocate 2 words for each string (1 for the length, 1 for the byte). Total 4 words.\\n            mstore(0x40, add(resultB, 0x40))\\n            // Zeroize the length slots.\\n            mstore(resultA, 0)\\n            mstore(resultB, 0)\\n            // Store the lengths and bytes.\\n            mstore(add(resultA, 0x1f), packed)\\n            mstore(add(resultB, 0x1f), mload(add(add(resultA, 0x20), mload(resultA))))\\n            // Right pad with zeroes.\\n            mstore(add(add(resultA, 0x20), mload(resultA)), 0)\\n            mstore(add(add(resultB, 0x20), mload(resultB)), 0)\\n        }\\n    }\\n\\n    /// @dev Directly returns `a` without copying.\\n    function directReturn(string memory a) internal pure {\\n        assembly {\\n            // Assumes that the string does not start from the scratch space.\\n            let retStart := sub(a, 0x20)\\n            let retSize := add(mload(a), 0x40)\\n            // Right pad with zeroes. Just in case the string is produced\\n            // by a method that doesn't zero right pad.\\n            mstore(add(retStart, retSize), 0)\\n            // Store the return offset.\\n            mstore(retStart, 0x20)\\n            // End the transaction, returning the string.\\n            return(retStart, retSize)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74ec81acbea6db4afe149ab51e26961bcb801af42f7af98242be71b866066200\",\"license\":\"MIT\"},\"solady/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n///\\n/// @dev Note:\\n/// - For ETH transfers, please use `forceSafeTransferETH` for DoS protection.\\n/// - For ERC20s, this implementation won't check that a token has code,\\n///   responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH that disallows any storage writes.\\n    uint256 internal constant GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    uint256 internal constant GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    // If the ETH transfer MUST succeed with a reasonable gas budget, use the force variants.\\n    //\\n    // The regular variants:\\n    // - Forwards all remaining gas to the target.\\n    // - Reverts if the target reverts.\\n    // - Reverts if the current contract has insufficient balance.\\n    //\\n    // The force variants:\\n    // - Forwards with an optional gas stipend\\n    //   (defaults to `GAS_STIPEND_NO_GRIEF`, which is sufficient for most cases).\\n    // - If the target reverts, or if the gas stipend is exhausted,\\n    //   creates a temporary contract to force send the ETH via `SELFDESTRUCT`.\\n    //   Future compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758.\\n    // - Reverts if the current contract has insufficient balance.\\n    //\\n    // The try variants:\\n    // - Forwards with a mandatory gas stipend.\\n    // - Instead of reverting, returns whether the transfer succeeded.\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(call(gas(), to, amount, codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends all the ETH in the current contract to `to`.\\n    function safeTransferAllETH(address to) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer all the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if lt(selfbalance(), amount) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if iszero(call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends all the ETH in the current contract to `to`, with a `gasStipend`.\\n    function forceSafeTransferAllETH(address to, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with `GAS_STIPEND_NO_GRIEF`.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if lt(selfbalance(), amount) {\\n                mstore(0x00, 0xb12d13eb) // `ETHTransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, amount, codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(amount, 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends all the ETH in the current contract to `to`, with `GAS_STIPEND_NO_GRIEF`.\\n    function forceSafeTransferAllETH(address to) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // forgefmt: disable-next-item\\n            if iszero(call(GAS_STIPEND_NO_GRIEF, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                if iszero(create(selfbalance(), 0x0b, 0x16)) { revert(codesize(), codesize()) } // For gas estimation.\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            success := call(gasStipend, to, amount, codesize(), 0x00, codesize(), 0x00)\\n        }\\n    }\\n\\n    /// @dev Sends all the ETH in the current contract to `to`, with a `gasStipend`.\\n    function trySafeTransferAllETH(address to, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            success := call(gasStipend, to, selfbalance(), codesize(), 0x00, codesize(), 0x00)\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000) // `transferFrom(address,address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have their entire balance approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            mstore(0x0c, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\n            // Read the balance, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x00, 0x23b872dd) // `transferFrom(address,address,uint256)`.\\n            amount := mload(0x60) // The `amount` is already at 0x60. We'll need to return it.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x7939f424) // `TransferFromFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            // Read the balance, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x14, to) // Store the `to` argument.\\n            amount := mload(0x34) // The `amount` is already at 0x34. We'll need to return it.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000) // `transfer(address,uint256)`.\\n            // Perform the transfer, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x90b8ec18) // `TransferFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n            // Perform the approval, reverting upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// If the initial attempt to approve fails, attempts to reset the approved amount to zero,\\n    /// then retries the approval again (some tokens, e.g. USDT, requires this).\\n    /// Reverts upon failure.\\n    function safeApproveWithRetry(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n            // Perform the approval, retrying upon failure.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                mstore(0x34, 0) // Store 0 for the `amount`.\\n                mstore(0x00, 0x095ea7b3000000000000000000000000) // `approve(address,uint256)`.\\n                pop(call(gas(), token, 0, 0x10, 0x44, codesize(), 0x00)) // Reset the approval.\\n                mstore(0x34, amount) // Store back the original `amount`.\\n                // Retry the approval, reverting upon failure.\\n                if iszero(\\n                    and(\\n                        or(eq(mload(0x00), 1), iszero(returndatasize())), // Returned 1 or nothing.\\n                        call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                    )\\n                ) {\\n                    mstore(0x00, 0x3e3f8f73) // `ApproveFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n            mstore(0x34, 0) // Restore the part of the free memory pointer that was overwritten.\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, account) // Store the `account` argument.\\n            mstore(0x00, 0x70a08231000000000000000000000000) // `balanceOf(address)`.\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf98506fade18a92e3d8d0a0ca0bdaeaa099d7620aac2a9d76b5f3d0bcd10691c\",\"license\":\"MIT\"},\"solady/src/utils/SignatureCheckerLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Signature verification helper that supports both ECDSA signatures from EOAs\\n/// and ERC1271 signatures from smart contract wallets like Argent and Gnosis safe.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SignatureCheckerLib.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/SignatureChecker.sol)\\n///\\n/// @dev Note:\\n/// - The signature checking functions use the ecrecover precompile (0x1).\\n/// - The `bytes memory signature` variants use the identity precompile (0x4)\\n///   to copy memory internally.\\n/// - Unlike ECDSA signatures, contract signatures are revocable.\\n/// - As of Solady version 0.0.134, all `bytes signature` variants accept both\\n///   regular 65-byte `(r, s, v)` and EIP-2098 `(r, vs)` short form signatures.\\n///   See: https://eips.ethereum.org/EIPS/eip-2098\\n///   This is for calldata efficiency on smart accounts prevalent on L2s.\\n///\\n/// WARNING! Do NOT use signatures as unique identifiers:\\n/// - Use a nonce in the digest to prevent replay attacks on the same contract.\\n/// - Use EIP-712 for the digest to prevent replay attacks across different chains and contracts.\\n///   EIP-712 also enables readable signing of typed data for better user safety.\\n/// This implementation does NOT check if a signature is non-malleable.\\nlibrary SignatureCheckerLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*               SIGNATURE CHECKING OPERATIONS                */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns whether `signature` is valid for `signer` and `hash`.\\n    /// If `signer` is a smart contract, the signature is validated with ERC1271.\\n    /// Otherwise, the signature is validated with `ECDSA.recover`.\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature)\\n        internal\\n        view\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clean the upper 96 bits of `signer` in case they are dirty.\\n            for { signer := shr(96, shl(96, signer)) } signer {} {\\n                let m := mload(0x40)\\n                mstore(0x00, hash)\\n                mstore(0x40, mload(add(signature, 0x20))) // `r`.\\n                if eq(mload(signature), 64) {\\n                    let vs := mload(add(signature, 0x40))\\n                    mstore(0x20, add(shr(255, vs), 27)) // `v`.\\n                    mstore(0x60, shr(1, shl(1, vs))) // `s`.\\n                    let t :=\\n                        staticcall(\\n                            gas(), // Amount of gas left for the transaction.\\n                            1, // Address of `ecrecover`.\\n                            0x00, // Start of input.\\n                            0x80, // Size of input.\\n                            0x01, // Start of output.\\n                            0x20 // Size of output.\\n                        )\\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                    if iszero(or(iszero(returndatasize()), xor(signer, mload(t)))) {\\n                        isValid := 1\\n                        mstore(0x60, 0) // Restore the zero slot.\\n                        mstore(0x40, m) // Restore the free memory pointer.\\n                        break\\n                    }\\n                }\\n                if eq(mload(signature), 65) {\\n                    mstore(0x20, byte(0, mload(add(signature, 0x60)))) // `v`.\\n                    mstore(0x60, mload(add(signature, 0x40))) // `s`.\\n                    let t :=\\n                        staticcall(\\n                            gas(), // Amount of gas left for the transaction.\\n                            1, // Address of `ecrecover`.\\n                            0x00, // Start of input.\\n                            0x80, // Size of input.\\n                            0x01, // Start of output.\\n                            0x20 // Size of output.\\n                        )\\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                    if iszero(or(iszero(returndatasize()), xor(signer, mload(t)))) {\\n                        isValid := 1\\n                        mstore(0x60, 0) // Restore the zero slot.\\n                        mstore(0x40, m) // Restore the free memory pointer.\\n                        break\\n                    }\\n                }\\n                mstore(0x60, 0) // Restore the zero slot.\\n                mstore(0x40, m) // Restore the free memory pointer.\\n\\n                let f := shl(224, 0x1626ba7e)\\n                mstore(m, f) // `bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))`.\\n                mstore(add(m, 0x04), hash)\\n                let d := add(m, 0x24)\\n                mstore(d, 0x40) // The offset of the `signature` in the calldata.\\n                // Copy the `signature` over.\\n                let n := add(0x20, mload(signature))\\n                pop(staticcall(gas(), 4, signature, n, add(m, 0x44), n))\\n                // forgefmt: disable-next-item\\n                isValid := and(\\n                    // Whether the returndata is the magic value `0x1626ba7e` (left-aligned).\\n                    eq(mload(d), f),\\n                    // Whether the staticcall does not revert.\\n                    // This must be placed at the end of the `and` clause,\\n                    // as the arguments are evaluated from right to left.\\n                    staticcall(\\n                        gas(), // Remaining gas.\\n                        signer, // The `signer` address.\\n                        m, // Offset of calldata in memory.\\n                        add(returndatasize(), 0x44), // Length of calldata in memory.\\n                        d, // Offset of returndata.\\n                        0x20 // Length of returndata to write.\\n                    )\\n                )\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns whether `signature` is valid for `signer` and `hash`.\\n    /// If `signer` is a smart contract, the signature is validated with ERC1271.\\n    /// Otherwise, the signature is validated with `ECDSA.recover`.\\n    function isValidSignatureNowCalldata(address signer, bytes32 hash, bytes calldata signature)\\n        internal\\n        view\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clean the upper 96 bits of `signer` in case they are dirty.\\n            for { signer := shr(96, shl(96, signer)) } signer {} {\\n                let m := mload(0x40)\\n                mstore(0x00, hash)\\n                if eq(signature.length, 64) {\\n                    let vs := calldataload(add(signature.offset, 0x20))\\n                    mstore(0x20, add(shr(255, vs), 27)) // `v`.\\n                    mstore(0x40, calldataload(signature.offset)) // `r`.\\n                    mstore(0x60, shr(1, shl(1, vs))) // `s`.\\n                    let t :=\\n                        staticcall(\\n                            gas(), // Amount of gas left for the transaction.\\n                            1, // Address of `ecrecover`.\\n                            0x00, // Start of input.\\n                            0x80, // Size of input.\\n                            0x01, // Start of output.\\n                            0x20 // Size of output.\\n                        )\\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                    if iszero(or(iszero(returndatasize()), xor(signer, mload(t)))) {\\n                        isValid := 1\\n                        mstore(0x60, 0) // Restore the zero slot.\\n                        mstore(0x40, m) // Restore the free memory pointer.\\n                        break\\n                    }\\n                }\\n                if eq(signature.length, 65) {\\n                    mstore(0x20, byte(0, calldataload(add(signature.offset, 0x40)))) // `v`.\\n                    calldatacopy(0x40, signature.offset, 0x40) // `r`, `s`.\\n                    let t :=\\n                        staticcall(\\n                            gas(), // Amount of gas left for the transaction.\\n                            1, // Address of `ecrecover`.\\n                            0x00, // Start of input.\\n                            0x80, // Size of input.\\n                            0x01, // Start of output.\\n                            0x20 // Size of output.\\n                        )\\n                    // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                    if iszero(or(iszero(returndatasize()), xor(signer, mload(t)))) {\\n                        isValid := 1\\n                        mstore(0x60, 0) // Restore the zero slot.\\n                        mstore(0x40, m) // Restore the free memory pointer.\\n                        break\\n                    }\\n                }\\n                mstore(0x60, 0) // Restore the zero slot.\\n                mstore(0x40, m) // Restore the free memory pointer.\\n\\n                let f := shl(224, 0x1626ba7e)\\n                mstore(m, f) // `bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))`.\\n                mstore(add(m, 0x04), hash)\\n                let d := add(m, 0x24)\\n                mstore(d, 0x40) // The offset of the `signature` in the calldata.\\n                mstore(add(m, 0x44), signature.length)\\n                // Copy the `signature` over.\\n                calldatacopy(add(m, 0x64), signature.offset, signature.length)\\n                // forgefmt: disable-next-item\\n                isValid := and(\\n                    // Whether the returndata is the magic value `0x1626ba7e` (left-aligned).\\n                    eq(mload(d), f),\\n                    // Whether the staticcall does not revert.\\n                    // This must be placed at the end of the `and` clause,\\n                    // as the arguments are evaluated from right to left.\\n                    staticcall(\\n                        gas(), // Remaining gas.\\n                        signer, // The `signer` address.\\n                        m, // Offset of calldata in memory.\\n                        add(signature.length, 0x64), // Length of calldata in memory.\\n                        d, // Offset of returndata.\\n                        0x20 // Length of returndata to write.\\n                    )\\n                )\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns whether the signature (`r`, `vs`) is valid for `signer` and `hash`.\\n    /// If `signer` is a smart contract, the signature is validated with ERC1271.\\n    /// Otherwise, the signature is validated with `ECDSA.recover`.\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes32 r, bytes32 vs)\\n        internal\\n        view\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clean the upper 96 bits of `signer` in case they are dirty.\\n            for { signer := shr(96, shl(96, signer)) } signer {} {\\n                let m := mload(0x40)\\n                mstore(0x00, hash)\\n                mstore(0x20, add(shr(255, vs), 27)) // `v`.\\n                mstore(0x40, r) // `r`.\\n                mstore(0x60, shr(1, shl(1, vs))) // `s`.\\n                let t :=\\n                    staticcall(\\n                        gas(), // Amount of gas left for the transaction.\\n                        1, // Address of `ecrecover`.\\n                        0x00, // Start of input.\\n                        0x80, // Size of input.\\n                        0x01, // Start of output.\\n                        0x20 // Size of output.\\n                    )\\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                if iszero(or(iszero(returndatasize()), xor(signer, mload(t)))) {\\n                    isValid := 1\\n                    mstore(0x60, 0) // Restore the zero slot.\\n                    mstore(0x40, m) // Restore the free memory pointer.\\n                    break\\n                }\\n\\n                let f := shl(224, 0x1626ba7e)\\n                mstore(m, f) // `bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))`.\\n                mstore(add(m, 0x04), hash)\\n                let d := add(m, 0x24)\\n                mstore(d, 0x40) // The offset of the `signature` in the calldata.\\n                mstore(add(m, 0x44), 65) // Length of the signature.\\n                mstore(add(m, 0x64), r) // `r`.\\n                mstore(add(m, 0x84), mload(0x60)) // `s`.\\n                mstore8(add(m, 0xa4), mload(0x20)) // `v`.\\n                // forgefmt: disable-next-item\\n                isValid := and(\\n                    // Whether the returndata is the magic value `0x1626ba7e` (left-aligned).\\n                    eq(mload(d), f),\\n                    // Whether the staticcall does not revert.\\n                    // This must be placed at the end of the `and` clause,\\n                    // as the arguments are evaluated from right to left.\\n                    staticcall(\\n                        gas(), // Remaining gas.\\n                        signer, // The `signer` address.\\n                        m, // Offset of calldata in memory.\\n                        0xa5, // Length of calldata in memory.\\n                        d, // Offset of returndata.\\n                        0x20 // Length of returndata to write.\\n                    )\\n                )\\n                mstore(0x60, 0) // Restore the zero slot.\\n                mstore(0x40, m) // Restore the free memory pointer.\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns whether the signature (`v`, `r`, `s`) is valid for `signer` and `hash`.\\n    /// If `signer` is a smart contract, the signature is validated with ERC1271.\\n    /// Otherwise, the signature is validated with `ECDSA.recover`.\\n    function isValidSignatureNow(address signer, bytes32 hash, uint8 v, bytes32 r, bytes32 s)\\n        internal\\n        view\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Clean the upper 96 bits of `signer` in case they are dirty.\\n            for { signer := shr(96, shl(96, signer)) } signer {} {\\n                let m := mload(0x40)\\n                mstore(0x00, hash)\\n                mstore(0x20, and(v, 0xff)) // `v`.\\n                mstore(0x40, r) // `r`.\\n                mstore(0x60, s) // `s`.\\n                let t :=\\n                    staticcall(\\n                        gas(), // Amount of gas left for the transaction.\\n                        1, // Address of `ecrecover`.\\n                        0x00, // Start of input.\\n                        0x80, // Size of input.\\n                        0x01, // Start of output.\\n                        0x20 // Size of output.\\n                    )\\n                // `returndatasize()` will be `0x20` upon success, and `0x00` otherwise.\\n                if iszero(or(iszero(returndatasize()), xor(signer, mload(t)))) {\\n                    isValid := 1\\n                    mstore(0x60, 0) // Restore the zero slot.\\n                    mstore(0x40, m) // Restore the free memory pointer.\\n                    break\\n                }\\n\\n                let f := shl(224, 0x1626ba7e)\\n                mstore(m, f) // `bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))`.\\n                mstore(add(m, 0x04), hash)\\n                let d := add(m, 0x24)\\n                mstore(d, 0x40) // The offset of the `signature` in the calldata.\\n                mstore(add(m, 0x44), 65) // Length of the signature.\\n                mstore(add(m, 0x64), r) // `r`.\\n                mstore(add(m, 0x84), s) // `s`.\\n                mstore8(add(m, 0xa4), v) // `v`.\\n                // forgefmt: disable-next-item\\n                isValid := and(\\n                    // Whether the returndata is the magic value `0x1626ba7e` (left-aligned).\\n                    eq(mload(d), f),\\n                    // Whether the staticcall does not revert.\\n                    // This must be placed at the end of the `and` clause,\\n                    // as the arguments are evaluated from right to left.\\n                    staticcall(\\n                        gas(), // Remaining gas.\\n                        signer, // The `signer` address.\\n                        m, // Offset of calldata in memory.\\n                        0xa5, // Length of calldata in memory.\\n                        d, // Offset of returndata.\\n                        0x20 // Length of returndata to write.\\n                    )\\n                )\\n                mstore(0x60, 0) // Restore the zero slot.\\n                mstore(0x40, m) // Restore the free memory pointer.\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     ERC1271 OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns whether `signature` is valid for `hash` for an ERC1271 `signer` contract.\\n    function isValidERC1271SignatureNow(address signer, bytes32 hash, bytes memory signature)\\n        internal\\n        view\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40)\\n            let f := shl(224, 0x1626ba7e)\\n            mstore(m, f) // `bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))`.\\n            mstore(add(m, 0x04), hash)\\n            let d := add(m, 0x24)\\n            mstore(d, 0x40) // The offset of the `signature` in the calldata.\\n            // Copy the `signature` over.\\n            let n := add(0x20, mload(signature))\\n            pop(staticcall(gas(), 4, signature, n, add(m, 0x44), n))\\n            // forgefmt: disable-next-item\\n            isValid := and(\\n                // Whether the returndata is the magic value `0x1626ba7e` (left-aligned).\\n                eq(mload(d), f),\\n                // Whether the staticcall does not revert.\\n                // This must be placed at the end of the `and` clause,\\n                // as the arguments are evaluated from right to left.\\n                staticcall(\\n                    gas(), // Remaining gas.\\n                    signer, // The `signer` address.\\n                    m, // Offset of calldata in memory.\\n                    add(returndatasize(), 0x44), // Length of calldata in memory.\\n                    d, // Offset of returndata.\\n                    0x20 // Length of returndata to write.\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns whether `signature` is valid for `hash` for an ERC1271 `signer` contract.\\n    function isValidERC1271SignatureNowCalldata(\\n        address signer,\\n        bytes32 hash,\\n        bytes calldata signature\\n    ) internal view returns (bool isValid) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40)\\n            let f := shl(224, 0x1626ba7e)\\n            mstore(m, f) // `bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))`.\\n            mstore(add(m, 0x04), hash)\\n            let d := add(m, 0x24)\\n            mstore(d, 0x40) // The offset of the `signature` in the calldata.\\n            mstore(add(m, 0x44), signature.length)\\n            // Copy the `signature` over.\\n            calldatacopy(add(m, 0x64), signature.offset, signature.length)\\n            // forgefmt: disable-next-item\\n            isValid := and(\\n                // Whether the returndata is the magic value `0x1626ba7e` (left-aligned).\\n                eq(mload(d), f),\\n                // Whether the staticcall does not revert.\\n                // This must be placed at the end of the `and` clause,\\n                // as the arguments are evaluated from right to left.\\n                staticcall(\\n                    gas(), // Remaining gas.\\n                    signer, // The `signer` address.\\n                    m, // Offset of calldata in memory.\\n                    add(signature.length, 0x64), // Length of calldata in memory.\\n                    d, // Offset of returndata.\\n                    0x20 // Length of returndata to write.\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns whether the signature (`r`, `vs`) is valid for `hash`\\n    /// for an ERC1271 `signer` contract.\\n    function isValidERC1271SignatureNow(address signer, bytes32 hash, bytes32 r, bytes32 vs)\\n        internal\\n        view\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40)\\n            let f := shl(224, 0x1626ba7e)\\n            mstore(m, f) // `bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))`.\\n            mstore(add(m, 0x04), hash)\\n            let d := add(m, 0x24)\\n            mstore(d, 0x40) // The offset of the `signature` in the calldata.\\n            mstore(add(m, 0x44), 65) // Length of the signature.\\n            mstore(add(m, 0x64), r) // `r`.\\n            mstore(add(m, 0x84), shr(1, shl(1, vs))) // `s`.\\n            mstore8(add(m, 0xa4), add(shr(255, vs), 27)) // `v`.\\n            // forgefmt: disable-next-item\\n            isValid := and(\\n                // Whether the returndata is the magic value `0x1626ba7e` (left-aligned).\\n                eq(mload(d), f),\\n                // Whether the staticcall does not revert.\\n                // This must be placed at the end of the `and` clause,\\n                // as the arguments are evaluated from right to left.\\n                staticcall(\\n                    gas(), // Remaining gas.\\n                    signer, // The `signer` address.\\n                    m, // Offset of calldata in memory.\\n                    0xa5, // Length of calldata in memory.\\n                    d, // Offset of returndata.\\n                    0x20 // Length of returndata to write.\\n                )\\n            )\\n        }\\n    }\\n\\n    /// @dev Returns whether the signature (`v`, `r`, `s`) is valid for `hash`\\n    /// for an ERC1271 `signer` contract.\\n    function isValidERC1271SignatureNow(address signer, bytes32 hash, uint8 v, bytes32 r, bytes32 s)\\n        internal\\n        view\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40)\\n            let f := shl(224, 0x1626ba7e)\\n            mstore(m, f) // `bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"))`.\\n            mstore(add(m, 0x04), hash)\\n            let d := add(m, 0x24)\\n            mstore(d, 0x40) // The offset of the `signature` in the calldata.\\n            mstore(add(m, 0x44), 65) // Length of the signature.\\n            mstore(add(m, 0x64), r) // `r`.\\n            mstore(add(m, 0x84), s) // `s`.\\n            mstore8(add(m, 0xa4), v) // `v`.\\n            // forgefmt: disable-next-item\\n            isValid := and(\\n                // Whether the returndata is the magic value `0x1626ba7e` (left-aligned).\\n                eq(mload(d), f),\\n                // Whether the staticcall does not revert.\\n                // This must be placed at the end of the `and` clause,\\n                // as the arguments are evaluated from right to left.\\n                staticcall(\\n                    gas(), // Remaining gas.\\n                    signer, // The `signer` address.\\n                    m, // Offset of calldata in memory.\\n                    0xa5, // Length of calldata in memory.\\n                    d, // Offset of returndata.\\n                    0x20 // Length of returndata to write.\\n                )\\n            )\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                     HASHING OPERATIONS                     */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns an Ethereum Signed Message, created from a `hash`.\\n    /// This produces a hash corresponding to the one signed with the\\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\\n    /// JSON-RPC method as part of EIP-191.\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x20, hash) // Store into scratch space for keccak256.\\n            mstore(0x00, \\\"\\\\x00\\\\x00\\\\x00\\\\x00\\\\x19Ethereum Signed Message:\\\\n32\\\") // 28 bytes.\\n            result := keccak256(0x04, 0x3c) // `32 * 2 - (32 - 28) = 60 = 0x3c`.\\n        }\\n    }\\n\\n    /// @dev Returns an Ethereum Signed Message, created from `s`.\\n    /// This produces a hash corresponding to the one signed with the\\n    /// [`eth_sign`](https://eth.wiki/json-rpc/API#eth_sign)\\n    /// JSON-RPC method as part of EIP-191.\\n    /// Note: Supports lengths of `s` up to 999999 bytes.\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let sLength := mload(s)\\n            let o := 0x20\\n            mstore(o, \\\"\\\\x19Ethereum Signed Message:\\\\n\\\") // 26 bytes, zero-right-padded.\\n            mstore(0x00, 0x00)\\n            // Convert the `s.length` to ASCII decimal representation: `base10(s.length)`.\\n            for { let temp := sLength } 1 {} {\\n                o := sub(o, 1)\\n                mstore8(o, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n                if iszero(temp) { break }\\n            }\\n            let n := sub(0x3a, o) // Header length: `26 + 32 - o`.\\n            // Throw an out-of-offset error (consumes all gas) if the header exceeds 32 bytes.\\n            returndatacopy(returndatasize(), returndatasize(), gt(n, 0x20))\\n            mstore(s, or(mload(0x00), mload(n))) // Temporarily store the header.\\n            result := keccak256(add(s, sub(0x20, n)), add(n, sLength))\\n            mstore(s, sLength) // Restore the length.\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   EMPTY CALLDATA HELPERS                   */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns an empty calldata bytes.\\n    function emptySignature() internal pure returns (bytes calldata signature) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            signature.length := 0\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a7acc59723ed291f24d9a2ed019109c8be69f32701f35f8a61dc7fff6652379\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61014060405260405162000013906200018a565b604051809103905ff0801580156200002d573d5f803e3d5ffd5b505f80546001600160a01b0319166001600160a01b039290921691909117905534801562000059575f80fd5b5060405162005731380380620057318339810160408190526200007c9162000198565b306080524660a052606080620000cf60408051808201825260128152714e6f756e732057726170706564203230323360701b602080830191909152825180840190935260018352603160f81b9083015291565b815160209283012081519183019190912060c082905260e0819052604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8152938401929092529082015246606082015230608082015260a090206101005250506101208190525f60015562000147826200014f565b5050620001d1565b6001600160a01b0316638b78c6d819819055805f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a350565b6139c98062001d6883390190565b5f8060408385031215620001aa575f80fd5b82516001600160a01b0381168114620001c1575f80fd5b6020939093015192949293505050565b60805160a05160c05160e0516101005161012051611b57620002115f395f81816102c5015261079c01525f50505f50505f50505f50505f5050611b575ff3fe6080604052600436106101d0575f3560e01c8063773c02d4116100fd578063b88d4fde11610092578063f04e283e11610062578063f04e283e1461055a578063f0503e801461056d578063f2fde38b146105b3578063fee81cf4146105c6575f80fd5b8063b88d4fde146104e0578063c87b56dd146104f3578063e8a3d48514610512578063e985e9c514610526575f80fd5b80638da5cb5b116100cd5780638da5cb5b1461046157806395d89b411461047957806398bdf6f5146104ac578063a22cb465146104c1575f80fd5b8063773c02d4146103c25780637bc5d64d146103ed57806384b0196e1461041c5780638ada6b0f14610443575f80fd5b80633d27f18a116101735780636352211e116101435780636352211e1461035d57806370a082311461037c578063715018a61461039b578063756af45f146103a3575f80fd5b80633d27f18a1461031057806342842e0e1461032357806342966c681461033657806354d1f13d14610355575f80fd5b8063095ea7b3116101ae578063095ea7b31461029f57806313966db5146102b457806323b872dd146102f55780632569296214610308575f80fd5b806301ffc9a7146101d457806306fdde0314610225578063081812fc14610268575b5f80fd5b3480156101df575f80fd5b506102106101ee366004611416565b6301ffc9a760e09190911c9081146380ac58cd821417635b5e139f9091141790565b60405190151581526020015b60405180910390f35b348015610230575f80fd5b506040805180820190915260128152714e6f756e732057726170706564203230323360701b60208201525b60405161021c919061148a565b348015610273575f80fd5b5061028761028236600461149c565b6105f7565b6040516001600160a01b03909116815260200161021c565b6102b26102ad3660046114c9565b610632565b005b3480156102bf575f80fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161021c565b6102b26103033660046114f1565b610641565b6102b261074d565b6102b261031e36600461152a565b61079a565b6102b26103313660046114f1565b6108dd565b348015610341575f80fd5b506102b261035036600461149c565b610909565b6102b2610a0a565b348015610368575f80fd5b5061028761037736600461149c565b610a43565b348015610387575f80fd5b506102e761039636600461157b565b610a7f565b6102b2610ab7565b3480156103ae575f80fd5b506102b26103bd36600461157b565b610aca565b3480156103cd575f80fd5b506102e76103dc36600461157b565b60046020525f908152604090205481565b3480156103f8575f80fd5b5061040c61040736600461149c565b610ade565b60405161021c9493929190611594565b348015610427575f80fd5b50610430610b9e565b60405161021c97969594939291906115cf565b34801561044e575f80fd5b505f54610287906001600160a01b031681565b34801561046c575f80fd5b50638b78c6d81954610287565b348015610484575f80fd5b5060408051808201909152600b81526a4e5720f09f8e813230323360a81b602082015261025b565b3480156104b7575f80fd5b506102e760015481565b3480156104cc575f80fd5b506102b26104db366004611663565b610c03565b6102b26104ee366004611691565b610c56565b3480156104fe575f80fd5b5061025b61050d36600461149c565b610cb0565b34801561051d575f80fd5b5061025b610e67565b348015610531575f80fd5b50610210610540366004611724565b601c52670a5a2e7a000000006008525f526030600c205490565b6102b261056836600461157b565b610eda565b348015610578575f80fd5b5061059e61058736600461149c565b60036020525f908152604090205463ffffffff1681565b60405163ffffffff909116815260200161021c565b6102b26105c136600461157b565b610f14565b3480156105d1575f80fd5b506102e76105e036600461157b565b63389a75e1600c9081525f91909152602090205490565b5f815f52673ec412a9852d173d60c11b601c5260205f2082018201805460601b6106285763ceea21b65f526004601cfd5b6001015492915050565b61063d338383610f3a565b5050565b5f818152673ec412a9852d173d60c11b3317601c52602090208101810180546001600160a01b03948516949384169381169190828614830261069c578261068f5763ceea21b65f526004601cfd5b63a11481005f526004601cfd5b846106ae5763ea553b345f526004601cfd5b855f5281600101549250823314863314176106da576030600c20546106da57634b6e7f185f526004601cfd5b82156106e7575f82600101555b85851818905550601c600c81812080545f190190555f84905220805460010163ffffffff811661071e576301336cea5f526004601cfd5b90558082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f38a45b505050565b5f6202a30067ffffffffffffffff164201905063389a75e1600c52335f52806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d5f80a250565b7f000000000000000000000000000000000000000000000000000000000000000034146107da5760405163078d696560e31b815260040160405180910390fd5b6001600160a01b0382165f90815260046020526040902054156108535760405162461bcd60e51b815260206004820152602660248201527f4e6f756e73577261707065643a207573657220616c7265616479206861732061604482015265103a37b5b2b760d11b60648201526084015b60405180910390fd5b60018054905f61086283611769565b90915550506001545f818152600260205260409020829061088382826118df565b90505061088f81610fd4565b5f828152600360205260409020805463ffffffff191663ffffffff929092169190911790556108be838261101b565b6001600160a01b039092165f9081526004602052604090209190915550565b6108e8838383610641565b813b156107485761074883838360405180602001604052805f8152506110c2565b638b78c6d819546001600160a01b0316336001600160a01b0316148061093c5750335f9081526004602052604090205481145b6109ae5760405162461bcd60e51b815260206004820152603860248201527f4e6f756e73577261707065643a2075736572206973206e6f74206f776e65722060448201527f6f6620636f6e7472616374206f722074686520746f6b656e0000000000000000606482015260840161084a565b6109b78161114b565b5f818152600260205260408120805466ffffffffffffff19168155906109e060018301826113cc565b50505f908152600360209081526040808320805463ffffffff191690553383526004909152812055565b63389a75e1600c52335f525f6020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c925f80a2565b5f818152673ec412a9852d173d60c11b601c526020902081018101546001600160a01b031680610a7a5763ceea21b65f526004601cfd5b919050565b5f81610a9257638f4eb6045f526004601cfd5b673ec412a9852d173d60c11b601c52815f5263ffffffff601c600c2054169050919050565b610abf611155565b610ac85f61116f565b565b610ad2611155565b610adb816111ac565b50565b60026020525f90815260409020805460018201805461ffff8084169462010000850490911693640100000000900462ffffff16929091610b1d906117a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b49906117a7565b8015610b945780601f10610b6b57610100808354040283529160200191610b94565b820191905f5260205f20905b815481529060010190602001808311610b7757829003601f168201915b5050505050905084565b600f60f81b6060805f808083610bf160408051808201825260128152714e6f756e732057726170706564203230323360701b602080830191909152825180840190935260018352603160f81b9083015291565b97989097965046955030945091925090565b801515905081601c52670a5a2e7a00000000600852335f52806030600c2055805f528160601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160205fa35050565b610c61858585610641565b833b15610ca957610ca985858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506110c292505050565b5050505050565b5f8181526002602090815260408083208151608081018352815461ffff8082168352620100008204169482019490945264010000000090930462ffffff169183019190915260018101805460609493929185840191610d0e906117a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3a906117a7565b8015610d855780601f10610d5c57610100808354040283529160200191610d85565b820191905f5260205f20905b815481529060010190602001808311610d6857829003601f168201915b505050919092525050604080518082018252601081526f30b8383634b1b0ba34b7b717b539b7b760811b6020808301919091525f8054898252600383529084902054865192870151858801516060890151965163e522a91560e01b8152989950610e60989597506001600160a01b039093169563e522a91595610e199563ffffffff909416948d94939290916004016119a9565b5f60405180830381865afa158015610e33573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610e5a91908101906119f8565b906111c5565b9392505050565b604080518082018252601081526f30b8383634b1b0ba34b7b717b539b7b760811b60208201525f80548351635f17cac360e01b81529351606094610ed594936001600160a01b0390931692635f17cac3926004808401938290030181865afa158015610e33573d5f803e3d5ffd5b905090565b610ee2611155565b63389a75e1600c52805f526020600c208054421115610f0857636f5e88185f526004601cfd5b5f9055610adb8161116f565b610f1c611155565b8060601b610f3157637448fbae5f526004601cfd5b610adb8161116f565b5f1960601c82811692508381169350815f5283673ec412a9852d173d60c11b17601c5260205f208201820180548216915081610f7d5763ceea21b65f526004601cfd5b818514851517610fa157815f526030600c2054610fa157634b6e7f185f526004601cfd5b6001018390558183827f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9255f38a450505050565b5f42610fe1600143611aa0565b6040805160208101939093529040908201526060810183905260800160408051601f19818403018152919052805160209091012092915050565b6001600160a01b0390911690816110395763ea553b345f526004601cfd5b805f52673ec412a9852d173d60c11b601c5260205f208101810180548060601b1561106b5763c991cbb15f526004601cfd5b831790555f829052601c600c20805460010163ffffffff8116611095576301336cea5f526004601cfd5b905580825f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8138a45050565b60405163150b7a028082523360208301528560601b60601c604083015283606083015260808083015282518060a08401528015611109578060c08401826020870160045afa505b60208360a48301601c86015f8a5af161112a573d1561112a573d5f843e3d83fd5b508060e01b8251146111435763d1a57ed65f526004601cfd5b505050505050565b610adb5f82611219565b638b78c6d819543314610ac8576382b429005f526004601cfd5b638b78c6d81980546001600160a01b039092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a355565b5f385f3847855af1610adb5763b12d13eb5f526004601cfd5b6060816111f0846040516020016111dc9190611ab3565b6040516020818303038152906040526112df565b604051602001611201929190611ace565b60405160208183030381529060405290505b92915050565b5f61122382610a43565b9050505f8181526001600160a01b03928316673ec412a9852d173d60c11b8117601c5260209091208201820180549193821691826112685763ceea21b65f526004601cfd5b825f52816001015480861484871417861517611295576030600c205461129557634b6e7f185f526004601cfd5b80156112a2575f83600101555b5082189055601c600c2080545f19019055815f827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8238a4505050565b6060611213825f806060835180156113c4576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526106708515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f18603f52602083018181015b6003880197508751603f8160121c16515f53603f81600c1c1651600153603f8160061c1651600253603f811651600353505f51825260048201915080821061135757602001604052613d3d60f01b60038406600204808303919091525f8615159091029182900352900382525b509392505050565b5080546113d8906117a7565b5f825580601f106113e7575050565b601f0160209004905f5260205f2090810190610adb91905b80821115611412575f81556001016113ff565b5090565b5f60208284031215611426575f80fd5b81356001600160e01b031981168114610e60575f80fd5b5f5b8381101561145757818101518382015260200161143f565b50505f910152565b5f815180845261147681602086016020860161143d565b601f01601f19169290920160200192915050565b602081525f610e60602083018461145f565b5f602082840312156114ac575f80fd5b5035919050565b80356001600160a01b0381168114610a7a575f80fd5b5f80604083850312156114da575f80fd5b6114e3836114b3565b946020939093013593505050565b5f805f60608486031215611503575f80fd5b61150c846114b3565b925061151a602085016114b3565b9150604084013590509250925092565b5f806040838503121561153b575f80fd5b611544836114b3565b9150602083013567ffffffffffffffff81111561155f575f80fd5b830160808186031215611570575f80fd5b809150509250929050565b5f6020828403121561158b575f80fd5b610e60826114b3565b5f61ffff808716835280861660208401525062ffffff84166040830152608060608301526115c5608083018461145f565b9695505050505050565b60ff60f81b881681525f602060e0818401526115ee60e084018a61145f565b8381036040850152611600818a61145f565b606085018990526001600160a01b038816608086015260a0850187905284810360c086015285518082528387019250908301905f5b8181101561165157835183529284019291840191600101611635565b50909c9b505050505050505050505050565b5f8060408385031215611674575f80fd5b61167d836114b3565b915060208301358015158114611570575f80fd5b5f805f805f608086880312156116a5575f80fd5b6116ae866114b3565b94506116bc602087016114b3565b935060408601359250606086013567ffffffffffffffff808211156116df575f80fd5b818801915088601f8301126116f2575f80fd5b813581811115611700575f80fd5b896020828501011115611711575f80fd5b9699959850939650602001949392505050565b5f8060408385031215611735575f80fd5b61173e836114b3565b915061174c602084016114b3565b90509250929050565b634e487b7160e01b5f52601160045260245ffd5b5f6001820161177a5761177a611755565b5060010190565b5f813561ffff81168114611213575f80fd5b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806117bb57607f821691505b6020821081036117d957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610748575f81815260208120601f850160051c810160208610156118055750805b601f850160051c820191505b8181101561114357828155600101611811565b67ffffffffffffffff83111561183c5761183c611793565b6118508361184a83546117a7565b836117df565b5f601f841160018114611881575f851561186a5750838201355b5f19600387901b1c1916600186901b178355610ca9565b5f83815260209020601f19861690835b828110156118b15786850135825560209485019460019092019101611891565b50868210156118cd575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b61ffff6118eb83611781565b1681548161ffff19821617835563ffff000061190960208601611781565b60101b16808363ffffffff19841617178455604085013562ffffff81168114611930575f80fd5b66ffffff000000008160201b168466ffffffffffffff198516178317178555505050506060820135601e19833603018112611969575f80fd5b8201803567ffffffffffffffff811115611981575f80fd5b602082019150803603821315611995575f80fd5b6119a3818360018601611824565b50505050565b63ffffffff871681528560208201525f61ffff808716604084015280861660608401525062ffffff8416608083015260c060a08301526119ec60c083018461145f565b98975050505050505050565b5f60208284031215611a08575f80fd5b815167ffffffffffffffff80821115611a1f575f80fd5b818401915084601f830112611a32575f80fd5b815181811115611a4457611a44611793565b604051601f8201601f19908116603f01168101908382118183101715611a6c57611a6c611793565b81604052828152876020848701011115611a84575f80fd5b611a9583602083016020880161143d565b979650505050505050565b8181038181111561121357611213611755565b5f8251611ac481846020870161143d565b9190910192915050565b643230ba309d60d91b81525f8351611aed81600585016020880161143d565b670ed8985cd94d8d0b60c21b6005918401918201528351611b1581600d84016020880161143d565b01600d0194935050505056fea2646970667358221220d94a52afb3b68c75f72b3e2a1684b36cb74b69c2085292fc5289087c4ffa692664736f6c63430008150033608060405234801561000f575f80fd5b506139ac8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610213575f3560e01c8063b55ccc621161011f578063d0c3efa8116100a9578063d9237f1411610079578063d9237f14146104ed578063e522a91514610519578063f051dcf81461052c578063f49717ee14610413578063f6130adc14610559575f80fd5b8063d0c3efa81461029d578063d2ae5ffd14610493578063d5ed88ce146104a6578063d61974f1146104b9575f80fd5b8063bf35dd0b116100ef578063bf35dd0b14610413578063c46b294d14610423578063cd475f2614610448578063cdea0cef1461045b578063ce5ad1791461046e575f80fd5b8063b55ccc621461029d578063bc689620146103ee578063be58b0a914610413578063bee84ae31461041b575f80fd5b8063640bab41116101a05780637f369319116101705780637f3693191461038957806387598e52146103b25780638c8c3796146103ba578063a891b35e146103db578063afae76fa146103b2575f80fd5b8063640bab411461032557806372617f8a1461034e5780637510ac241461036e5780637dbb90a214610376575f80fd5b80633708be65116101e65780633708be65146102b35780633d5be2c2146102bb57806341ff467b146102e157806343f2614f146102f45780635f17cac31461031d575f80fd5b8063053f1eb0146102175780630c4ae1c9146102695780632bee68071461028a57806333174f981461029d575b5f80fd5b6102536040518060400160405280601a81526020017f253343253246626f647925334525334325324668746d6c25334500000000000081525081565b6040516102609190611a16565b60405180910390f35b61027c610277366004611b4a565b61058e565b604051610260929190611cf0565b610253610298366004611ec9565b610a43565b6102a5600d81565b604051908152602001610260565b6102a5604581565b610253604051806040016040528060078152602001661e17b432b0b21f60c91b81525081565b6102536102ef366004611b4a565b610ae6565b6102536040518060400160405280600a8152602001692533436865616425334560b01b81525081565b610253610d64565b6102536040518060400160405280600a81526020016925334368746d6c25334560b01b81525081565b6102a561035c366004611f6a565b5f600360028301046004029050919050565b6102a5601681565b610253610384366004611ec9565b610d85565b6102536040518060400160405280600a815260200169253343626f647925334560b01b81525081565b6102a5602781565b6103cd6103c8366004611f81565b610edc565b604051610260929190611fb3565b6102536103e9366004611ec9565b611082565b610253604051806040016040528060068152602001651e343a36b61f60d11b81525081565b6102a5601781565b6102a5605a81565b610253604051806040016040528060068152602001651e3432b0b21f60d11b81525081565b6103cd610456366004611f81565b611093565b610253610469366004611f81565b611216565b610253604051806040016040528060068152602001651e3137b23c9f60d11b81525081565b6102536104a1366004611b4a565b6112a6565b6102536104b4366004611ec9565b6112e4565b61025360405180604001604052806015815260200174646174612533417465787425324668746d6c25324360581b81525081565b6102536040518060400160405280600d81526020016c2533432532466865616425334560981b81525081565b610253610527366004611fd7565b6112ef565b6102536040518060400160405280600e81526020016d1e17b137b23c9f1e17b43a36b61f60911b81525081565b6102536040518060400160405280601681526020017519185d184e9d195e1d0bda1d1b5b0ed8985cd94d8d0b60521b81525081565b60408051600580825260c0820190925260609182915f91816020015b6105b2611974565b8152602001906001900390816105aa5790505090506040518061018001604052806101578152602001612b7a6101579139815f815181106105f5576105f561205a565b602002602001015160c00181905250604051806102a0016040528061026b81526020016123ed61026b9139816001815181106106335761063361205a565b602002602001015160c0018190525061064b8861136e565b8160028151811061065e5761065e61205a565b602002602001015160c00181905250604051806040016040528060098152602001683e9e17b9ba3cb6329f60b91b815250816003815181106106a2576106a261205a565b602002602001015160c00181905250604051806101c0016040528061018f8152602001612cd161018f9139816004815181106106e0576106e061205a565b602090810291909101015160c0015260408051600e8082526101e082019092525f91816020015b61070f611974565b81526020019060019003908161070757905050905060405180606001604052806023815260200161269d60239139815f8151811061074f5761074f61205a565b602002602001015160c001819052506107678961136e565b8160018151811061077a5761077a61205a565b602002602001015160c001819052506040518060400160405280600d81526020016c11103230ba3096b9b2b2b21e9160991b815250816002815181106107c2576107c261205a565b602002602001015160c001819052506107e08963ffffffff16611545565b816003815181106107f3576107f361205a565b602002602001015160c001819052506040518060800160405280605081526020016138ee605091398160048151811061082e5761082e61205a565b602002602001015160c0018190525084816005815181106108515761085161205a565b602002602001015160c001819052506040518060a0016040528060628152602001612342606291398160068151811061088c5761088c61205a565b602002602001015160c001819052506108a98662ffffff16611545565b816007815181106108bc576108bc61205a565b602002602001015160c00181905250604051806060016040528060318152602001612e6060319139816008815181106108f7576108f761205a565b602002602001015160c001819052506109138861ffff16611545565b816009815181106109265761092661205a565b602002602001015160c0018190525060405180606001604052806039815260200161393e6039913981600a815181106109615761096161205a565b602002602001015160c0018190525061097d8761ffff16611545565b81600b815181106109905761099061205a565b602002602001015160c001819052506040518060400160405280601f81526020017f2070726f70733c2f6469763e3c2f6469763e3c2f6469763e3c2f6d61696e3e0081525081600c815181106109e8576109e861205a565b602002602001015160c0018190525060405180610a400160405280610a198152602001612e91610a19913981600d81518110610a2657610a2661205a565b602090810291909101015160c00152909890975095505050505050565b60605f610a4f83610d85565b90505f610a6982515f600360028301046004029050919050565b60160190505f610a8f82604080518281016060018252910181525f602090910190815290565b9050610ad26040518060400160405280601681526020017519185d184e9d195e1d0bda1d1b5b0ed8985cd94d8d0b60521b8152508261158790919063ffffffff16565b610ade81845f806115a0565b949350505050565b60605f80610af7888888888861058e565b9150915060405180610280016040528061025d81526020016127d061025d913982600181518110610b2a57610b2a61205a565b602002602001015160c00181905250610b428861136e565b82600281518110610b5557610b5561205a565b602002602001015160c00181905250604051806040016040528060098152602001683e9e17b9ba3cb6329f60b91b81525082600381518110610b9957610b9961205a565b602002602001015160c001819052506040518060400160405280600f81526020016e1e39ba3cb6329f1e17b9ba3cb6329f60891b81525082600481518110610be357610be361205a565b602002602001015160c00181905250600d81525f60405180604001604052808481526020018381525090505f610c1882610d85565b90505f6040518060c00160405280609381526020016126c06093913990505f6040518060400160405280601d81526020017f3c2f626f64793e3c2f666f726569676e4f626a6563743e3c2f7376673e00000081525090505f610ca9825185518551610c83919061206e565b610c8d919061206e565b604080518281016060018252910181525f602090910190815290565b9050610cb58184611587565b610cbf8185611587565b610cc98183611587565b60408051808201909152601a8082527f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000060208301528251600360029091010460040290610d16908261206e565b90505f610d3982604080518281016060018252910181525f602090910190815290565b9050610d458184611587565b610d5181855f806115a0565b9f9e505050505050505050505050505050565b606060405180610100016040528060d18152602001612aa960d19139905090565b8051516060905f9015610da1578251610d9e905f6116ac565b90505b60208301515115610dbc57610dba83602001515f6116ac565b015b5f610dc960278301610c8d565b9050610dfc604051806040016040528060068152602001651e343a36b61f60d11b8152508261158790919063ffffffff16565b6040805180820190915260068152651e3432b0b21f60d11b6020820152610e24908290611587565b83515115610e3a57610e3a81855f01515f61182b565b6040805180820190915260078152661e17b432b0b21f60c91b6020820152610e63908290611587565b6040805180820190915260068152651e3137b23c9f60d11b6020820152610e8b908290611587565b60208401515115610ea557610ea58185602001515f61182b565b60408051808201909152600e81526d1e17b137b23c9f1e17b43a36b61f60911b6020820152610ed5908290611587565b9392505050565b606080600183606001516004811115610ef757610ef7611bc5565b03610f4857604051806040016040528060088152602001671e39b1b934b83a1f60c11b815250604051806040016040528060098152602001681e17b9b1b934b83a1f60b91b81525091509150915091565b600283606001516004811115610f6057610f60611bc5565b03610fab57604051806060016040528060298152602001612319602991396040518060400160405280600b81526020016a111f1e17b9b1b934b83a1f60a91b81525091509150915091565b600383606001516004811115610fc357610fc3611bc5565b0361100e57604051806080016040528060458152602001612658604591396040518060400160405280600b81526020016a111f1e17b9b1b934b83a1f60a91b81525091509150915091565b60048360600151600481111561102657611026611bc5565b03611071576040518060800160405280604481526020016138aa604491396040518060400160405280600b81526020016a111f1e17b9b1b934b83a1f60a91b81525091509150915091565b5050608081015160a0909101519091565b606061108d82610a43565b92915050565b6060806001836060015160048111156110ae576110ae611bc5565b14806110cf57506002836060015160048111156110cd576110cd611bc5565b145b1561112c576040518060800160405280604981526020016123a4604991396040518060400160405280601f81526020017f253235323225323533452532353343253235324673637269707425323533450081525091509150915091565b60038360600151600481111561114457611144611bc5565b036111a1576040518060a00160405280607d8152602001612753607d91396040518060400160405280601f81526020017f253235323225323533452532353343253235324673637269707425323533450081525091509150915091565b6004836060015160048111156111b9576111b9611bc5565b03611071576040518060a00160405280607c8152602001612a2d607c91396040518060400160405280601f81526020017f253235323225323533452532353343253235324673637269707425323533450081525091509150915091565b60c0810151516060901561122c575060c0015190565b602082015182516040808501519051633e58d56560e21b81526001600160a01b039093169263f963559492611265929091600401611fb3565b5f60405180830381865afa15801561127f573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261108d919081019061208d565b60605f806112b7888888888861058e565b915091506112d8604051806040016040528084815260200183815250610a43565b98975050505050505050565b606061108d82610d85565b60606112fe87868686866112a6565b61130b8887878787610ae6565b61131488611545565b6113218861ffff16611545565b61132e8861ffff16611545565b8661133d8962ffffff16611545565b6040516020016113539796959493929190612111565b60405160208183030381529060405290509695505050505050565b60408051600680825260e082019092526060915f9190816020015b6060815260200190600190039081611389579050509050604051806040016040528060078152602001662344353343354560c81b815250815f815181106113d2576113d261205a565b602002602001018190525060405180604001604052806007815260200166119a9c9c1ba32360c91b815250816001815181106114105761141061205a565b6020026020010181905250604051806040016040528060078152602001662344433545374160c81b8152508160028151811061144e5761144e61205a565b6020026020010181905250604051806040016040528060078152602001662331343236453160c81b8152508160038151811061148c5761148c61205a565b6020026020010181905250604051806040016040528060078152602001662331423338463560c81b815250816004815181106114ca576114ca61205a565b6020026020010181905250604051806040016040528060078152602001662345333746393560c81b815250816005815181106115085761150861205a565b60209081029190910101528061151f6006856122ea565b63ffffffff16815181106115355761153561205a565b6020026020010151915050919050565b60606080604051019050602081016040525f8152805f19835b928101926030600a8206018453600a90048061155e575050819003601f19909101908152919050565b611592828251611865565b61159c82826118ec565b5050565b82515f8190036115b057506116a6565b60036002828101829004901b90820683156115d2576001811481151501820391505b6115dc8783611865565b6040517f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526102308615027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f03603f52875160208901018488015b6003890198508851603f8160121c16518353603f81600c1c16516001840153603f8160061c16516002840153603f81165160038401535060048201915080891061163957508561169857603d831515820353603d6001841460011b8203535b508751909201875250604052505b50505050565b5f82515f036116bc57505f61108d565b60608060605f80875190505f5b6116eb8982815181106116de576116de61205a565b6020026020010151611216565b9350838982815181106117005761170061205a565b602002602001015160c0018190525087801561174a5750600189828151811061172b5761172b61205a565b602002602001015160600151600481111561174857611748611bc5565b145b1561176557835160036002909101046004028301925061176c565b8351830192505b871561179e576117948982815181106117875761178761205a565b6020026020010151611093565b90965094506117c6565b6117c08982815181106117b3576117b361205a565b6020026020010151610edc565b90965094505b858982815181106117d9576117d961205a565b602002602001015160800181905250848982815181106117fb576117fb61205a565b602090810291909101015160a00152855185519301909201916001018181106116c9575090979650505050505050565b5f5b611851848483815181106118435761184361205a565b602002602001015184611922565b8251816001019150811061182d5750505050565b5f61187683601f190151603f190190565b90505f828451611886919061206e565b9050808210156116a65760405162461bcd60e51b815260206004820152602760248201527f44796e616d69634275666665723a20417070656e64696e67206f7574206f66206044820152663137bab732399760c91b606482015260840160405180910390fd5b8051602082019150808201602084510184015b818410156119175783518152602093840193016118ff565b505082510190915250565b6080820151611932908490611587565b801561194f5760c082015161194a9084905f806115a0565b61195f565b60c082015161195f908490611587565b60a082015161196f908490611587565b505050565b6040518060e00160405280606081526020015f6001600160a01b03168152602001606081526020015f60048111156119ae576119ae611bc5565b81526020016060815260200160608152602001606081525090565b5f5b838110156119e35781810151838201526020016119cb565b50505f910152565b5f8151808452611a028160208601602086016119c9565b601f01601f19169290920160200192915050565b602081525f610ed560208301846119eb565b803563ffffffff81168114611a3b575f80fd5b919050565b803561ffff81168114611a3b575f80fd5b803562ffffff81168114611a3b575f80fd5b634e487b7160e01b5f52604160045260245ffd5b60405160e0810167ffffffffffffffff81118282101715611a9a57611a9a611a63565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611ac957611ac9611a63565b604052919050565b5f67ffffffffffffffff821115611aea57611aea611a63565b50601f01601f191660200190565b5f82601f830112611b07575f80fd5b8135611b1a611b1582611ad1565b611aa0565b818152846020838601011115611b2e575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f805f60a08688031215611b5e575f80fd5b611b6786611a28565b9450611b7560208701611a40565b9350611b8360408701611a40565b9250611b9160608701611a51565b9150608086013567ffffffffffffffff811115611bac575f80fd5b611bb888828901611af8565b9150509295509295909350565b634e487b7160e01b5f52602160045260245ffd5b60058110611bf557634e487b7160e01b5f52602160045260245ffd5b9052565b5f82825180855260208086019550808260051b8401018186015f5b84811015611ce357601f19868403018952815160e08151818652611c3a828701826119eb565b838801516001600160a01b031687890152604080850151888303828a01529193509150611c6783826119eb565b92505050606080830151611c7d82880182611bd9565b505060808083015186830382880152611c9683826119eb565b9250505060a08083015186830382880152611cb183826119eb565b9250505060c08083015192508582038187015250611ccf81836119eb565b9a86019a9450505090830190600101611c14565b5090979650505050505050565b604081525f611d026040830185611bf9565b8281036020840152611d148185611bf9565b95945050505050565b80356001600160a01b0381168114611a3b575f80fd5b803560058110611a3b575f80fd5b5f60e08284031215611d51575f80fd5b611d59611a77565b9050813567ffffffffffffffff80821115611d72575f80fd5b611d7e85838601611af8565b8352611d8c60208501611d1d565b60208401526040840135915080821115611da4575f80fd5b611db085838601611af8565b6040840152611dc160608501611d33565b60608401526080840135915080821115611dd9575f80fd5b611de585838601611af8565b608084015260a0840135915080821115611dfd575f80fd5b611e0985838601611af8565b60a084015260c0840135915080821115611e21575f80fd5b50611e2e84828501611af8565b60c08301525092915050565b5f82601f830112611e49575f80fd5b8135602067ffffffffffffffff80831115611e6657611e66611a63565b8260051b611e75838201611aa0565b9384528581018301938381019088861115611e8e575f80fd5b84880192505b858310156112d857823584811115611eab575f8081fd5b611eb98a87838c0101611d41565b8352509184019190840190611e94565b5f60208284031215611ed9575f80fd5b813567ffffffffffffffff80821115611ef0575f80fd5b9083019060408286031215611f03575f80fd5b604051604081018181108382111715611f1e57611f1e611a63565b604052823582811115611f2f575f80fd5b611f3b87828601611e3a565b825250602083013582811115611f4f575f80fd5b611f5b87828601611e3a565b60208301525095945050505050565b5f60208284031215611f7a575f80fd5b5035919050565b5f60208284031215611f91575f80fd5b813567ffffffffffffffff811115611fa7575f80fd5b610ade84828501611d41565b604081525f611fc560408301856119eb565b8281036020840152611d1481856119eb565b5f805f805f8060c08789031215611fec575f80fd5b611ff587611a28565b95506020870135945061200a60408801611a40565b935061201860608801611a40565b925061202660808801611a51565b915060a087013567ffffffffffffffff811115612041575f80fd5b61204d89828a01611af8565b9150509295509295509295565b634e487b7160e01b5f52603260045260245ffd5b8082018082111561108d57634e487b7160e01b5f52601160045260245ffd5b5f6020828403121561209d575f80fd5b815167ffffffffffffffff8111156120b3575f80fd5b8201601f810184136120c3575f80fd5b80516120d1611b1582611ad1565b8181528560208385010111156120e5575f80fd5b611d148260208301602086016119c9565b5f81516121078185602086016119c9565b9290920192915050565b713d9130b734b6b0ba34b7b72fbab936111d1160711b815287515f9061213e816012850160208d016119c9565b6a11161134b6b0b3b2911d1160a91b601291840191820152885161216981601d840160208d016119c9565b6d222c226e616d65223a224944202360901b601d9290910191820152875161219881602b840160208c016119c9565b7f222c2261747472696275746573223a5b7b2274726169745f74797065223a2250602b9290910191820152753937b8399021b932b0ba32b21116113b30b63ab2911d60511b604b82015286516121f5816061840160208b016119c9565b6122db6122cb6122c561228d61228761225261224c6061888a01017f7d2c7b2274726169745f74797065223a2250726f70732053706f6e736f7265648152691116113b30b63ab2911d60b11b6020820152602a0190565b8d6120f6565b7f7d2c7b2274726169745f74797065223a22557365726e616d65222c2276616c7581526232911d60e91b602082015260230190565b8a6120f6565b7f7d2c7b2274726169745f74797065223a22566f7465732043617374222c227661815265363ab2911d1160d11b602082015260260190565b876120f6565b63227d5d7d60e01b815260040190565b9b9a5050505050505050505050565b5f63ffffffff8084168061230c57634e487b7160e01b5f52601260045260245ffd5b9216919091069291505056fe3c736372697074207372633d22646174613a746578742f6a6176617363726970743b6261736536342c3c2f6469763e3c2f6469763e3c64697620636c6173733d2267223e3c2f6469763e3c6469762069643d227a223e3c64697620636c6173733d226c223e566f74657320436173743c2f6469763e3c64697620636c6173733d2273222069643d226d223e25323533437363726970742532353230737263253235334425323532326461746125323533417465787425323532466a617661736372697074253235334262617365363425323532433c7374796c653e626f64797b666f6e742d66616d696c793a506f7070696e732c73616e732d73657269663b6d617267696e3a303b70616464696e673a303b646973706c61793a666c65783b6a7573746966792d636f6e74656e743a63656e7465723b616c69676e2d6974656d733a63656e7465727d23637b706f736974696f6e3a72656c61746976657d23777b706f736974696f6e3a6162736f6c7574653b646973706c61793a666c65783b666c65782d646972656374696f6e3a636f6c756d6e3b6865696768743a313030253b636f6c6f723a236666663b666f6e742d7765696768743a3430307d2e747b666f6e742d73697a653a6d696e283476772c347668297d2e6c7b666f6e742d73697a653a6d696e283476772c347668297d2e732c2e757b666f6e742d73697a653a6d696e28313276772c31327668293b666f6e742d7765696768743a3830303b666f6e742d66616d696c793a4d6f6e747365727261742c73616e732d73657269667d2e757b666f6e742d73697a653a6d696e283876772c387668293b6f766572666c6f773a68696464656e3b666f6e742d66616d696c793a4d6f6e747365727261742c73616e732d73657269667d2e677b666c65782d67726f773a317d23617b6d617267696e2d746f703a312e3572656d3b6d617267696e2d6c6566743a312e3572656d7d237a7b6d617267696e2d626f74746f6d3a312e3572656d3b6d617267696e2d6c6566743a312e3572656d7d236d7b6d617267696e2d626f74746f6d3a63616c63283172656d202d20387078297d2e707b77696474683a31303076773b6865696768743a31303076683b6261636b67726f756e642d636f6c6f723a3c73637269707420747970653d22746578742f6a6176617363726970742b677a697022207372633d22646174613a746578742f6a6176617363726970743b6261736536342c3c6d61696e2069643d22632220636c6173733d22702220646174612d636f6c6f723d223c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667222076696577426f783d223020302037303020373030223e3c666f726569676e4f626a6563742077696474683d223130302522206865696768743d2231303025223e3c626f647920786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c223e2532353343736372697074253235323074797065253235334425323532327465787425323532466a6176617363726970742532353242677a697025323532322532353230737263253235334425323532326461746125323533417465787425323532466a617661736372697074253235334262617365363425323532433c7374796c653e626f64797b666f6e742d66616d696c793a506f7070696e732c73616e732d73657269663b6d617267696e3a303b70616464696e673a303b646973706c61793a666c65783b6a7573746966792d636f6e74656e743a63656e7465723b616c69676e2d6974656d733a63656e7465727d23637b706f736974696f6e3a72656c61746976657d23777b706f736974696f6e3a6162736f6c7574653b646973706c61793a666c65783b666c65782d646972656374696f6e3a636f6c756d6e3b6865696768743a313030253b636f6c6f723a236666663b666f6e742d7765696768743a3430307d2e747b666f6e742d73697a653a323870787d2e6c7b666f6e742d73697a653a323470783b6d617267696e2d746f703a313070787d2e732c2e757b666f6e742d73697a653a383070783b666f6e742d7765696768743a3830303b666f6e742d66616d696c793a4d6f6e747365727261742c73616e732d73657269667d2e757b666f6e742d73697a653a353670783b6f766572666c6f773a68696464656e3b666f6e742d66616d696c793a4d6f6e747365727261742c73616e732d73657269667d2e677b666c65782d67726f773a317d23617b6d617267696e2d746f703a312e3572656d3b6d617267696e2d6c6566743a312e3572656d7d237a7b6d617267696e2d626f74746f6d3a312e3572656d3b6d617267696e2d6c6566743a312e3572656d7d236d7b6d617267696e2d626f74746f6d3a63616c63283172656d202d20387078297d2e707b77696474683a2037303070783b206865696768743a2037303070783b206261636b67726f756e642d636f6c6f723a2532353343736372697074253235323074797065253235334425323532327465787425323532466a6176617363726970742532353242706e6725323532322532353230737263253235334425323532326461746125323533417465787425323532466a617661736372697074253235334262617365363425323532437b226e616d65223a224e6f756e7320577261707065642032303233222c22696d616765223a22697066733a2f2f6261667962656966643374796e623375653477746677697137367675787433753578326d7a72797473636f3569797a637666783534636c346b7761222c226465736372697074696f6e223a224120636f6d6d656d6f726174697665204e465420666f7220616c6c207468652070656f706c6520696e766f6c76656420696e2070726f6c696665726174696e6720746865204e6f756e732044414f20696e2032303233227d3c6c696e6b20687265663d2268747470733a2f2f666f6e74732e676f6f676c65617069732e636f6d222072656c3d22707265636f6e6e656374222f3e3c6c696e6b20687265663d2268747470733a2f2f666f6e74732e677374617469632e636f6d222072656c3d22707265636f6e6e656374222063726f73736f726967696e3d2274727565222f3e3c6c696e6b20687265663d2268747470733a2f2f666f6e74732e676f6f676c65617069732e636f6d2f637373323f66616d696c793d506f7070696e733a77676874403230303b3330303b3430303b3530303b3630303b3730303b3830303b393030222072656c3d227374796c657368656574222f3e3c6c696e6b20687265663d2268747470733a2f2f666f6e74732e676f6f676c65617069732e636f6d2f6373733f66616d696c793d4d6f6e747365727261743a3430302c383030222072656c3d227374796c657368656574222f3e3c7374796c652073636f7065643d2274727565223e406d656469612073637265656e20616e6420286d696e2d6865696768743a3732307078297b23617b6d617267696e2d746f703a322e3572656d3b6d617267696e2d6c6566743a322e3572656d7d237a7b6d617267696e2d626f74746f6d3a322e3572656d3b6d617267696e2d6c6566743a322e3572656d7d7d406d656469612073637265656e20616e6420286d61782d6865696768743a3435307078297b23617b6d617267696e2d746f703a3172656d3b6d617267696e2d6c6566743a3172656d7d237a7b6d617267696e2d626f74746f6d3a3172656d3b6d617267696e2d6c6566743a3172656d7d7d406d656469612073637265656e20616e6420286d61782d6865696768743a3330307078297b23617b6d617267696e2d746f703a2e3572656d3b6d617267696e2d6c6566743a2e3572656d7d237a7b6d617267696e2d626f74746f6d3a2e3572656d3b6d617267696e2d6c6566743a2e3572656d7d236d7b6d617267696e2d626f74746f6d3a307d7d3c2f7374796c653e3c2f6469763e3c64697620636c6173733d226c223e437265617465643c2f6469763e3c64697620636c6173733d2273223e3c7363726970743e646f63756d656e742e6164644576656e744c697374656e65722822444f4d436f6e74656e744c6f61646564222c2866756e6374696f6e28297b66756e6374696f6e206528297b72657475726e2077696e646f772e696e6e65724865696768743e3d77696e646f772e696e6e657257696474683f77696e646f772e696e6e657257696474683a77696e646f772e696e6e65724865696768747d636f6e737420743d646f63756d656e742e717565727953656c6563746f7228226d61696e22292c6e3d66756e6374696f6e2865297b636f6e737420743d323134373438333634373b6c6574206e3d6525743b72657475726e28293d3e286e3d31363830372a6e25742c6e2f74297d287061727365496e7428742e646174617365742e736565642c313029293b6c6574206f3d66756e6374696f6e28652c74297b72657475726e204d6174682e666c6f6f72287428292a65297d28342c6e292c793d6528292c6c3d6528292c783d6c2f3732302c723d343d3d6f3f32303a333d3d6f3f34303a323d3d6f3f36303a313d3d6f3f38303a3132302c693d5b5d2c613d3230302c733d3130303b76617220633d742e646174617365742e636f6c6f723b636f6e737420753d646f63756d656e742e637265617465456c656d656e74282263616e76617322292c683d646f63756d656e742e676574456c656d656e744279496428226322293b682e636c6173734c6973742e72656d6f766528227022292c682e617070656e644368696c642875293b636f6e737420663d752e676574436f6e746578742822326422293b66756e6374696f6e206428652c742c6e297b72657475726e28312d6e292a652b6e2a747d66756e6374696f6e207728652c742c6e2c6f2c792c6c2c78297b72657475726e7b783a64286428652c742c78292c6428742c6e2c78292c78292c793a642864286f2c792c78292c6428792c6c2c78292c78297d7d66756e6374696f6e207028652c742c6e2c6f2c79297b6c6574206c3d332a28742d65292c783d332a286e2d74292d6c2c723d332a28742d65292c693d332a286e2d74292d722c613d6f2d652d722d693b72657475726e7b783a286f2d652d6c2d78292a4d6174682e706f7728792c33292b782a4d6174682e706f7728792c32292b6c2a792b652c793a612a4d6174682e706f7728792c33292b692a4d6174682e706f7728792c32292b722a792b657d7d636f6c733d792f28722a78292c726f77733d6c2f28722a78293b766172206d3d6e28292c763d6e28292c4d3d6e28292c673d6e28292c453d6e28292c4c3d6e28292c433d6e28292c533d6e28292c713d6e28292c483d6e28292c493d6e28292c523d6e28293b6c657420573d7b783a3336302a6d2a782c793a3336302a762a787d2c7a3d7b783a3165332a4d2a782c793a3165332a672a787d2c413d7b783a3530302a452a782c793a3165332a4c2a782b3530302a787d2c423d7b783a313135302a432a782d3135302a782c793a3165332a532a787d2c443d7b783a3165332a712a782c793a3165332a482a787d2c463d7b783a313135302a492a782d3135302a782c793a3165332a522a782b3530302a787d3b666f72286c657420653d303b653c3d732f333b652b2b297b6c657420743d7728572e782c7a2e782c412e782c572e792c7a2e792c412e792c652f28732f3329293b692e707573682874297d666f72286c657420653d303b653c3d732f333b652b2b297b6c657420743d652f28732f33292c6e3d7028412e782c422e782c442e782c462e782c74292c6f3d7028412e792c422e792c442e792c462e792c74293b692e70757368287b783a6e2c793a6f7d297d666f72286c657420653d303b653c3d732f333b652b2b297b6c657420743d652f28732f33292c6e3d6428462e782c572e782c74292c6f3d6428462e792c572e792c74293b692e70757368287b783a6e2c793a6f7d297d666f72286c657420653d303b653c3d732f323b652b2b297b6c657420743d652f28732f32292c6e3d7028412e782c422e782c442e782c462e782c74292c6f3d7028412e792c422e792c442e792c462e792c74293b692e70757368287b783a6e2c793a6f7d297d6c6574204f3d303b77696e646f772e6164644576656e744c697374656e65722822726573697a65222c2866756e6374696f6e28297b793d6528292c6c3d6528292c783d6c2f3732302c723d6f3d3d342a783f32302a783a333d3d6f3f34302a783a323d3d6f3f36302a783a313d3d6f3f38302a783a3132302a782c662e63616e7661732e77696474683d792c662e63616e7661732e6865696768743d6c3b6c657420743d7b783a3336302a6d2a782c793a3336302a762a787d2c6e3d7b783a3165332a4d2a782c793a3165332a672a787d2c613d7b783a3530302a452a782c793a3165332a4c2a782b3530302a787d2c633d7b783a313135302a432a782d3135302a782c793a3165332a532a787d2c753d7b783a3165332a712a782c793a3165332a482a787d2c683d7b783a313135302a492a782d3135302a782c793a3165332a522a782b3530302a787d3b693d5b5d3b666f72286c657420653d303b653c3d732f333b652b2b297b6c6574206f3d7728742e782c6e2e782c612e782c742e792c6e2e792c612e792c652f28732f3329293b692e70757368286f297d666f72286c657420653d303b653c3d732f333b652b2b297b6c657420743d652f28732f33292c6e3d7028612e782c632e782c752e782c682e782c74292c6f3d7028612e792c632e792c752e792c682e792c74293b692e70757368287b783a6e2c793a6f7d297d666f72286c657420653d303b653c3d732f333b652b2b297b6c6574206e3d652f28732f33292c6f3d6428682e782c742e782c6e292c793d6428682e792c742e792c6e293b692e70757368287b783a6f2c793a797d297d666f72286c657420653d303b653c3d732f323b652b2b297b6c657420743d652f28732f32292c6e3d7028612e782c632e782c752e782c682e782c74292c6f3d7028612e792c632e792c752e792c682e792c74293b692e70757368287b783a6e2c793a6f7d297d7d29292c66756e6374696f6e207428297b4f2b2b2c66756e6374696f6e28297b662e63616e7661732e77696474683d6528292c662e63616e7661732e6865696768743d6528292c662e66696c6c5374796c653d632c662e66696c6c5265637428302c302c792c6c293b666f72286c657420653d303b653c613b652b2b297b6c657420743d284f2d312b652a732f612b692e6c656e6774682925692e6c656e6774682c6e3d695b4d6174682e666c6f6f722874295d2c6f3d4d6174682e666c6f6f72286e2e782f72292a722c793d4d6174682e666c6f6f72286e2e792f72292a722c6c3d322a65253336303b662e66696c6c5374796c653d6068736c28247b6c7d2c20313030252c2035302529602c662e66696c6c52656374286f2c792d31302c722c72297d7d28292c73657454696d656f7574282828293d3e72657175657374416e696d6174696f6e4672616d65287429292c3235297d28297d29293b3c2f7363726970743e3c73637269707420747970653d22746578742f6a6176617363726970742b706e6722207372633d22646174613a746578742f6a6176617363726970743b6261736536342c223e3c6469762069643d2277223e3c6469762069643d2261223e3c64697620636c6173733d2274223e4e6f756e73205772617070656420323032333c2f6469763e3c64697620636c6173733d2275223e2070726f70733c2f6469763e3c64697620636c6173733d226c223e53706f6e736f7265643c2f6469763e3c64697620636c6173733d2273223ea2646970667358221220072d8eaef5bd8a1d9112f18776de506b856ec97425b459bbb702c1b6cc06e2ed64736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106101d0575f3560e01c8063773c02d4116100fd578063b88d4fde11610092578063f04e283e11610062578063f04e283e1461055a578063f0503e801461056d578063f2fde38b146105b3578063fee81cf4146105c6575f80fd5b8063b88d4fde146104e0578063c87b56dd146104f3578063e8a3d48514610512578063e985e9c514610526575f80fd5b80638da5cb5b116100cd5780638da5cb5b1461046157806395d89b411461047957806398bdf6f5146104ac578063a22cb465146104c1575f80fd5b8063773c02d4146103c25780637bc5d64d146103ed57806384b0196e1461041c5780638ada6b0f14610443575f80fd5b80633d27f18a116101735780636352211e116101435780636352211e1461035d57806370a082311461037c578063715018a61461039b578063756af45f146103a3575f80fd5b80633d27f18a1461031057806342842e0e1461032357806342966c681461033657806354d1f13d14610355575f80fd5b8063095ea7b3116101ae578063095ea7b31461029f57806313966db5146102b457806323b872dd146102f55780632569296214610308575f80fd5b806301ffc9a7146101d457806306fdde0314610225578063081812fc14610268575b5f80fd5b3480156101df575f80fd5b506102106101ee366004611416565b6301ffc9a760e09190911c9081146380ac58cd821417635b5e139f9091141790565b60405190151581526020015b60405180910390f35b348015610230575f80fd5b506040805180820190915260128152714e6f756e732057726170706564203230323360701b60208201525b60405161021c919061148a565b348015610273575f80fd5b5061028761028236600461149c565b6105f7565b6040516001600160a01b03909116815260200161021c565b6102b26102ad3660046114c9565b610632565b005b3480156102bf575f80fd5b506102e77f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161021c565b6102b26103033660046114f1565b610641565b6102b261074d565b6102b261031e36600461152a565b61079a565b6102b26103313660046114f1565b6108dd565b348015610341575f80fd5b506102b261035036600461149c565b610909565b6102b2610a0a565b348015610368575f80fd5b5061028761037736600461149c565b610a43565b348015610387575f80fd5b506102e761039636600461157b565b610a7f565b6102b2610ab7565b3480156103ae575f80fd5b506102b26103bd36600461157b565b610aca565b3480156103cd575f80fd5b506102e76103dc36600461157b565b60046020525f908152604090205481565b3480156103f8575f80fd5b5061040c61040736600461149c565b610ade565b60405161021c9493929190611594565b348015610427575f80fd5b50610430610b9e565b60405161021c97969594939291906115cf565b34801561044e575f80fd5b505f54610287906001600160a01b031681565b34801561046c575f80fd5b50638b78c6d81954610287565b348015610484575f80fd5b5060408051808201909152600b81526a4e5720f09f8e813230323360a81b602082015261025b565b3480156104b7575f80fd5b506102e760015481565b3480156104cc575f80fd5b506102b26104db366004611663565b610c03565b6102b26104ee366004611691565b610c56565b3480156104fe575f80fd5b5061025b61050d36600461149c565b610cb0565b34801561051d575f80fd5b5061025b610e67565b348015610531575f80fd5b50610210610540366004611724565b601c52670a5a2e7a000000006008525f526030600c205490565b6102b261056836600461157b565b610eda565b348015610578575f80fd5b5061059e61058736600461149c565b60036020525f908152604090205463ffffffff1681565b60405163ffffffff909116815260200161021c565b6102b26105c136600461157b565b610f14565b3480156105d1575f80fd5b506102e76105e036600461157b565b63389a75e1600c9081525f91909152602090205490565b5f815f52673ec412a9852d173d60c11b601c5260205f2082018201805460601b6106285763ceea21b65f526004601cfd5b6001015492915050565b61063d338383610f3a565b5050565b5f818152673ec412a9852d173d60c11b3317601c52602090208101810180546001600160a01b03948516949384169381169190828614830261069c578261068f5763ceea21b65f526004601cfd5b63a11481005f526004601cfd5b846106ae5763ea553b345f526004601cfd5b855f5281600101549250823314863314176106da576030600c20546106da57634b6e7f185f526004601cfd5b82156106e7575f82600101555b85851818905550601c600c81812080545f190190555f84905220805460010163ffffffff811661071e576301336cea5f526004601cfd5b90558082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f38a45b505050565b5f6202a30067ffffffffffffffff164201905063389a75e1600c52335f52806020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d5f80a250565b7f000000000000000000000000000000000000000000000000000000000000000034146107da5760405163078d696560e31b815260040160405180910390fd5b6001600160a01b0382165f90815260046020526040902054156108535760405162461bcd60e51b815260206004820152602660248201527f4e6f756e73577261707065643a207573657220616c7265616479206861732061604482015265103a37b5b2b760d11b60648201526084015b60405180910390fd5b60018054905f61086283611769565b90915550506001545f818152600260205260409020829061088382826118df565b90505061088f81610fd4565b5f828152600360205260409020805463ffffffff191663ffffffff929092169190911790556108be838261101b565b6001600160a01b039092165f9081526004602052604090209190915550565b6108e8838383610641565b813b156107485761074883838360405180602001604052805f8152506110c2565b638b78c6d819546001600160a01b0316336001600160a01b0316148061093c5750335f9081526004602052604090205481145b6109ae5760405162461bcd60e51b815260206004820152603860248201527f4e6f756e73577261707065643a2075736572206973206e6f74206f776e65722060448201527f6f6620636f6e7472616374206f722074686520746f6b656e0000000000000000606482015260840161084a565b6109b78161114b565b5f818152600260205260408120805466ffffffffffffff19168155906109e060018301826113cc565b50505f908152600360209081526040808320805463ffffffff191690553383526004909152812055565b63389a75e1600c52335f525f6020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c925f80a2565b5f818152673ec412a9852d173d60c11b601c526020902081018101546001600160a01b031680610a7a5763ceea21b65f526004601cfd5b919050565b5f81610a9257638f4eb6045f526004601cfd5b673ec412a9852d173d60c11b601c52815f5263ffffffff601c600c2054169050919050565b610abf611155565b610ac85f61116f565b565b610ad2611155565b610adb816111ac565b50565b60026020525f90815260409020805460018201805461ffff8084169462010000850490911693640100000000900462ffffff16929091610b1d906117a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b49906117a7565b8015610b945780601f10610b6b57610100808354040283529160200191610b94565b820191905f5260205f20905b815481529060010190602001808311610b7757829003601f168201915b5050505050905084565b600f60f81b6060805f808083610bf160408051808201825260128152714e6f756e732057726170706564203230323360701b602080830191909152825180840190935260018352603160f81b9083015291565b97989097965046955030945091925090565b801515905081601c52670a5a2e7a00000000600852335f52806030600c2055805f528160601b60601c337f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160205fa35050565b610c61858585610641565b833b15610ca957610ca985858585858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506110c292505050565b5050505050565b5f8181526002602090815260408083208151608081018352815461ffff8082168352620100008204169482019490945264010000000090930462ffffff169183019190915260018101805460609493929185840191610d0e906117a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3a906117a7565b8015610d855780601f10610d5c57610100808354040283529160200191610d85565b820191905f5260205f20905b815481529060010190602001808311610d6857829003601f168201915b505050919092525050604080518082018252601081526f30b8383634b1b0ba34b7b717b539b7b760811b6020808301919091525f8054898252600383529084902054865192870151858801516060890151965163e522a91560e01b8152989950610e60989597506001600160a01b039093169563e522a91595610e199563ffffffff909416948d94939290916004016119a9565b5f60405180830381865afa158015610e33573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610e5a91908101906119f8565b906111c5565b9392505050565b604080518082018252601081526f30b8383634b1b0ba34b7b717b539b7b760811b60208201525f80548351635f17cac360e01b81529351606094610ed594936001600160a01b0390931692635f17cac3926004808401938290030181865afa158015610e33573d5f803e3d5ffd5b905090565b610ee2611155565b63389a75e1600c52805f526020600c208054421115610f0857636f5e88185f526004601cfd5b5f9055610adb8161116f565b610f1c611155565b8060601b610f3157637448fbae5f526004601cfd5b610adb8161116f565b5f1960601c82811692508381169350815f5283673ec412a9852d173d60c11b17601c5260205f208201820180548216915081610f7d5763ceea21b65f526004601cfd5b818514851517610fa157815f526030600c2054610fa157634b6e7f185f526004601cfd5b6001018390558183827f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9255f38a450505050565b5f42610fe1600143611aa0565b6040805160208101939093529040908201526060810183905260800160408051601f19818403018152919052805160209091012092915050565b6001600160a01b0390911690816110395763ea553b345f526004601cfd5b805f52673ec412a9852d173d60c11b601c5260205f208101810180548060601b1561106b5763c991cbb15f526004601cfd5b831790555f829052601c600c20805460010163ffffffff8116611095576301336cea5f526004601cfd5b905580825f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8138a45050565b60405163150b7a028082523360208301528560601b60601c604083015283606083015260808083015282518060a08401528015611109578060c08401826020870160045afa505b60208360a48301601c86015f8a5af161112a573d1561112a573d5f843e3d83fd5b508060e01b8251146111435763d1a57ed65f526004601cfd5b505050505050565b610adb5f82611219565b638b78c6d819543314610ac8576382b429005f526004601cfd5b638b78c6d81980546001600160a01b039092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a355565b5f385f3847855af1610adb5763b12d13eb5f526004601cfd5b6060816111f0846040516020016111dc9190611ab3565b6040516020818303038152906040526112df565b604051602001611201929190611ace565b60405160208183030381529060405290505b92915050565b5f61122382610a43565b9050505f8181526001600160a01b03928316673ec412a9852d173d60c11b8117601c5260209091208201820180549193821691826112685763ceea21b65f526004601cfd5b825f52816001015480861484871417861517611295576030600c205461129557634b6e7f185f526004601cfd5b80156112a2575f83600101555b5082189055601c600c2080545f19019055815f827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8238a4505050565b6060611213825f806060835180156113c4576003600282010460021b60405192507f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f526106708515027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f18603f52602083018181015b6003880197508751603f8160121c16515f53603f81600c1c1651600153603f8160061c1651600253603f811651600353505f51825260048201915080821061135757602001604052613d3d60f01b60038406600204808303919091525f8615159091029182900352900382525b509392505050565b5080546113d8906117a7565b5f825580601f106113e7575050565b601f0160209004905f5260205f2090810190610adb91905b80821115611412575f81556001016113ff565b5090565b5f60208284031215611426575f80fd5b81356001600160e01b031981168114610e60575f80fd5b5f5b8381101561145757818101518382015260200161143f565b50505f910152565b5f815180845261147681602086016020860161143d565b601f01601f19169290920160200192915050565b602081525f610e60602083018461145f565b5f602082840312156114ac575f80fd5b5035919050565b80356001600160a01b0381168114610a7a575f80fd5b5f80604083850312156114da575f80fd5b6114e3836114b3565b946020939093013593505050565b5f805f60608486031215611503575f80fd5b61150c846114b3565b925061151a602085016114b3565b9150604084013590509250925092565b5f806040838503121561153b575f80fd5b611544836114b3565b9150602083013567ffffffffffffffff81111561155f575f80fd5b830160808186031215611570575f80fd5b809150509250929050565b5f6020828403121561158b575f80fd5b610e60826114b3565b5f61ffff808716835280861660208401525062ffffff84166040830152608060608301526115c5608083018461145f565b9695505050505050565b60ff60f81b881681525f602060e0818401526115ee60e084018a61145f565b8381036040850152611600818a61145f565b606085018990526001600160a01b038816608086015260a0850187905284810360c086015285518082528387019250908301905f5b8181101561165157835183529284019291840191600101611635565b50909c9b505050505050505050505050565b5f8060408385031215611674575f80fd5b61167d836114b3565b915060208301358015158114611570575f80fd5b5f805f805f608086880312156116a5575f80fd5b6116ae866114b3565b94506116bc602087016114b3565b935060408601359250606086013567ffffffffffffffff808211156116df575f80fd5b818801915088601f8301126116f2575f80fd5b813581811115611700575f80fd5b896020828501011115611711575f80fd5b9699959850939650602001949392505050565b5f8060408385031215611735575f80fd5b61173e836114b3565b915061174c602084016114b3565b90509250929050565b634e487b7160e01b5f52601160045260245ffd5b5f6001820161177a5761177a611755565b5060010190565b5f813561ffff81168114611213575f80fd5b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806117bb57607f821691505b6020821081036117d957634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610748575f81815260208120601f850160051c810160208610156118055750805b601f850160051c820191505b8181101561114357828155600101611811565b67ffffffffffffffff83111561183c5761183c611793565b6118508361184a83546117a7565b836117df565b5f601f841160018114611881575f851561186a5750838201355b5f19600387901b1c1916600186901b178355610ca9565b5f83815260209020601f19861690835b828110156118b15786850135825560209485019460019092019101611891565b50868210156118cd575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b61ffff6118eb83611781565b1681548161ffff19821617835563ffff000061190960208601611781565b60101b16808363ffffffff19841617178455604085013562ffffff81168114611930575f80fd5b66ffffff000000008160201b168466ffffffffffffff198516178317178555505050506060820135601e19833603018112611969575f80fd5b8201803567ffffffffffffffff811115611981575f80fd5b602082019150803603821315611995575f80fd5b6119a3818360018601611824565b50505050565b63ffffffff871681528560208201525f61ffff808716604084015280861660608401525062ffffff8416608083015260c060a08301526119ec60c083018461145f565b98975050505050505050565b5f60208284031215611a08575f80fd5b815167ffffffffffffffff80821115611a1f575f80fd5b818401915084601f830112611a32575f80fd5b815181811115611a4457611a44611793565b604051601f8201601f19908116603f01168101908382118183101715611a6c57611a6c611793565b81604052828152876020848701011115611a84575f80fd5b611a9583602083016020880161143d565b979650505050505050565b8181038181111561121357611213611755565b5f8251611ac481846020870161143d565b9190910192915050565b643230ba309d60d91b81525f8351611aed81600585016020880161143d565b670ed8985cd94d8d0b60c21b6005918401918201528351611b1581600d84016020880161143d565b01600d0194935050505056fea2646970667358221220d94a52afb3b68c75f72b3e2a1684b36cb74b69c2085292fc5289087c4ffa692664736f6c63430008150033",
  "devdoc": {
    "errors": {
      "AccountBalanceOverflow()": [
        {
          "details": "The recipient's balance has overflowed."
        }
      ],
      "AlreadyInitialized()": [
        {
          "details": "Cannot double-initialize."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "details": "Cannot query the balance for the zero address."
        }
      ],
      "NewOwnerIsZeroAddress()": [
        {
          "details": "The `newOwner` cannot be the zero address."
        }
      ],
      "NoHandoverRequest()": [
        {
          "details": "The `pendingOwner` does not have a valid handover request."
        }
      ],
      "NotOwnerNorApproved()": [
        {
          "details": "Only the token owner or an approved account can manage the token."
        }
      ],
      "TokenAlreadyExists()": [
        {
          "details": "The token already exists."
        }
      ],
      "TokenDoesNotExist()": [
        {
          "details": "The token does not exist."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "details": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "details": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "details": "Cannot mint or transfer to the zero address."
        }
      ],
      "Unauthorized()": [
        {
          "details": "The caller is not authorized to call the function."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `account` to manage the `id` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables `operator` to manage all of their tokens."
      },
      "OwnershipHandoverCanceled(address)": {
        "details": "The ownership handover to `pendingOwner` has been canceled."
      },
      "OwnershipHandoverRequested(address)": {
        "details": "An ownership handover to `pendingOwner` has been requested."
      },
      "OwnershipTransferred(address,address)": {
        "details": "The ownership is transferred from `oldOwner` to `newOwner`. This event is intentionally kept the same as OpenZeppelin's Ownable to be compatible with indexers and [EIP-173](https://eips.ethereum.org/EIPS/eip-173), despite it not being as lightweight as a single argument event."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when token `id` is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Sets `account` as the approved account to manage token `id`. Requirements: - Token `id` must exist. - The caller must be the owner of the token,   or an approved operator for the token owner. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens owned by `owner`. Requirements: - `owner` must not be the zero address."
      },
      "cancelOwnershipHandover()": {
        "details": "Cancels the two-step ownership handover to the caller, if any."
      },
      "completeOwnershipHandover(address)": {
        "details": "Allows the owner to complete the two-step ownership handover to `pendingOwner`. Reverts if there is no existing ownership handover requested by `pendingOwner`."
      },
      "constructor": {
        "params": {
          "_mintFee": "Fee in wei per mint"
        }
      },
      "contractURI()": {
        "returns": {
          "_0": "Base64 encoded metadata data URI"
        }
      },
      "eip712Domain()": {
        "details": "See: https://eips.ethereum.org/EIPS/eip-5267"
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved to manage token `id`. Requirements: - Token `id` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns whether `operator` is approved to manage the tokens of `owner`."
      },
      "owner()": {
        "details": "Returns the owner of the contract."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of token `id`. Requirements: - Token `id` must exist."
      },
      "ownershipHandoverExpiresAt(address)": {
        "details": "Returns the expiry timestamp for the two-step ownership handover to `pendingOwner`."
      },
      "renounceOwnership()": {
        "details": "Allows the owner to renounce their ownership."
      },
      "requestOwnershipHandover()": {
        "details": "Request a two-step ownership handover to the caller. The request will automatically expire in 48 hours (172800 seconds) by default."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, id, \"\")`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. - If `to` refers to a smart contract, it must implement   {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets whether `operator` is approved to manage the tokens of the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See: https://eips.ethereum.org/EIPS/eip-165 This function call must use less than 30000 gas."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "Token/Nouns ID"
        },
        "returns": {
          "_0": "Base64 encoded metadata data URI"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers token `id` from `from` to `to`. Requirements: - Token `id` must exist. - `from` must be the owner of the token. - `to` cannot be the zero address. - The caller must be the owner of the token, or be approved to manage the token. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Allows the owner to transfer the ownership to `newOwner`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidPayment()": [
        {
          "notice": "Caller provided incorrect payable amount"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "contractURI()": {
        "notice": "Read contract metadata"
      },
      "mint(address,(uint16,uint16,uint24,string))": {
        "notice": "Mint a Nouns Wrapped token.         Caller must send mintFee wei as msg.value.         Caller must provide an EIP-712 `Mint` signature."
      },
      "mintFee()": {
        "notice": "Fee in wei per mint"
      },
      "name()": {
        "notice": "Read token name"
      },
      "seeds(uint256)": {
        "notice": "Random seed by tokenId"
      },
      "statsOf(uint256)": {
        "notice": "Read stats by tokenId"
      },
      "symbol()": {
        "notice": "Read token symbol"
      },
      "tokenIdCounter()": {
        "notice": "Last minted token ID"
      },
      "tokenIdOf(address)": {
        "notice": "tokenId by owner"
      },
      "tokenURI(uint256)": {
        "notice": "Read token metadata"
      },
      "withdrawBalance(address)": {
        "notice": "Withdraw contract balance. Only callable by owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 61,
        "contract": "contracts/NounsWrapped.sol:NounsWrapped",
        "label": "renderer",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Renderer)936"
      },
      {
        "astId": 70,
        "contract": "contracts/NounsWrapped.sol:NounsWrapped",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 86,
        "contract": "contracts/NounsWrapped.sol:NounsWrapped",
        "label": "statsOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(WrappedStats)80_storage)"
      },
      {
        "astId": 91,
        "contract": "contracts/NounsWrapped.sol:NounsWrapped",
        "label": "seeds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 96,
        "contract": "contracts/NounsWrapped.sol:NounsWrapped",
        "label": "tokenIdOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Renderer)936": {
        "encoding": "inplace",
        "label": "contract Renderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(WrappedStats)80_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NounsWrapped.WrappedStats)",
        "numberOfBytes": "32",
        "value": "t_struct(WrappedStats)80_storage"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WrappedStats)80_storage": {
        "encoding": "inplace",
        "label": "struct NounsWrapped.WrappedStats",
        "members": [
          {
            "astId": 73,
            "contract": "contracts/NounsWrapped.sol:NounsWrapped",
            "label": "props",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 75,
            "contract": "contracts/NounsWrapped.sol:NounsWrapped",
            "label": "sponsoredProps",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 77,
            "contract": "contracts/NounsWrapped.sol:NounsWrapped",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 79,
            "contract": "contracts/NounsWrapped.sol:NounsWrapped",
            "label": "username",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}